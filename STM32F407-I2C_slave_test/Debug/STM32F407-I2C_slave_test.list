
STM32F407-I2C_slave_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009440  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e4  080095e4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080095e4  080095e4  000195e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095ec  080095ec  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095ec  080095ec  000195ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080095f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  20000090  08009684  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08009684  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019818  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037d6  00000000  00000000  000398d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  0003e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ab1  00000000  00000000  0003f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a20  00000000  00000000  00062d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb14d  00000000  00000000  000747b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f8fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  0013f97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080095b0 	.word	0x080095b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080095b0 	.word	0x080095b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_I2C_AddrCallback>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <HAL_I2C_AddrCallback+0x24>)
 80004de:	f001 f816 	bl	800150e <HAL_GPIO_TogglePin>
	if(TransferDirection==1) //master read
	{
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &i2c_send_slave, 1);
	}
	*/
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	//HAL_I2C_EnableListen_IT(&hi2c1);
	if(buffer[0] == 0x10){
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b10      	cmp	r3, #16
 80004fe:	d105      	bne.n	800050c <HAL_I2C_SlaveRxCpltCallback+0x1c>
		//CS high
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000506:	f001 f802 	bl	800150e <HAL_GPIO_TogglePin>
 800050a:	e008      	b.n	800051e <HAL_I2C_SlaveRxCpltCallback+0x2e>
	}
	else if(buffer[0] == 0x30){
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b30      	cmp	r3, #48	; 0x30
 8000512:	d104      	bne.n	800051e <HAL_I2C_SlaveRxCpltCallback+0x2e>
		//CS low
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 800051a:	f000 fff8 	bl	800150e <HAL_GPIO_TogglePin>
	else if(buffer[0] == 0x0C){
		//new device added ==> pull down new_dev
	}

	// Issue new receive interrupt
	if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 800051e:	2201      	movs	r2, #1
 8000520:	4905      	ldr	r1, [pc, #20]	; (8000538 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8000524:	f002 fe38 	bl	8003198 <HAL_I2C_Slave_Receive_IT>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d000      	beq.n	8000530 <HAL_I2C_SlaveRxCpltCallback+0x40>
	  	asm("bkpt 255");
 800052e:	beff      	bkpt	0x00ff
	}

}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	20000114 	.word	0x20000114
 800053c:	40020c00 	.word	0x40020c00
 8000540:	200000c0 	.word	0x200000c0

08000544 <HAL_I2C_SlaveTxCpltCallback>:



void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	HAL_I2C_EnableListen_IT(&hi2c1);
 800054c:	4803      	ldr	r0, [pc, #12]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x18>)
 800054e:	f002 fe93 	bl	8003278 <HAL_I2C_EnableListen_IT>

}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200000c0 	.word	0x200000c0

08000560 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // Restart
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f002 fe85 	bl	8003278 <HAL_I2C_EnableListen_IT>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f003 f8f6 	bl	8003770 <HAL_I2C_GetError>
 8000584:	4603      	mov	r3, r0
 8000586:	2b04      	cmp	r3, #4
 8000588:	d000      	beq.n	800058c <HAL_I2C_ErrorCallback+0x16>
		asm("nop");
 800058a:	bf00      	nop
	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc30 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f828 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f93c 	bl	800081c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a4:	f000 f8a6 	bl	80006f4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a8:	f000 f8d2 	bl	8000750 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ac:	f000 f900 	bl	80007b0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005b0:	f008 fbfa 	bl	8008da8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	480a      	ldr	r0, [pc, #40]	; (80005e4 <main+0x50>)
 80005bc:	f000 ff8e 	bl	80014dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <main+0x50>)
 80005c8:	f000 ff88 	bl	80014dc <HAL_GPIO_WritePin>
  //HAL_I2C_EnableListen_IT(&hi2c1);

  if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 80005cc:	2201      	movs	r2, #1
 80005ce:	4906      	ldr	r1, [pc, #24]	; (80005e8 <main+0x54>)
 80005d0:	4806      	ldr	r0, [pc, #24]	; (80005ec <main+0x58>)
 80005d2:	f002 fde1 	bl	8003198 <HAL_I2C_Slave_Receive_IT>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d000      	beq.n	80005de <main+0x4a>
  	asm("bkpt 255");
 80005dc:	beff      	bkpt	0x00ff
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005de:	f008 fc09 	bl	8008df4 <MX_USB_HOST_Process>
 80005e2:	e7fc      	b.n	80005de <main+0x4a>
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	20000114 	.word	0x20000114
 80005ec:	200000c0 	.word	0x200000c0

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f008 ff14 	bl	800942c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <SystemClock_Config+0xfc>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	4a30      	ldr	r2, [pc, #192]	; (80006ec <SystemClock_Config+0xfc>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	6413      	str	r3, [r2, #64]	; 0x40
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemClock_Config+0xfc>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <SystemClock_Config+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a2a      	ldr	r2, [pc, #168]	; (80006f0 <SystemClock_Config+0x100>)
 8000648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <SystemClock_Config+0x100>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065a:	2301      	movs	r3, #1
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800065e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000662:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000668:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066e:	2308      	movs	r3, #8
 8000670:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000672:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000684:	4618      	mov	r0, r3
 8000686:	f004 ff59 	bl	800553c <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000690:	f000 f9c2 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f9b2 	bl	8005a1c <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006be:	f000 f9ab 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006c2:	2301      	movs	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006c6:	23c0      	movs	r3, #192	; 0xc0
 80006c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fb80 	bl	8005dd8 <HAL_RCCEx_PeriphCLKConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006de:	f000 f99b 	bl	8000a18 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3760      	adds	r7, #96	; 0x60
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_I2C1_Init+0x50>)
 80006fa:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_I2C1_Init+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_I2C1_Init+0x50>)
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_I2C1_Init+0x58>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 64;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_I2C1_Init+0x50>)
 800070c:	2240      	movs	r2, #64	; 0x40
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_I2C1_Init+0x50>)
 8000712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_I2C1_Init+0x50>)
 8000732:	f002 fbf9 	bl	8002f28 <HAL_I2C_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800073c:	f000 f96c 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000c0 	.word	0x200000c0
 8000748:	40005400 	.word	0x40005400
 800074c:	000186a0 	.word	0x000186a0

08000750 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_I2S3_Init+0x58>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000768:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000774:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000778:	4a0c      	ldr	r2, [pc, #48]	; (80007ac <MX_I2S3_Init+0x5c>)
 800077a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_I2S3_Init+0x54>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_I2S3_Init+0x54>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_I2S3_Init+0x54>)
 8000790:	f004 fa34 	bl	8004bfc <HAL_I2S_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800079a:	f000 f93d 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000170 	.word	0x20000170
 80007a8:	40003c00 	.word	0x40003c00
 80007ac:	00017700 	.word	0x00017700

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f005 fc27 	bl	8006054 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f904 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000118 	.word	0x20000118
 8000818:	40013000 	.word	0x40013000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b71      	ldr	r3, [pc, #452]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a70      	ldr	r2, [pc, #448]	; (80009fc <MX_GPIO_Init+0x1e0>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b6e      	ldr	r3, [pc, #440]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a69      	ldr	r2, [pc, #420]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b63      	ldr	r3, [pc, #396]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a62      	ldr	r2, [pc, #392]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b60      	ldr	r3, [pc, #384]	; (80009fc <MX_GPIO_Init+0x1e0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <MX_GPIO_Init+0x1e0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a5b      	ldr	r2, [pc, #364]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b59      	ldr	r3, [pc, #356]	; (80009fc <MX_GPIO_Init+0x1e0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a54      	ldr	r2, [pc, #336]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b52      	ldr	r3, [pc, #328]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a4d      	ldr	r2, [pc, #308]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4b      	ldr	r3, [pc, #300]	; (80009fc <MX_GPIO_Init+0x1e0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	4848      	ldr	r0, [pc, #288]	; (8000a00 <MX_GPIO_Init+0x1e4>)
 80008e0:	f000 fdfc 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	4846      	ldr	r0, [pc, #280]	; (8000a04 <MX_GPIO_Init+0x1e8>)
 80008ea:	f000 fdf7 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f4:	4844      	ldr	r0, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x1ec>)
 80008f6:	f000 fdf1 	bl	80014dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008fa:	2308      	movs	r3, #8
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	483b      	ldr	r0, [pc, #236]	; (8000a00 <MX_GPIO_Init+0x1e4>)
 8000912:	f000 fc49 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4835      	ldr	r0, [pc, #212]	; (8000a04 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fc3b 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000932:	2308      	movs	r3, #8
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000942:	2305      	movs	r3, #5
 8000944:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	482d      	ldr	r0, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x1e8>)
 800094e:	f000 fc2b 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000952:	2301      	movs	r3, #1
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <MX_GPIO_Init+0x1f0>)
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <MX_GPIO_Init+0x1f4>)
 8000966:	f000 fc1f 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800096a:	2304      	movs	r3, #4
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_GPIO_Init+0x1f8>)
 800097e:	f000 fc13 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000994:	2305      	movs	r3, #5
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	481d      	ldr	r0, [pc, #116]	; (8000a14 <MX_GPIO_Init+0x1f8>)
 80009a0:	f000 fc02 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4812      	ldr	r0, [pc, #72]	; (8000a08 <MX_GPIO_Init+0x1ec>)
 80009be:	f000 fbf3 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009c2:	2320      	movs	r3, #32
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_GPIO_Init+0x1ec>)
 80009d6:	f000 fbe7 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009da:	2302      	movs	r3, #2
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x1f0>)
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0x1e4>)
 80009ee:	f000 fbdb 	bl	80011a8 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3730      	adds	r7, #48	; 0x30
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40021000 	.word	0x40021000
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	10120000 	.word	0x10120000
 8000a10:	40020000 	.word	0x40020000
 8000a14:	40020400 	.word	0x40020400

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <Error_Handler+0x6>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fb30 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_I2C_MspInit+0xa4>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d13b      	bne.n	8000b0a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <HAL_I2C_MspInit+0xac>)
 8000aca:	f000 fb6d 	bl	80011a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000ad8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_I2C_MspInit+0xa8>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	201f      	movs	r0, #31
 8000af0:	f000 faf3 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000af4:	201f      	movs	r0, #31
 8000af6:	f000 fb0c 	bl	8001112 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2020      	movs	r0, #32
 8000b00:	f000 faeb 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b04:	2020      	movs	r0, #32
 8000b06:	f000 fb04 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	; 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40005400 	.word	0x40005400
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a28      	ldr	r2, [pc, #160]	; (8000be0 <HAL_I2S_MspInit+0xc0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d14a      	bne.n	8000bd8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a18      	ldr	r2, [pc, #96]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <HAL_I2S_MspInit+0xc4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b96:	2310      	movs	r3, #16
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480d      	ldr	r0, [pc, #52]	; (8000be8 <HAL_I2S_MspInit+0xc8>)
 8000bb2:	f000 faf9 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bb6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_I2S_MspInit+0xcc>)
 8000bd4:	f000 fae8 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40003c00 	.word	0x40003c00
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020800 	.word	0x40020800

08000bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x84>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d12b      	bne.n	8000c6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c4a:	23e0      	movs	r3, #224	; 0xe0
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_SPI_MspInit+0x8c>)
 8000c66:	f000 fa9f 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f8e8 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <I2C1_EV_IRQHandler+0x10>)
 8000cda:	f002 fb03 	bl	80032e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000c0 	.word	0x200000c0

08000ce8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <I2C1_ER_IRQHandler+0x10>)
 8000cee:	f002 fc66 	bl	80035be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000c0 	.word	0x200000c0

08000cfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <OTG_FS_IRQHandler+0x10>)
 8000d02:	f000 feaf 	bl	8001a64 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000594 	.word	0x20000594

08000d10 <_sbrk>:
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
 8000d40:	f008 fb3a 	bl	80093b8 <__errno>
 8000d44:	4602      	mov	r2, r0
 8000d46:	230c      	movs	r3, #12
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	200000ac 	.word	0x200000ac
 8000d78:	20000860 	.word	0x20000860

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <SystemInit+0x28>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <SystemInit+0x28>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SystemInit+0x28>)
 8000d92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d96:	609a      	str	r2, [r3, #8]
#endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x14>
 8000dac:	2100      	movs	r1, #0
 8000dae:	e003      	b.n	8000db8 <LoopCopyDataInit>

08000db0 <CopyDataInit>:
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <LoopFillZerobss+0x18>)
 8000db2:	585b      	ldr	r3, [r3, r1]
 8000db4:	5043      	str	r3, [r0, r1]
 8000db6:	3104      	adds	r1, #4

08000db8 <LoopCopyDataInit>:
 8000db8:	480b      	ldr	r0, [pc, #44]	; (8000de8 <LoopFillZerobss+0x1c>)
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <LoopFillZerobss+0x20>)
 8000dbc:	1842      	adds	r2, r0, r1
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3f6      	bcc.n	8000db0 <CopyDataInit>
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x24>)
 8000dc4:	e002      	b.n	8000dcc <LoopFillZerobss>

08000dc6 <FillZerobss>:
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f842 3b04 	str.w	r3, [r2], #4

08000dcc <LoopFillZerobss>:
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <LoopFillZerobss+0x28>)
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d3f9      	bcc.n	8000dc6 <FillZerobss>
 8000dd2:	f7ff ffd3 	bl	8000d7c <SystemInit>
 8000dd6:	f008 faf5 	bl	80093c4 <__libc_init_array>
 8000dda:	f7ff fbdb 	bl	8000594 <main>
 8000dde:	4770      	bx	lr
 8000de0:	20020000 	.word	0x20020000
 8000de4:	080095f4 	.word	0x080095f4
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000090 	.word	0x20000090
 8000df0:	20000090 	.word	0x20000090
 8000df4:	2000085c 	.word	0x2000085c

08000df8 <ADC_IRQHandler>:
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94d 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fdf6 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f965 	bl	800112e <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f92d 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	200001b8 	.word	0x200001b8

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200001b8 	.word	0x200001b8

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <HAL_Delay+0x40>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000008 	.word	0x20000008

08000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f40:	4013      	ands	r3, r2
 8000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f56:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <__NVIC_SetPriorityGrouping+0x44>)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	60d3      	str	r3, [r2, #12]
}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <__NVIC_GetPriorityGrouping+0x18>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	0a1b      	lsrs	r3, r3, #8
 8000f76:	f003 0307 	and.w	r3, r3, #7
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	db0b      	blt.n	8000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f003 021f 	and.w	r2, r3, #31
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <__NVIC_EnableIRQ+0x38>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	095b      	lsrs	r3, r3, #5
 8000fa8:	2001      	movs	r0, #1
 8000faa:	fa00 f202 	lsl.w	r2, r0, r2
 8000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100

08000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	6039      	str	r1, [r7, #0]
 8000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	db0a      	blt.n	8000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	490c      	ldr	r1, [pc, #48]	; (8001010 <__NVIC_SetPriority+0x4c>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	0112      	lsls	r2, r2, #4
 8000fe4:	b2d2      	uxtb	r2, r2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fec:	e00a      	b.n	8001004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	4908      	ldr	r1, [pc, #32]	; (8001014 <__NVIC_SetPriority+0x50>)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	3b04      	subs	r3, #4
 8000ffc:	0112      	lsls	r2, r2, #4
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	440b      	add	r3, r1
 8001002:	761a      	strb	r2, [r3, #24]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f1c3 0307 	rsb	r3, r3, #7
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf28      	it	cs
 8001036:	2304      	movcs	r3, #4
 8001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3304      	adds	r3, #4
 800103e:	2b06      	cmp	r3, #6
 8001040:	d902      	bls.n	8001048 <NVIC_EncodePriority+0x30>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3b03      	subs	r3, #3
 8001046:	e000      	b.n	800104a <NVIC_EncodePriority+0x32>
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	f04f 32ff 	mov.w	r2, #4294967295
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43da      	mvns	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	401a      	ands	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001060:	f04f 31ff 	mov.w	r1, #4294967295
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa01 f303 	lsl.w	r3, r1, r3
 800106a:	43d9      	mvns	r1, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4313      	orrs	r3, r2
         );
}
 8001072:	4618      	mov	r0, r3
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff8e 	bl	8000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff29 	bl	8000f24 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff3e 	bl	8000f6c <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff8e 	bl	8001018 <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5d 	bl	8000fc4 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff31 	bl	8000f88 <__NVIC_EnableIRQ>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffa2 	bl	8001080 <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d004      	beq.n	8001164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e00c      	b.n	800117e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2205      	movs	r2, #5
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001198:	b2db      	uxtb	r3, r3
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e16b      	b.n	800149c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 815a 	bne.w	8001496 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d00b      	beq.n	8001202 <HAL_GPIO_Init+0x5a>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d007      	beq.n	8001202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d130      	bne.n	8001264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68da      	ldr	r2, [r3, #12]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001238:	2201      	movs	r2, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	091b      	lsrs	r3, r3, #4
 800124e:	f003 0201 	and.w	r2, r3, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0xfc>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b12      	cmp	r3, #18
 80012a2:	d123      	bne.n	80012ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80b4 	beq.w	8001496 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b5f      	ldr	r3, [pc, #380]	; (80014b0 <HAL_GPIO_Init+0x308>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a5e      	ldr	r2, [pc, #376]	; (80014b0 <HAL_GPIO_Init+0x308>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b5c      	ldr	r3, [pc, #368]	; (80014b0 <HAL_GPIO_Init+0x308>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134a:	4a5a      	ldr	r2, [pc, #360]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a51      	ldr	r2, [pc, #324]	; (80014b8 <HAL_GPIO_Init+0x310>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d02b      	beq.n	80013ce <HAL_GPIO_Init+0x226>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a50      	ldr	r2, [pc, #320]	; (80014bc <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d025      	beq.n	80013ca <HAL_GPIO_Init+0x222>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4f      	ldr	r2, [pc, #316]	; (80014c0 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01f      	beq.n	80013c6 <HAL_GPIO_Init+0x21e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0x21a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4d      	ldr	r2, [pc, #308]	; (80014c8 <HAL_GPIO_Init+0x320>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d013      	beq.n	80013be <HAL_GPIO_Init+0x216>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <HAL_GPIO_Init+0x324>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d00d      	beq.n	80013ba <HAL_GPIO_Init+0x212>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4b      	ldr	r2, [pc, #300]	; (80014d0 <HAL_GPIO_Init+0x328>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4a      	ldr	r2, [pc, #296]	; (80014d4 <HAL_GPIO_Init+0x32c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_GPIO_Init+0x20a>
 80013ae:	2307      	movs	r3, #7
 80013b0:	e00e      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013b2:	2308      	movs	r3, #8
 80013b4:	e00c      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e00a      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ba:	2305      	movs	r3, #5
 80013bc:	e008      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013be:	2304      	movs	r3, #4
 80013c0:	e006      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e004      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013c6:	2302      	movs	r3, #2
 80013c8:	e002      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_GPIO_Init+0x228>
 80013ce:	2300      	movs	r3, #0
 80013d0:	69fa      	ldr	r2, [r7, #28]
 80013d2:	f002 0203 	and.w	r2, r2, #3
 80013d6:	0092      	lsls	r2, r2, #2
 80013d8:	4093      	lsls	r3, r2
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013e0:	4934      	ldr	r1, [pc, #208]	; (80014b4 <HAL_GPIO_Init+0x30c>)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	089b      	lsrs	r3, r3, #2
 80013e6:	3302      	adds	r3, #2
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <HAL_GPIO_Init+0x330>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <HAL_GPIO_Init+0x330>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143c:	4a26      	ldr	r2, [pc, #152]	; (80014d8 <HAL_GPIO_Init+0x330>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_GPIO_Init+0x330>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_GPIO_Init+0x330>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	2b0f      	cmp	r3, #15
 80014a0:	f67f ae90 	bls.w	80011c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a4:	bf00      	nop
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021800 	.word	0x40021800
 80014d4:	40021c00 	.word	0x40021c00
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	401a      	ands	r2, r3
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	429a      	cmp	r2, r3
 8001526:	d104      	bne.n	8001532 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	041a      	lsls	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b08f      	sub	sp, #60	; 0x3c
 8001548:	af0a      	add	r7, sp, #40	; 0x28
 800154a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e054      	b.n	8001600 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f007 fc77 	bl	8008e64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2203      	movs	r2, #3
 800157a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fe33 	bl	8006200 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	687e      	ldr	r6, [r7, #4]
 80015a2:	466d      	mov	r5, sp
 80015a4:	f106 0410 	add.w	r4, r6, #16
 80015a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b8:	1d33      	adds	r3, r6, #4
 80015ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015bc:	6838      	ldr	r0, [r7, #0]
 80015be:	f004 fdad 	bl	800611c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fe2a 	bl	8006222 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	687e      	ldr	r6, [r7, #4]
 80015d6:	466d      	mov	r5, sp
 80015d8:	f106 0410 	add.w	r4, r6, #16
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015ec:	1d33      	adds	r3, r6, #4
 80015ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f004 ff3d 	bl	8006470 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001608 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b089      	sub	sp, #36	; 0x24
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	70fb      	strb	r3, [r7, #3]
 800161a:	460b      	mov	r3, r1
 800161c:	70bb      	strb	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_HCD_HC_Init+0x28>
 800162c:	2302      	movs	r3, #2
 800162e:	e07f      	b.n	8001730 <HAL_HCD_HC_Init+0x128>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	333d      	adds	r3, #61	; 0x3d
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3338      	adds	r3, #56	; 0x38
 800165c:	787a      	ldrb	r2, [r7, #1]
 800165e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3340      	adds	r3, #64	; 0x40
 8001670:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001672:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	3339      	adds	r3, #57	; 0x39
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	333f      	adds	r3, #63	; 0x3f
 8001698:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800169c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	78bb      	ldrb	r3, [r7, #2]
 80016a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a6:	b2d8      	uxtb	r0, r3
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	333a      	adds	r3, #58	; 0x3a
 80016b6:	4602      	mov	r2, r0
 80016b8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da0a      	bge.n	80016d8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	333b      	adds	r3, #59	; 0x3b
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	e009      	b.n	80016ec <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	333b      	adds	r3, #59	; 0x3b
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016ec:	78fa      	ldrb	r2, [r7, #3]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	333c      	adds	r3, #60	; 0x3c
 80016fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001700:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	787c      	ldrb	r4, [r7, #1]
 8001708:	78ba      	ldrb	r2, [r7, #2]
 800170a:	78f9      	ldrb	r1, [r7, #3]
 800170c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800170e:	9302      	str	r3, [sp, #8]
 8001710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4623      	mov	r3, r4
 800171e:	f005 f829 	bl	8006774 <USB_HC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_HCD_HC_Halt+0x1e>
 8001752:	2302      	movs	r3, #2
 8001754:	e00f      	b.n	8001776 <HAL_HCD_HC_Halt+0x3e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	4611      	mov	r1, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f005 fa65 	bl	8006c36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4603      	mov	r3, r0
 8001790:	70fb      	strb	r3, [r7, #3]
 8001792:	460b      	mov	r3, r1
 8001794:	70bb      	strb	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	333b      	adds	r3, #59	; 0x3b
 80017aa:	78ba      	ldrb	r2, [r7, #2]
 80017ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	333f      	adds	r3, #63	; 0x3f
 80017be:	787a      	ldrb	r2, [r7, #1]
 80017c0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017c2:	7c3b      	ldrb	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d114      	bne.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3342      	adds	r3, #66	; 0x42
 80017d8:	2203      	movs	r2, #3
 80017da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	440b      	add	r3, r1
 80017ea:	333d      	adds	r3, #61	; 0x3d
 80017ec:	7f3a      	ldrb	r2, [r7, #28]
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e009      	b.n	8001806 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f2:	78fa      	ldrb	r2, [r7, #3]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2202      	movs	r2, #2
 8001804:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001806:	787b      	ldrb	r3, [r7, #1]
 8001808:	2b03      	cmp	r3, #3
 800180a:	f200 80d6 	bhi.w	80019ba <HAL_HCD_HC_SubmitRequest+0x23a>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001825 	.word	0x08001825
 8001818:	080019a5 	.word	0x080019a5
 800181c:	08001891 	.word	0x08001891
 8001820:	0800191b 	.word	0x0800191b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001824:	7c3b      	ldrb	r3, [r7, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	f040 80c9 	bne.w	80019be <HAL_HCD_HC_SubmitRequest+0x23e>
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80c5 	bne.w	80019be <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001834:	8b3b      	ldrh	r3, [r7, #24]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3351      	adds	r3, #81	; 0x51
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3351      	adds	r3, #81	; 0x51
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10a      	bne.n	800187a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	440b      	add	r3, r1
 8001872:	3342      	adds	r3, #66	; 0x42
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001878:	e0a1      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800187a:	78fa      	ldrb	r2, [r7, #3]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3342      	adds	r3, #66	; 0x42
 800188a:	2202      	movs	r2, #2
 800188c:	701a      	strb	r2, [r3, #0]
      break;
 800188e:	e096      	b.n	80019be <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001890:	78bb      	ldrb	r3, [r7, #2]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d120      	bne.n	80018d8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3351      	adds	r3, #81	; 0x51
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ac:	78fa      	ldrb	r2, [r7, #3]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	3342      	adds	r3, #66	; 0x42
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018c0:	e07e      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3342      	adds	r3, #66	; 0x42
 80018d2:	2202      	movs	r2, #2
 80018d4:	701a      	strb	r2, [r3, #0]
      break;
 80018d6:	e073      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3350      	adds	r3, #80	; 0x50
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10a      	bne.n	8001904 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
      break;
 8001902:	e05d      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001904:	78fa      	ldrb	r2, [r7, #3]
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
      break;
 8001918:	e052      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800191a:	78bb      	ldrb	r3, [r7, #2]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d120      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3351      	adds	r3, #81	; 0x51
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10a      	bne.n	800194c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800194a:	e039      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e02e      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3350      	adds	r3, #80	; 0x50
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10a      	bne.n	800198e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e018      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	3342      	adds	r3, #66	; 0x42
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
      break;
 80019a2:	e00d      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a4:	78fa      	ldrb	r2, [r7, #3]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	440b      	add	r3, r1
 80019b2:	3342      	adds	r3, #66	; 0x42
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
      break;
 80019b8:	e002      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80019be:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3344      	adds	r3, #68	; 0x44
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	8b39      	ldrh	r1, [r7, #24]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4403      	add	r3, r0
 80019e4:	3348      	adds	r3, #72	; 0x48
 80019e6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	335c      	adds	r3, #92	; 0x5c
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	334c      	adds	r3, #76	; 0x4c
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	3339      	adds	r3, #57	; 0x39
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	335d      	adds	r3, #93	; 0x5d
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	3338      	adds	r3, #56	; 0x38
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	18d1      	adds	r1, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	f004 ff98 	bl	8006988 <USB_HC_StartXfer>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop

08001a64 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fcb5 	bl	80063ea <USB_GetMode>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	f040 80ef 	bne.w	8001c66 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fc99 	bl	80063c4 <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80e5 	beq.w	8001c64 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fc90 	bl	80063c4 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aae:	d104      	bne.n	8001aba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ab8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fc80 	bl	80063c4 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ace:	d104      	bne.n	8001ada <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 fc70 	bl	80063c4 <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aee:	d104      	bne.n	8001afa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001af8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fc60 	bl	80063c4 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d103      	bne.n	8001b16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2202      	movs	r2, #2
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fc52 	bl	80063c4 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b2a:	d115      	bne.n	8001b58 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f007 fa0a 	bl	8008f60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 fd48 	bl	80065e8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f004 fc31 	bl	80063c4 <USB_ReadInterrupts>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d102      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f001 f966 	bl	8002e40 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 fc23 	bl	80063c4 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d106      	bne.n	8001b96 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f007 f9cd 	bl	8008f28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2208      	movs	r2, #8
 8001b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f004 fc12 	bl	80063c4 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001baa:	d138      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f005 f82f 	bl	8006c14 <USB_HC_ReadInterrupt>
 8001bb6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	e025      	b.n	8001c0a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d018      	beq.n	8001c04 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001be8:	d106      	bne.n	8001bf8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8cf 	bl	8001d94 <HCD_HC_IN_IRQHandler>
 8001bf6:	e005      	b.n	8001c04 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fcfd 	bl	80025fe <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d3d4      	bcc.n	8001bbe <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 fbce 	bl	80063c4 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d101      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x1d2>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_HCD_IRQHandler+0x1d4>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d014      	beq.n	8001c66 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0210 	bic.w	r2, r2, #16
 8001c4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f001 f84b 	bl	8002ce8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0210 	orr.w	r2, r2, #16
 8001c60:	619a      	str	r2, [r3, #24]
 8001c62:	e000      	b.n	8001c66 <HAL_HCD_IRQHandler+0x202>
      return;
 8001c64:	bf00      	nop
    }
  }
}
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_HCD_Start+0x16>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e013      	b.n	8001caa <HAL_HCD_Start+0x3e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f004 faa5 	bl	80061de <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f004 fd08 	bl	80066b0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_HCD_Stop+0x16>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e00d      	b.n	8001ce4 <HAL_HCD_Stop+0x32>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 f8e9 	bl	8006eac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 fcaf 	bl	800665c <USB_ResetPort>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	335c      	adds	r3, #92	; 0x5c
 8001d24:	781b      	ldrb	r3, [r3, #0]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	334c      	adds	r3, #76	; 0x4c
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 fcf1 	bl	8006750 <USB_GetCurrentFrame>
 8001d6e:	4603      	mov	r3, r0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fccc 	bl	8006722 <USB_GetHostSpeed>
 8001d8a:	4603      	mov	r3, r0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d119      	bne.n	8001df8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	0151      	lsls	r1, r2, #5
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	440a      	add	r2, r1
 8001dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	60d3      	str	r3, [r2, #12]
 8001df6:	e0ce      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	015a      	lsls	r2, r3, #5
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0e:	d12c      	bne.n	8001e6a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	015a      	lsls	r2, r3, #5
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4413      	add	r3, r2
 8001e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	335d      	adds	r3, #93	; 0x5d
 8001e34:	2207      	movs	r2, #7
 8001e36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	0151      	lsls	r1, r2, #5
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	440a      	add	r2, r1
 8001e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e52:	f043 0302 	orr.w	r3, r3, #2
 8001e56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 fee7 	bl	8006c36 <USB_HC_Halt>
 8001e68:	e095      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0320 	and.w	r3, r3, #32
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d109      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2320      	movs	r3, #32
 8001e90:	6093      	str	r3, [r2, #8]
 8001e92:	e080      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d134      	bne.n	8001f14 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	0151      	lsls	r1, r2, #5
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	440a      	add	r2, r1
 8001ec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	335d      	adds	r3, #93	; 0x5d
 8001eda:	2205      	movs	r2, #5
 8001edc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	461a      	mov	r2, r3
 8001eec:	2310      	movs	r3, #16
 8001eee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	2308      	movs	r3, #8
 8001f00:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fe92 	bl	8006c36 <USB_HC_Halt>
 8001f12:	e040      	b.n	8001f96 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d134      	bne.n	8001f96 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	0151      	lsls	r1, r2, #5
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	440a      	add	r2, r1
 8001f42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fe6d 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	461a      	mov	r2, r3
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	335d      	adds	r3, #93	; 0x5d
 8001f7e:	2208      	movs	r2, #8
 8001f80:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f94:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	015a      	lsls	r2, r3, #5
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d122      	bne.n	8001ff4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	0151      	lsls	r1, r2, #5
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	440a      	add	r2, r1
 8001fc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f004 fe2c 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ff2:	e300      	b.n	80025f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	f040 80fd 	bne.w	8002206 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3348      	adds	r3, #72	; 0x48
 8002024:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0159      	lsls	r1, r3, #5
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	440b      	add	r3, r1
 800202e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002038:	1ad1      	subs	r1, r2, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4403      	add	r3, r0
 8002048:	334c      	adds	r3, #76	; 0x4c
 800204a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	335d      	adds	r3, #93	; 0x5d
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	461a      	mov	r2, r3
 8002082:	2301      	movs	r3, #1
 8002084:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	333f      	adds	r3, #63	; 0x3f
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00a      	beq.n	80020b2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	333f      	adds	r3, #63	; 0x3f
 80020ac:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d121      	bne.n	80020f6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	0151      	lsls	r1, r2, #5
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	440a      	add	r2, r1
 80020c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 fdaa 	bl	8006c36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	461a      	mov	r2, r3
 80020f0:	2310      	movs	r3, #16
 80020f2:	6093      	str	r3, [r2, #8]
 80020f4:	e070      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	333f      	adds	r3, #63	; 0x3f
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d12a      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	0151      	lsls	r1, r2, #5
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	440a      	add	r2, r1
 8002122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800212a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	335c      	adds	r3, #92	; 0x5c
 800213c:	2201      	movs	r2, #1
 800213e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	b2d8      	uxtb	r0, r3
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	335c      	adds	r3, #92	; 0x5c
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	4601      	mov	r1, r0
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f006 ff0e 	bl	8008f7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002160:	e03a      	b.n	80021d8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	333f      	adds	r3, #63	; 0x3f
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d12f      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	335c      	adds	r3, #92	; 0x5c
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	440b      	add	r3, r1
 800219a:	3350      	adds	r3, #80	; 0x50
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f083 0301 	eor.w	r3, r3, #1
 80021a2:	b2d8      	uxtb	r0, r3
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3350      	adds	r3, #80	; 0x50
 80021b4:	4602      	mov	r2, r0
 80021b6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	4601      	mov	r1, r0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f006 fed2 	bl	8008f7c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3350      	adds	r3, #80	; 0x50
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2d8      	uxtb	r0, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	440b      	add	r3, r1
 80021fe:	3350      	adds	r3, #80	; 0x50
 8002200:	4602      	mov	r2, r0
 8002202:	701a      	strb	r2, [r3, #0]
}
 8002204:	e1f7      	b.n	80025f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	015a      	lsls	r2, r3, #5
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b02      	cmp	r3, #2
 800221a:	f040 811a 	bne.w	8002452 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4413      	add	r3, r2
 8002226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	0151      	lsls	r1, r2, #5
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	440a      	add	r2, r1
 8002234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002238:	f023 0302 	bic.w	r3, r3, #2
 800223c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	335d      	adds	r3, #93	; 0x5d
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10a      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e0d9      	b.n	800241e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	335d      	adds	r3, #93	; 0x5d
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d10a      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	335c      	adds	r3, #92	; 0x5c
 8002290:	2205      	movs	r2, #5
 8002292:	701a      	strb	r2, [r3, #0]
 8002294:	e0c3      	b.n	800241e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	335d      	adds	r3, #93	; 0x5d
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d00a      	beq.n	80022c2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	335d      	adds	r3, #93	; 0x5d
 80022bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022be:	2b08      	cmp	r3, #8
 80022c0:	d156      	bne.n	8002370 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3358      	adds	r3, #88	; 0x58
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1c59      	adds	r1, r3, #1
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4403      	add	r3, r0
 80022e4:	3358      	adds	r3, #88	; 0x58
 80022e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	3358      	adds	r3, #88	; 0x58
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d914      	bls.n	8002328 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	3358      	adds	r3, #88	; 0x58
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	335c      	adds	r3, #92	; 0x5c
 8002322:	2204      	movs	r2, #4
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	e009      	b.n	800233c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	335c      	adds	r3, #92	; 0x5c
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002352:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	015a      	lsls	r2, r3, #5
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4413      	add	r3, r2
 8002364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	e056      	b.n	800241e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	335d      	adds	r3, #93	; 0x5d
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d123      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2202      	movs	r2, #2
 8002398:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023b0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c6:	461a      	mov	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e027      	b.n	800241e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	335d      	adds	r3, #93	; 0x5d
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	d11c      	bne.n	800241e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3358      	adds	r3, #88	; 0x58
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4403      	add	r3, r0
 8002406:	3358      	adds	r3, #88	; 0x58
 8002408:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	440b      	add	r3, r1
 8002418:	335c      	adds	r3, #92	; 0x5c
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	015a      	lsls	r2, r3, #5
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4413      	add	r3, r2
 8002426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242a:	461a      	mov	r2, r3
 800242c:	2302      	movs	r3, #2
 800242e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	335c      	adds	r3, #92	; 0x5c
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	4601      	mov	r1, r0
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f006 fd96 	bl	8008f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002450:	e0d1      	b.n	80025f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d13e      	bne.n	80024e6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4413      	add	r3, r2
 8002470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	0151      	lsls	r1, r2, #5
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	440a      	add	r2, r1
 800247e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002482:	f043 0302 	orr.w	r3, r3, #2
 8002486:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	440b      	add	r3, r1
 8002496:	3358      	adds	r3, #88	; 0x58
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1c59      	adds	r1, r3, #1
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4403      	add	r3, r0
 80024aa:	3358      	adds	r3, #88	; 0x58
 80024ac:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	335d      	adds	r3, #93	; 0x5d
 80024be:	2206      	movs	r2, #6
 80024c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f004 fbb2 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	461a      	mov	r2, r3
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	6093      	str	r3, [r2, #8]
}
 80024e4:	e087      	b.n	80025f6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	015a      	lsls	r2, r3, #5
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d17c      	bne.n	80025f6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	333f      	adds	r3, #63	; 0x3f
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d122      	bne.n	8002558 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3358      	adds	r3, #88	; 0x58
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	0151      	lsls	r1, r2, #5
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	440a      	add	r2, r1
 800253c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fb70 	bl	8006c36 <USB_HC_Halt>
 8002556:	e045      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	333f      	adds	r3, #63	; 0x3f
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	333f      	adds	r3, #63	; 0x3f
 800257e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002580:	2b02      	cmp	r3, #2
 8002582:	d12f      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	3358      	adds	r3, #88	; 0x58
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d121      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	440b      	add	r3, r1
 80025ae:	335d      	adds	r3, #93	; 0x5d
 80025b0:	2203      	movs	r2, #3
 80025b2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fb29 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	2310      	movs	r3, #16
 80025f4:	6093      	str	r3, [r2, #8]
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	460b      	mov	r3, r1
 8002608:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b04      	cmp	r3, #4
 800262c:	d119      	bne.n	8002662 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2304      	movs	r3, #4
 800263e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	0151      	lsls	r1, r2, #5
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	440a      	add	r2, r1
 8002656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002660:	e33e      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b20      	cmp	r3, #32
 8002676:	d141      	bne.n	80026fc <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2320      	movs	r3, #32
 8002688:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	333d      	adds	r3, #61	; 0x3d
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	f040 831f 	bne.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	333d      	adds	r3, #61	; 0x3d
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	335c      	adds	r3, #92	; 0x5c
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	0151      	lsls	r1, r2, #5
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	440a      	add	r2, r1
 80026e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 fa9e 	bl	8006c36 <USB_HC_Halt>
}
 80026fa:	e2f1      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d13f      	bne.n	8002792 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	335d      	adds	r3, #93	; 0x5d
 8002722:	2204      	movs	r2, #4
 8002724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	333d      	adds	r3, #61	; 0x3d
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	3358      	adds	r3, #88	; 0x58
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	0151      	lsls	r1, r2, #5
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	440a      	add	r2, r1
 8002764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002768:	f043 0302 	orr.w	r3, r3, #2
 800276c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fa5c 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	461a      	mov	r2, r3
 800278c:	2340      	movs	r3, #64	; 0x40
 800278e:	6093      	str	r3, [r2, #8]
}
 8002790:	e2a6      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d122      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	0151      	lsls	r1, r2, #5
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	440a      	add	r2, r1
 80027c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 fa2e 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027ec:	6093      	str	r3, [r2, #8]
}
 80027ee:	e277      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d135      	bne.n	8002872 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3358      	adds	r3, #88	; 0x58
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	0151      	lsls	r1, r2, #5
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	440a      	add	r2, r1
 8002830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f004 f9f6 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2301      	movs	r3, #1
 800285a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	440b      	add	r3, r1
 800286a:	335d      	adds	r3, #93	; 0x5d
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
}
 8002870:	e236      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4413      	add	r3, r2
 800287a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b08      	cmp	r3, #8
 8002886:	d12b      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	0151      	lsls	r1, r2, #5
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	440a      	add	r2, r1
 80028b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 f9b6 	bl	8006c36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	440b      	add	r3, r1
 80028d8:	335d      	adds	r3, #93	; 0x5d
 80028da:	2205      	movs	r2, #5
 80028dc:	701a      	strb	r2, [r3, #0]
}
 80028de:	e1ff      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d155      	bne.n	80029a2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3358      	adds	r3, #88	; 0x58
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	335d      	adds	r3, #93	; 0x5d
 800291a:	2203      	movs	r2, #3
 800291c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	333d      	adds	r3, #61	; 0x3d
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d114      	bne.n	800295e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	333c      	adds	r3, #60	; 0x3c
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d109      	bne.n	800295e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	333d      	adds	r3, #61	; 0x3d
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	0151      	lsls	r1, r2, #5
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	440a      	add	r2, r1
 8002974:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f004 f954 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	2310      	movs	r3, #16
 800299e:	6093      	str	r3, [r2, #8]
}
 80029a0:	e19e      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d12b      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	0151      	lsls	r1, r2, #5
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	440a      	add	r2, r1
 80029ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f927 	bl	8006c36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	335d      	adds	r3, #93	; 0x5d
 80029f8:	2206      	movs	r2, #6
 80029fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	6093      	str	r3, [r2, #8]
}
 8002a0e:	e167      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d135      	bne.n	8002a94 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f004 f8ef 	bl	8006c36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2310      	movs	r3, #16
 8002a68:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	461a      	mov	r2, r3
 8002a78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	440b      	add	r3, r1
 8002a8c:	335d      	adds	r3, #93	; 0x5d
 8002a8e:	2208      	movs	r2, #8
 8002a90:	701a      	strb	r2, [r3, #0]
}
 8002a92:	e125      	b.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	f040 811a 	bne.w	8002ce0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	015a      	lsls	r2, r3, #5
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	0151      	lsls	r1, r2, #5
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	440a      	add	r2, r1
 8002ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ac6:	f023 0302 	bic.w	r3, r3, #2
 8002aca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	335d      	adds	r3, #93	; 0x5d
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d137      	bne.n	8002b52 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	335c      	adds	r3, #92	; 0x5c
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	333f      	adds	r3, #63	; 0x3f
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d00b      	beq.n	8002b24 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	f040 80c5 	bne.w	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3351      	adds	r3, #81	; 0x51
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2d8      	uxtb	r0, r3
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	440b      	add	r3, r1
 8002b4a:	3351      	adds	r3, #81	; 0x51
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e0ad      	b.n	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	335d      	adds	r3, #93	; 0x5d
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d10a      	bne.n	8002b7e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e097      	b.n	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	335d      	adds	r3, #93	; 0x5d
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d10a      	bne.n	8002baa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	335c      	adds	r3, #92	; 0x5c
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e081      	b.n	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	335d      	adds	r3, #93	; 0x5d
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10a      	bne.n	8002bd6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	335c      	adds	r3, #92	; 0x5c
 8002bd0:	2205      	movs	r2, #5
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e06b      	b.n	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	335d      	adds	r3, #93	; 0x5d
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d00a      	beq.n	8002c02 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	335d      	adds	r3, #93	; 0x5d
 8002bfc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d155      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	440b      	add	r3, r1
 8002c10:	3358      	adds	r3, #88	; 0x58
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4403      	add	r3, r0
 8002c24:	3358      	adds	r3, #88	; 0x58
 8002c26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3358      	adds	r3, #88	; 0x58
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d914      	bls.n	8002c68 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3358      	adds	r3, #88	; 0x58
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	440b      	add	r3, r1
 8002c60:	335c      	adds	r3, #92	; 0x5c
 8002c62:	2204      	movs	r2, #4
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e009      	b.n	8002c7c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c92:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c9a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	015a      	lsls	r2, r3, #5
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca8:	461a      	mov	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4601      	mov	r1, r0
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f006 f94e 	bl	8008f7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	0c5b      	lsrs	r3, r3, #17
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d003      	beq.n	8002d2c <HCD_RXQLVL_IRQHandler+0x44>
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	f000 8082 	beq.w	8002e2e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d2a:	e083      	b.n	8002e34 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d07f      	beq.n	8002e32 <HCD_RXQLVL_IRQHandler+0x14a>
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	3344      	adds	r3, #68	; 0x44
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d074      	beq.n	8002e32 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	3344      	adds	r3, #68	; 0x44
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	b292      	uxth	r2, r2
 8002d62:	4619      	mov	r1, r3
 8002d64:	f003 fb05 	bl	8006372 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	; 0x44
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	18d1      	adds	r1, r2, r3
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4403      	add	r3, r0
 8002d8c:	3344      	adds	r3, #68	; 0x44
 8002d8e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	334c      	adds	r3, #76	; 0x4c
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	18d1      	adds	r1, r2, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4403      	add	r3, r0
 8002db4:	334c      	adds	r3, #76	; 0x4c
 8002db6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HCD_RXQLVL_IRQHandler+0x154>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d031      	beq.n	8002e32 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002de4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	3350      	adds	r3, #80	; 0x50
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	f083 0301 	eor.w	r3, r3, #1
 8002e16:	b2d8      	uxtb	r0, r3
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3350      	adds	r3, #80	; 0x50
 8002e28:	4602      	mov	r2, r0
 8002e2a:	701a      	strb	r2, [r3, #0]
      break;
 8002e2c:	e001      	b.n	8002e32 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e32:	bf00      	nop
  }
}
 8002e34:	bf00      	nop
 8002e36:	3728      	adds	r7, #40	; 0x28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	1ff80000 	.word	0x1ff80000

08002e40 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e6c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d10b      	bne.n	8002e90 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f006 f85e 	bl	8008f44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d132      	bne.n	8002f00 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f043 0308 	orr.w	r3, r3, #8
 8002ea0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d126      	bne.n	8002efa <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d113      	bne.n	8002edc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ebe:	d106      	bne.n	8002ece <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2102      	movs	r1, #2
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fb8e 	bl	80065e8 <USB_InitFSLSPClkSel>
 8002ecc:	e011      	b.n	8002ef2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fb87 	bl	80065e8 <USB_InitFSLSPClkSel>
 8002eda:	e00a      	b.n	8002ef2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d106      	bne.n	8002ef2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eea:	461a      	mov	r2, r3
 8002eec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ef0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f006 f850 	bl	8008f98 <HAL_HCD_PortEnabled_Callback>
 8002ef8:	e002      	b.n	8002f00 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f006 f85a 	bl	8008fb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d103      	bne.n	8002f12 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f043 0320 	orr.w	r3, r3, #32
 8002f10:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6013      	str	r3, [r2, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e11f      	b.n	800317a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fd fd8e 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0201 	bic.w	r2, r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f002 ff10 	bl	8005db0 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4a7b      	ldr	r2, [pc, #492]	; (8003184 <HAL_I2C_Init+0x25c>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d807      	bhi.n	8002fac <HAL_I2C_Init+0x84>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a7a      	ldr	r2, [pc, #488]	; (8003188 <HAL_I2C_Init+0x260>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e006      	b.n	8002fba <HAL_I2C_Init+0x92>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	4a77      	ldr	r2, [pc, #476]	; (800318c <HAL_I2C_Init+0x264>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	bf94      	ite	ls
 8002fb4:	2301      	movls	r3, #1
 8002fb6:	2300      	movhi	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e0db      	b.n	800317a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_I2C_Init+0x268>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9b      	lsrs	r3, r3, #18
 8002fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a64      	ldr	r2, [pc, #400]	; (8003184 <HAL_I2C_Init+0x25c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d802      	bhi.n	8002ffc <HAL_I2C_Init+0xd4>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	e009      	b.n	8003010 <HAL_I2C_Init+0xe8>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	4a63      	ldr	r2, [pc, #396]	; (8003194 <HAL_I2C_Init+0x26c>)
 8003008:	fba2 2303 	umull	r2, r3, r2, r3
 800300c:	099b      	lsrs	r3, r3, #6
 800300e:	3301      	adds	r3, #1
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	430b      	orrs	r3, r1
 8003016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4956      	ldr	r1, [pc, #344]	; (8003184 <HAL_I2C_Init+0x25c>)
 800302c:	428b      	cmp	r3, r1
 800302e:	d80d      	bhi.n	800304c <HAL_I2C_Init+0x124>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1e59      	subs	r1, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fbb1 f3f3 	udiv	r3, r1, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003044:	2b04      	cmp	r3, #4
 8003046:	bf38      	it	cc
 8003048:	2304      	movcc	r3, #4
 800304a:	e04f      	b.n	80030ec <HAL_I2C_Init+0x1c4>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d111      	bne.n	8003078 <HAL_I2C_Init+0x150>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1e58      	subs	r0, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	fbb0 f3f3 	udiv	r3, r0, r3
 8003066:	3301      	adds	r3, #1
 8003068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf0c      	ite	eq
 8003070:	2301      	moveq	r3, #1
 8003072:	2300      	movne	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e012      	b.n	800309e <HAL_I2C_Init+0x176>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	1e58      	subs	r0, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	0099      	lsls	r1, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	fbb0 f3f3 	udiv	r3, r0, r3
 800308e:	3301      	adds	r3, #1
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	2b00      	cmp	r3, #0
 8003096:	bf0c      	ite	eq
 8003098:	2301      	moveq	r3, #1
 800309a:	2300      	movne	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Init+0x17e>
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_I2C_Init+0x1c4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <HAL_I2C_Init+0x1a4>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e58      	subs	r0, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	440b      	add	r3, r1
 80030bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c0:	3301      	adds	r3, #1
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Init+0x1c4>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1e58      	subs	r0, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	0099      	lsls	r1, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	6809      	ldr	r1, [r1, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800311a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6911      	ldr	r1, [r2, #16]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68d2      	ldr	r2, [r2, #12]
 8003126:	4311      	orrs	r1, r2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	430b      	orrs	r3, r1
 800312e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	000186a0 	.word	0x000186a0
 8003188:	001e847f 	.word	0x001e847f
 800318c:	003d08ff 	.word	0x003d08ff
 8003190:	431bde83 	.word	0x431bde83
 8003194:	10624dd3 	.word	0x10624dd3

08003198 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	4613      	mov	r3, r2
 80031a4:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d158      	bne.n	8003264 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_I2C_Slave_Receive_IT+0x26>
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e051      	b.n	8003266 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_I2C_Slave_Receive_IT+0x38>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e04a      	b.n	8003266 <HAL_I2C_Slave_Receive_IT+0xce>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d007      	beq.n	80031f6 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003204:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2222      	movs	r2, #34	; 0x22
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003246:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800325e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	ffff0000 	.word	0xffff0000

08003278 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b20      	cmp	r3, #32
 800328a:	d124      	bne.n	80032d6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2228      	movs	r2, #40	; 0x28
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d007      	beq.n	80032b2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032c0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032d0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	e000      	b.n	80032d8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032d6:	2302      	movs	r3, #2
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003304:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b10      	cmp	r3, #16
 8003312:	d003      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0x38>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	f040 80bd 	bne.w	8003496 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10d      	bne.n	8003352 <HAL_I2C_EV_IRQHandler+0x6e>
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800333c:	d003      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x62>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003344:	d101      	bne.n	800334a <HAL_I2C_EV_IRQHandler+0x66>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <HAL_I2C_EV_IRQHandler+0x68>
 800334a:	2300      	movs	r3, #0
 800334c:	2b01      	cmp	r3, #1
 800334e:	f000 812e 	beq.w	80035ae <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <HAL_I2C_EV_IRQHandler+0x92>
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	0a5b      	lsrs	r3, r3, #9
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f001 fc2b 	bl	8004bc4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fd38 	bl	8003de4 <I2C_Master_SB>
 8003374:	e08e      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08db      	lsrs	r3, r3, #3
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_I2C_EV_IRQHandler+0xb2>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	0a5b      	lsrs	r3, r3, #9
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fdae 	bl	8003ef0 <I2C_Master_ADD10>
 8003394:	e07e      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	085b      	lsrs	r3, r3, #1
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	0a5b      	lsrs	r3, r3, #9
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fdc8 	bl	8003f44 <I2C_Master_ADDR>
 80033b4:	e06e      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d037      	beq.n	8003432 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d0:	f000 80ef 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	09db      	lsrs	r3, r3, #7
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00f      	beq.n	8003400 <HAL_I2C_EV_IRQHandler+0x11c>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_I2C_EV_IRQHandler+0x11c>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f9c5 	bl	8003788 <I2C_MasterTransmit_TXE>
 80033fe:	e049      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80d2 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	0a5b      	lsrs	r3, r3, #9
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80cb 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b10      	cmp	r3, #16
 8003420:	d103      	bne.n	800342a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fa4c 	bl	80038c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003428:	e0c3      	b.n	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fab0 	bl	8003990 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003430:	e0bf      	b.n	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003440:	f000 80b7 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	099b      	lsrs	r3, r3, #6
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00f      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x18c>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d009      	beq.n	8003470 <HAL_I2C_EV_IRQHandler+0x18c>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d103      	bne.n	8003470 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fb20 	bl	8003aae <I2C_MasterReceive_RXNE>
 800346e:	e011      	b.n	8003494 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 809a 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 8093 	beq.w	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fbbf 	bl	8003c10 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003492:	e08e      	b.n	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003494:	e08d      	b.n	80035b2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d004      	beq.n	80034a8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e007      	b.n	80034b8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <HAL_I2C_EV_IRQHandler+0x206>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	0a5b      	lsrs	r3, r3, #9
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00c      	beq.n	80034ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 ff7d 	bl	80043e2 <I2C_Slave_ADDR>
 80034e8:	e066      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x226>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	0a5b      	lsrs	r3, r3, #9
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 ffb2 	bl	800446c <I2C_Slave_STOPF>
 8003508:	e056      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2b21      	cmp	r3, #33	; 0x21
 800350e:	d002      	beq.n	8003516 <HAL_I2C_EV_IRQHandler+0x232>
 8003510:	7bbb      	ldrb	r3, [r7, #14]
 8003512:	2b29      	cmp	r3, #41	; 0x29
 8003514:	d125      	bne.n	8003562 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	09db      	lsrs	r3, r3, #7
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00f      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x25e>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0a9b      	lsrs	r3, r3, #10
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x25e>
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fe93 	bl	8004266 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003540:	e039      	b.n	80035b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	089b      	lsrs	r3, r3, #2
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d033      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d02d      	beq.n	80035b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fec0 	bl	80042e0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003560:	e029      	b.n	80035b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00f      	beq.n	800358e <HAL_I2C_EV_IRQHandler+0x2aa>
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	0a9b      	lsrs	r3, r3, #10
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_I2C_EV_IRQHandler+0x2aa>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d103      	bne.n	800358e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fecb 	bl	8004322 <I2C_SlaveReceive_RXNE>
 800358c:	e014      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00e      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fef9 	bl	800439e <I2C_SlaveReceive_BTF>
 80035ac:	e004      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80035ae:	bf00      	nop
 80035b0:	e002      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035b2:	bf00      	nop
 80035b4:	e000      	b.n	80035b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	; 0x28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0x4e>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800360a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	0a5b      	lsrs	r3, r3, #9
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00e      	beq.n	8003636 <HAL_I2C_ER_IRQHandler+0x78>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	0a1b      	lsrs	r3, r3, #8
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	f043 0302 	orr.w	r3, r3, #2
 800362a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003634:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	0a9b      	lsrs	r3, r3, #10
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03f      	beq.n	80036c2 <HAL_I2C_ER_IRQHandler+0x104>
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d039      	beq.n	80036c2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800364e:	7efb      	ldrb	r3, [r7, #27]
 8003650:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003656:	b29b      	uxth	r3, r3
 8003658:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003660:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003668:	7ebb      	ldrb	r3, [r7, #26]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d112      	bne.n	8003694 <HAL_I2C_ER_IRQHandler+0xd6>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10f      	bne.n	8003694 <HAL_I2C_ER_IRQHandler+0xd6>
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	2b21      	cmp	r3, #33	; 0x21
 8003678:	d008      	beq.n	800368c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b29      	cmp	r3, #41	; 0x29
 800367e:	d005      	beq.n	800368c <HAL_I2C_ER_IRQHandler+0xce>
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	2b28      	cmp	r3, #40	; 0x28
 8003684:	d106      	bne.n	8003694 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b21      	cmp	r3, #33	; 0x21
 800368a:	d103      	bne.n	8003694 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f001 f81d 	bl	80046cc <I2C_Slave_AF>
 8003692:	e016      	b.n	80036c2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036a6:	7efb      	ldrb	r3, [r7, #27]
 80036a8:	2b10      	cmp	r3, #16
 80036aa:	d002      	beq.n	80036b2 <HAL_I2C_ER_IRQHandler+0xf4>
 80036ac:	7efb      	ldrb	r3, [r7, #27]
 80036ae:	2b40      	cmp	r3, #64	; 0x40
 80036b0:	d107      	bne.n	80036c2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	0adb      	lsrs	r3, r3, #11
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <HAL_I2C_ER_IRQHandler+0x12e>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80036ea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f001 f854 	bl	80047ac <I2C_ITError>
  }
}
 8003704:	bf00      	nop
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d150      	bne.n	8003850 <I2C_MasterTransmit_TXE+0xc8>
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b21      	cmp	r3, #33	; 0x21
 80037b2:	d14d      	bne.n	8003850 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d01d      	beq.n	80037f6 <I2C_MasterTransmit_TXE+0x6e>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d01a      	beq.n	80037f6 <I2C_MasterTransmit_TXE+0x6e>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037c6:	d016      	beq.n	80037f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2211      	movs	r2, #17
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7ff ff8c 	bl	800370c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037f4:	e060      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003804:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003814:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d107      	bne.n	8003840 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff7b 	bl	8003734 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383e:	e03b      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff ff5f 	bl	800370c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800384e:	e033      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b21      	cmp	r3, #33	; 0x21
 8003854:	d005      	beq.n	8003862 <I2C_MasterTransmit_TXE+0xda>
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d12d      	bne.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b22      	cmp	r3, #34	; 0x22
 8003860:	d12a      	bne.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d108      	bne.n	800387e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800387a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800387c:	e01c      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b40      	cmp	r3, #64	; 0x40
 8003888:	d103      	bne.n	8003892 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f880 	bl	8003990 <I2C_MemoryTransmit_TXE_BTF>
}
 8003890:	e012      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038b6:	e7ff      	b.n	80038b8 <I2C_MasterTransmit_TXE+0x130>
 80038b8:	bf00      	nop
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b21      	cmp	r3, #33	; 0x21
 80038d8:	d156      	bne.n	8003988 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d012      	beq.n	800390a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003908:	e03e      	b.n	8003988 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d01d      	beq.n	800394c <I2C_MasterTransmit_BTF+0x8c>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b20      	cmp	r3, #32
 8003914:	d01a      	beq.n	800394c <I2C_MasterTransmit_BTF+0x8c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800391c:	d016      	beq.n	800394c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800392c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2211      	movs	r2, #17
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fee1 	bl	800370c <HAL_I2C_MasterTxCpltCallback>
}
 800394a:	e01d      	b.n	8003988 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800395a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff fec2 	bl	800370c <HAL_I2C_MasterTxCpltCallback>
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11d      	bne.n	80039e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d10b      	bne.n	80039c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80039c6:	e06e      	b.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	121b      	asrs	r3, r3, #8
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039e2:	e060      	b.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10b      	bne.n	8003a04 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a02:	e050      	b.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d14c      	bne.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	2b22      	cmp	r3, #34	; 0x22
 8003a10:	d108      	bne.n	8003a24 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	e040      	b.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2b21      	cmp	r3, #33	; 0x21
 8003a32:	d112      	bne.n	8003a5a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a58:	e025      	b.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d120      	bne.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b21      	cmp	r3, #33	; 0x21
 8003a68:	d11d      	bne.n	8003aa6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a78:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a88:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fe47 	bl	8003734 <HAL_I2C_MemTxCpltCallback>
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b22      	cmp	r3, #34	; 0x22
 8003ac0:	f040 80a2 	bne.w	8003c08 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d921      	bls.n	8003b16 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	f040 8082 	bne.w	8003c08 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b12:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b14:	e078      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d074      	beq.n	8003c08 <I2C_MasterReceive_RXNE+0x15a>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <I2C_MasterReceive_RXNE+0x7c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d16e      	bne.n	8003c08 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f001 f818 	bl	8004b60 <I2C_WaitOnSTOPRequestThroughIT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d142      	bne.n	8003bbc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b54:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d10a      	bne.n	8003ba6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fdd2 	bl	8003748 <HAL_I2C_MemRxCpltCallback>
}
 8003ba4:	e030      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2212      	movs	r2, #18
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fdb3 	bl	8003720 <HAL_I2C_MasterRxCpltCallback>
}
 8003bba:	e025      	b.n	8003c08 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fc fcb7 	bl	8000576 <HAL_I2C_ErrorCallback>
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c36:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c5e:	e0bd      	b.n	8003ddc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d129      	bne.n	8003cbe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d00a      	beq.n	8003c96 <I2C_MasterReceive_BTF+0x86>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d007      	beq.n	8003c96 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cbc:	e08e      	b.n	8003ddc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d176      	bne.n	8003db6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d002      	beq.n	8003cd4 <I2C_MasterReceive_BTF+0xc4>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d108      	bne.n	8003ce6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e019      	b.n	8003d1a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d002      	beq.n	8003cf2 <I2C_MasterReceive_BTF+0xe2>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d108      	bne.n	8003d04 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	e00a      	b.n	8003d1a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d007      	beq.n	8003d1a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d18:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d74:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d10a      	bne.n	8003da0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff fcd5 	bl	8003748 <HAL_I2C_MemRxCpltCallback>
}
 8003d9e:	e01d      	b.n	8003ddc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2212      	movs	r2, #18
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fcb6 	bl	8003720 <HAL_I2C_MasterRxCpltCallback>
}
 8003db4:	e012      	b.n	8003ddc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d117      	bne.n	8003e28 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e10:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003e12:	e067      	b.n	8003ee4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	611a      	str	r2, [r3, #16]
}
 8003e26:	e05d      	b.n	8003ee4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e30:	d133      	bne.n	8003e9a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b21      	cmp	r3, #33	; 0x21
 8003e3c:	d109      	bne.n	8003e52 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e4e:	611a      	str	r2, [r3, #16]
 8003e50:	e008      	b.n	8003e64 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f043 0301 	orr.w	r3, r3, #1
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d004      	beq.n	8003e76 <I2C_Master_SB+0x92>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d108      	bne.n	8003e88 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d032      	beq.n	8003ee4 <I2C_Master_SB+0x100>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d02d      	beq.n	8003ee4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e96:	605a      	str	r2, [r3, #4]
}
 8003e98:	e024      	b.n	8003ee4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10e      	bne.n	8003ec0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	11db      	asrs	r3, r3, #7
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	f003 0306 	and.w	r3, r3, #6
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f063 030f 	orn	r3, r3, #15
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	611a      	str	r2, [r3, #16]
}
 8003ebe:	e011      	b.n	8003ee4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10d      	bne.n	8003ee4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	11db      	asrs	r3, r3, #7
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	f003 0306 	and.w	r3, r3, #6
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f063 030e 	orn	r3, r3, #14
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	611a      	str	r2, [r3, #16]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <I2C_Master_ADD10+0x24>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d011      	beq.n	8003f38 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d104      	bne.n	8003f28 <I2C_Master_ADD10+0x38>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d007      	beq.n	8003f38 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b091      	sub	sp, #68	; 0x44
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	f040 8169 	bne.w	8004242 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10f      	bne.n	8003f98 <I2C_Master_ADDR+0x54>
 8003f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f7c:	2b40      	cmp	r3, #64	; 0x40
 8003f7e:	d10b      	bne.n	8003f98 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	633b      	str	r3, [r7, #48]	; 0x30
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	e160      	b.n	800425a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <I2C_Master_ADDR+0x98>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003fa8:	d118      	bne.n	8003fdc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003faa:	2300      	movs	r3, #0
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	651a      	str	r2, [r3, #80]	; 0x50
 8003fda:	e13e      	b.n	800425a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d113      	bne.n	800400e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	e115      	b.n	800423a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	f040 808a 	bne.w	800412e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004020:	d137      	bne.n	8004092 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d113      	bne.n	800406a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004050:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004052:	2300      	movs	r3, #0
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	e0e7      	b.n	800423a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	623b      	str	r3, [r7, #32]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	623b      	str	r3, [r7, #32]
 800407e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e0d3      	b.n	800423a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004094:	2b08      	cmp	r3, #8
 8004096:	d02e      	beq.n	80040f6 <I2C_Master_ADDR+0x1b2>
 8004098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409a:	2b20      	cmp	r3, #32
 800409c:	d02b      	beq.n	80040f6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a0:	2b12      	cmp	r3, #18
 80040a2:	d102      	bne.n	80040aa <I2C_Master_ADDR+0x166>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d125      	bne.n	80040f6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d00e      	beq.n	80040ce <I2C_Master_ADDR+0x18a>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d00b      	beq.n	80040ce <I2C_Master_ADDR+0x18a>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d008      	beq.n	80040ce <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e007      	b.n	80040de <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	e0a1      	b.n	800423a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004104:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	61bb      	str	r3, [r7, #24]
 800411a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e085      	b.n	800423a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d14d      	bne.n	80041d4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b04      	cmp	r3, #4
 800413c:	d016      	beq.n	800416c <I2C_Master_ADDR+0x228>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	2b02      	cmp	r3, #2
 8004142:	d013      	beq.n	800416c <I2C_Master_ADDR+0x228>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	2b10      	cmp	r3, #16
 8004148:	d010      	beq.n	800416c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004158:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e007      	b.n	800417c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800417a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418a:	d117      	bne.n	80041bc <I2C_Master_ADDR+0x278>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004192:	d00b      	beq.n	80041ac <I2C_Master_ADDR+0x268>
 8004194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004196:	2b01      	cmp	r3, #1
 8004198:	d008      	beq.n	80041ac <I2C_Master_ADDR+0x268>
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	2b08      	cmp	r3, #8
 800419e:	d005      	beq.n	80041ac <I2C_Master_ADDR+0x268>
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d002      	beq.n	80041ac <I2C_Master_ADDR+0x268>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d107      	bne.n	80041bc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ba:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	e032      	b.n	800423a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041e2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f2:	d117      	bne.n	8004224 <I2C_Master_ADDR+0x2e0>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041fa:	d00b      	beq.n	8004214 <I2C_Master_ADDR+0x2d0>
 80041fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d008      	beq.n	8004214 <I2C_Master_ADDR+0x2d0>
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	2b08      	cmp	r3, #8
 8004206:	d005      	beq.n	8004214 <I2C_Master_ADDR+0x2d0>
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	2b10      	cmp	r3, #16
 800420c:	d002      	beq.n	8004214 <I2C_Master_ADDR+0x2d0>
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	2b20      	cmp	r3, #32
 8004212:	d107      	bne.n	8004224 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004222:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004240:	e00b      	b.n	800425a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	e7ff      	b.n	800425a <I2C_Master_ADDR+0x316>
 800425a:	bf00      	nop
 800425c:	3744      	adds	r7, #68	; 0x44
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d02b      	beq.n	80042d8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d114      	bne.n	80042d8 <I2C_SlaveTransmit_TXE+0x72>
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b29      	cmp	r3, #41	; 0x29
 80042b2:	d111      	bne.n	80042d8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2221      	movs	r2, #33	; 0x21
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2228      	movs	r2, #40	; 0x28
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fc f936 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d011      	beq.n	8004316 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d02c      	beq.n	8004396 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d114      	bne.n	8004396 <I2C_SlaveReceive_RXNE+0x74>
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	2b2a      	cmp	r3, #42	; 0x2a
 8004370:	d111      	bne.n	8004396 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004380:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2222      	movs	r2, #34	; 0x22
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2228      	movs	r2, #40	; 0x28
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7fc f8ad 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d012      	beq.n	80043d6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043ec:	2300      	movs	r3, #0
 80043ee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043fc:	2b28      	cmp	r3, #40	; 0x28
 80043fe:	d127      	bne.n	8004450 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800441c:	2301      	movs	r3, #1
 800441e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	09db      	lsrs	r3, r3, #7
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d103      	bne.n	8004434 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	81bb      	strh	r3, [r7, #12]
 8004432:	e002      	b.n	800443a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004442:	89ba      	ldrh	r2, [r7, #12]
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7fc f83d 	bl	80004c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800444e:	e008      	b.n	8004462 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800448a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c8:	d172      	bne.n	80045b0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b22      	cmp	r3, #34	; 0x22
 80044ce:	d002      	beq.n	80044d6 <I2C_Slave_STOPF+0x6a>
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b2a      	cmp	r3, #42	; 0x2a
 80044d4:	d135      	bne.n	8004542 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	b29a      	uxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0204 	orr.w	r2, r3, #4
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004508:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	4618      	mov	r0, r3
 8004510:	f7fc fe3b 	bl	800118a <HAL_DMA_GetState>
 8004514:	4603      	mov	r3, r0
 8004516:	2b01      	cmp	r3, #1
 8004518:	d049      	beq.n	80045ae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	4a69      	ldr	r2, [pc, #420]	; (80046c4 <I2C_Slave_STOPF+0x258>)
 8004520:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc fe0d 	bl	8001146 <HAL_DMA_Abort_IT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d03d      	beq.n	80045ae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004540:	e035      	b.n	80045ae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d005      	beq.n	8004566 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f043 0204 	orr.w	r2, r3, #4
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004574:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	4618      	mov	r0, r3
 800457c:	f7fc fe05 	bl	800118a <HAL_DMA_GetState>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d014      	beq.n	80045b0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458a:	4a4e      	ldr	r2, [pc, #312]	; (80046c4 <I2C_Slave_STOPF+0x258>)
 800458c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fc fdd7 	bl	8001146 <HAL_DMA_Abort_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045a8:	4610      	mov	r0, r2
 80045aa:	4798      	blx	r3
 80045ac:	e000      	b.n	80045b0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045ae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d03e      	beq.n	8004638 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d112      	bne.n	80045ee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d112      	bne.n	8004622 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	f043 0204 	orr.w	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8b3 	bl	80047ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004646:	e039      	b.n	80046bc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b2a      	cmp	r3, #42	; 0x2a
 800464c:	d109      	bne.n	8004662 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2228      	movs	r2, #40	; 0x28
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7fb ff47 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b28      	cmp	r3, #40	; 0x28
 800466c:	d111      	bne.n	8004692 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <I2C_Slave_STOPF+0x25c>)
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fb ff68 	bl	8000560 <HAL_I2C_ListenCpltCallback>
}
 8004690:	e014      	b.n	80046bc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	2b22      	cmp	r3, #34	; 0x22
 8004698:	d002      	beq.n	80046a0 <I2C_Slave_STOPF+0x234>
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b22      	cmp	r3, #34	; 0x22
 800469e:	d10d      	bne.n	80046bc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fb ff1a 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	08004a11 	.word	0x08004a11
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d002      	beq.n	80046ee <I2C_Slave_AF+0x22>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d129      	bne.n	8004742 <I2C_Slave_AF+0x76>
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b28      	cmp	r3, #40	; 0x28
 80046f2:	d126      	bne.n	8004742 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <I2C_Slave_AF+0xdc>)
 80046f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004708:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004712:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fb ff10 	bl	8000560 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004740:	e02e      	b.n	80047a0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	2b21      	cmp	r3, #33	; 0x21
 8004746:	d126      	bne.n	8004796 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a17      	ldr	r2, [pc, #92]	; (80047a8 <I2C_Slave_AF+0xdc>)
 800474c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2221      	movs	r2, #33	; 0x21
 8004752:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004772:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800477c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fb fed8 	bl	8000544 <HAL_I2C_SlaveTxCpltCallback>
}
 8004794:	e004      	b.n	80047a0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800479e:	615a      	str	r2, [r3, #20]
}
 80047a0:	bf00      	nop
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047c4:	7bbb      	ldrb	r3, [r7, #14]
 80047c6:	2b10      	cmp	r3, #16
 80047c8:	d002      	beq.n	80047d0 <I2C_ITError+0x24>
 80047ca:	7bbb      	ldrb	r3, [r7, #14]
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d10a      	bne.n	80047e6 <I2C_ITError+0x3a>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	d107      	bne.n	80047e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047ec:	2b28      	cmp	r3, #40	; 0x28
 80047ee:	d107      	bne.n	8004800 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2228      	movs	r2, #40	; 0x28
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047fe:	e015      	b.n	800482c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d00a      	beq.n	8004826 <I2C_ITError+0x7a>
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b60      	cmp	r3, #96	; 0x60
 8004814:	d007      	beq.n	8004826 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483a:	d162      	bne.n	8004902 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d020      	beq.n	800489c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	4a6a      	ldr	r2, [pc, #424]	; (8004a08 <I2C_ITError+0x25c>)
 8004860:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fc6d 	bl	8001146 <HAL_DMA_Abort_IT>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8089 	beq.w	8004986 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0201 	bic.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004896:	4610      	mov	r0, r2
 8004898:	4798      	blx	r3
 800489a:	e074      	b.n	8004986 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	4a59      	ldr	r2, [pc, #356]	; (8004a08 <I2C_ITError+0x25c>)
 80048a2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fc fc4c 	bl	8001146 <HAL_DMA_Abort_IT>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d10b      	bne.n	80048da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048fc:	4610      	mov	r0, r2
 80048fe:	4798      	blx	r3
 8004900:	e041      	b.n	8004986 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b60      	cmp	r3, #96	; 0x60
 800490c:	d125      	bne.n	800495a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10b      	bne.n	8004942 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fe ff02 	bl	800375c <HAL_I2C_AbortCpltCallback>
 8004958:	e015      	b.n	8004986 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d10b      	bne.n	8004980 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fb fdf8 	bl	8000576 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10e      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d109      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049c2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d113      	bne.n	8004a00 <I2C_ITError+0x254>
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b28      	cmp	r3, #40	; 0x28
 80049dc:	d110      	bne.n	8004a00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <I2C_ITError+0x260>)
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fb fdb0 	bl	8000560 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08004a11 	.word	0x08004a11
 8004a0c:	ffff0000 	.word	0xffff0000

08004a10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <I2C_DMAAbort+0x148>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	08db      	lsrs	r3, r3, #3
 8004a30:	4a4a      	ldr	r2, [pc, #296]	; (8004b5c <I2C_DMAAbort+0x14c>)
 8004a32:	fba2 2303 	umull	r2, r3, r2, r3
 8004a36:	0a1a      	lsrs	r2, r3, #8
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	00da      	lsls	r2, r3, #3
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a56:	e00a      	b.n	8004a6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6c:	d0ea      	beq.n	8004a44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b60      	cmp	r3, #96	; 0x60
 8004ade:	d10e      	bne.n	8004afe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f7fe fe30 	bl	800375c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004afc:	e027      	b.n	8004b4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b04:	2b28      	cmp	r3, #40	; 0x28
 8004b06:	d117      	bne.n	8004b38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2228      	movs	r2, #40	; 0x28
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b36:	e007      	b.n	8004b48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b48:	6978      	ldr	r0, [r7, #20]
 8004b4a:	f7fb fd14 	bl	8000576 <HAL_I2C_ErrorCallback>
}
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20000000 	.word	0x20000000
 8004b5c:	14f8b589 	.word	0x14f8b589

08004b60 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	08db      	lsrs	r3, r3, #3
 8004b72:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	0a1a      	lsrs	r2, r3, #8
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d107      	bne.n	8004b9e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e008      	b.n	8004bb0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d0e9      	beq.n	8004b82 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	14f8b589 	.word	0x14f8b589

08004bc4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bd4:	d103      	bne.n	8004bde <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bdc:	e007      	b.n	8004bee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004be6:	d102      	bne.n	8004bee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2208      	movs	r2, #8
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e128      	b.n	8004e60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a90      	ldr	r2, [pc, #576]	; (8004e68 <HAL_I2S_Init+0x26c>)
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fb ff79 	bl	8000b20 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d060      	beq.n	8004d1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c62:	2310      	movs	r3, #16
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	e001      	b.n	8004c6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d802      	bhi.n	8004c7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f001 f98e 	bl	8005f9c <HAL_RCCEx_GetPeriphCLKFreq>
 8004c80:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c8a:	d125      	bne.n	8004cd8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	3305      	adds	r3, #5
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e01f      	b.n	8004cf6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	3305      	adds	r3, #5
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e00e      	b.n	8004cf6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	3305      	adds	r3, #5
 8004cf4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4a5c      	ldr	r2, [pc, #368]	; (8004e6c <HAL_I2S_Init+0x270>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	08db      	lsrs	r3, r3, #3
 8004d00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	085b      	lsrs	r3, r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	e003      	b.n	8004d24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d902      	bls.n	8004d30 <HAL_I2S_Init+0x134>
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2bff      	cmp	r3, #255	; 0xff
 8004d2e:	d907      	bls.n	8004d40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	f043 0210 	orr.w	r2, r3, #16
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e08f      	b.n	8004e60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	ea42 0103 	orr.w	r1, r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d5e:	f023 030f 	bic.w	r3, r3, #15
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6851      	ldr	r1, [r2, #4]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6892      	ldr	r2, [r2, #8]
 8004d6a:	4311      	orrs	r1, r2
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	68d2      	ldr	r2, [r2, #12]
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6992      	ldr	r2, [r2, #24]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d161      	bne.n	8004e50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a38      	ldr	r2, [pc, #224]	; (8004e70 <HAL_I2S_Init+0x274>)
 8004d90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a37      	ldr	r2, [pc, #220]	; (8004e74 <HAL_I2S_Init+0x278>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2S_Init+0x1a4>
 8004d9c:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <HAL_I2S_Init+0x27c>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2S_Init+0x1a8>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4932      	ldr	r1, [pc, #200]	; (8004e74 <HAL_I2S_Init+0x278>)
 8004dac:	428a      	cmp	r2, r1
 8004dae:	d101      	bne.n	8004db4 <HAL_I2S_Init+0x1b8>
 8004db0:	4a31      	ldr	r2, [pc, #196]	; (8004e78 <HAL_I2S_Init+0x27c>)
 8004db2:	e001      	b.n	8004db8 <HAL_I2S_Init+0x1bc>
 8004db4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004db8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dbc:	f023 030f 	bic.w	r3, r3, #15
 8004dc0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	; (8004e74 <HAL_I2S_Init+0x278>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_I2S_Init+0x1d4>
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <HAL_I2S_Init+0x27c>)
 8004dce:	e001      	b.n	8004dd4 <HAL_I2S_Init+0x1d8>
 8004dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a25      	ldr	r2, [pc, #148]	; (8004e74 <HAL_I2S_Init+0x278>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d101      	bne.n	8004de6 <HAL_I2S_Init+0x1ea>
 8004de2:	4b25      	ldr	r3, [pc, #148]	; (8004e78 <HAL_I2S_Init+0x27c>)
 8004de4:	e001      	b.n	8004dea <HAL_I2S_Init+0x1ee>
 8004de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df6:	d003      	beq.n	8004e00 <HAL_I2S_Init+0x204>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	e001      	b.n	8004e0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	b299      	uxth	r1, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e22:	4303      	orrs	r3, r0
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	430b      	orrs	r3, r1
 8004e28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	897b      	ldrh	r3, [r7, #10]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <HAL_I2S_Init+0x278>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_I2S_Init+0x24c>
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <HAL_I2S_Init+0x27c>)
 8004e46:	e001      	b.n	8004e4c <HAL_I2S_Init+0x250>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e4c:	897a      	ldrh	r2, [r7, #10]
 8004e4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	08004f73 	.word	0x08004f73
 8004e6c:	cccccccd 	.word	0xcccccccd
 8004e70:	08005089 	.word	0x08005089
 8004e74:	40003800 	.word	0x40003800
 8004e78:	40003400 	.word	0x40003400

08004e7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	881a      	ldrh	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10e      	bne.n	8004f0c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004efc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff ffb8 	bl	8004e7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	b292      	uxth	r2, r2
 8004f28:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10e      	bne.n	8004f6a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f5a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff93 	bl	8004e90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d13a      	bne.n	8005004 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d109      	bne.n	8004fac <I2S_IRQHandler+0x3a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d102      	bne.n	8004fac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff ffb4 	bl	8004f14 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b40      	cmp	r3, #64	; 0x40
 8004fb4:	d126      	bne.n	8005004 <I2S_IRQHandler+0x92>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0320 	and.w	r3, r3, #32
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d11f      	bne.n	8005004 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f043 0202 	orr.w	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ff50 	bl	8004ea4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d136      	bne.n	800507e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	d109      	bne.n	800502e <I2S_IRQHandler+0xbc>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b80      	cmp	r3, #128	; 0x80
 8005026:	d102      	bne.n	800502e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff45 	bl	8004eb8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b08      	cmp	r3, #8
 8005036:	d122      	bne.n	800507e <I2S_IRQHandler+0x10c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b20      	cmp	r3, #32
 8005044:	d11b      	bne.n	800507e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005054:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff ff13 	bl	8004ea4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800507e:	bf00      	nop
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4aa2      	ldr	r2, [pc, #648]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80050a2:	4ba2      	ldr	r3, [pc, #648]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050a4:	e001      	b.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80050a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a9b      	ldr	r2, [pc, #620]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80050c0:	4b9a      	ldr	r3, [pc, #616]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050c2:	e001      	b.n	80050c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80050c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050d4:	d004      	beq.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 8099 	bne.w	8005212 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d107      	bne.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f925 	bl	8005344 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d107      	bne.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9c8 	bl	80054a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d13a      	bne.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b00      	cmp	r3, #0
 8005126:	d035      	beq.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a7e      	ldr	r2, [pc, #504]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005132:	4b7e      	ldr	r3, [pc, #504]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005134:	e001      	b.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4979      	ldr	r1, [pc, #484]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005142:	428b      	cmp	r3, r1
 8005144:	d101      	bne.n	800514a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005146:	4b79      	ldr	r3, [pc, #484]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005148:	e001      	b.n	800514e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800514a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005152:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005162:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f043 0202 	orr.w	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fe88 	bl	8004ea4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b08      	cmp	r3, #8
 800519c:	f040 80be 	bne.w	800531c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80b8 	beq.w	800531c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a59      	ldr	r2, [pc, #356]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80051c6:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051c8:	e001      	b.n	80051ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4954      	ldr	r1, [pc, #336]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051d6:	428b      	cmp	r3, r1
 80051d8:	d101      	bne.n	80051de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80051da:	4b54      	ldr	r3, [pc, #336]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051dc:	e001      	b.n	80051e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80051de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051e8:	2300      	movs	r3, #0
 80051ea:	60bb      	str	r3, [r7, #8]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff fe4a 	bl	8004ea4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005210:	e084      	b.n	800531c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d107      	bne.n	800522c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8be 	bl	80053a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f8fd 	bl	8005440 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d12f      	bne.n	80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02a      	beq.n	80052b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005268:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2e      	ldr	r2, [pc, #184]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005274:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005276:	e001      	b.n	800527c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4929      	ldr	r1, [pc, #164]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d101      	bne.n	800528c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005288:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800528a:	e001      	b.n	8005290 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800528c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005294:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f043 0202 	orr.w	r2, r3, #2
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fdfa 	bl	8004ea4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d131      	bne.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02c      	beq.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a17      	ldr	r2, [pc, #92]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d101      	bne.n	80052d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80052ce:	4b17      	ldr	r3, [pc, #92]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052d0:	e001      	b.n	80052d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80052d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4912      	ldr	r1, [pc, #72]	; (8005328 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052de:	428b      	cmp	r3, r1
 80052e0:	d101      	bne.n	80052e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052e4:	e001      	b.n	80052ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80052e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f043 0204 	orr.w	r2, r3, #4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff fdc5 	bl	8004ea4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800531a:	e000      	b.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800531c:	bf00      	nop
}
 800531e:	bf00      	nop
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40003800 	.word	0x40003800
 800532c:	40003400 	.word	0x40003400

08005330 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c99      	adds	r1, r3, #2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6251      	str	r1, [r2, #36]	; 0x24
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d113      	bne.n	800539e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005384:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff ffc9 	bl	8005330 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
	...

080053a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c99      	adds	r1, r3, #2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6251      	str	r1, [r2, #36]	; 0x24
 80053ba:	8819      	ldrh	r1, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1d      	ldr	r2, [pc, #116]	; (8005438 <I2SEx_TxISR_I2SExt+0x90>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <I2SEx_TxISR_I2SExt+0x22>
 80053c6:	4b1d      	ldr	r3, [pc, #116]	; (800543c <I2SEx_TxISR_I2SExt+0x94>)
 80053c8:	e001      	b.n	80053ce <I2SEx_TxISR_I2SExt+0x26>
 80053ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ce:	460a      	mov	r2, r1
 80053d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d121      	bne.n	800542e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a12      	ldr	r2, [pc, #72]	; (8005438 <I2SEx_TxISR_I2SExt+0x90>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <I2SEx_TxISR_I2SExt+0x50>
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <I2SEx_TxISR_I2SExt+0x94>)
 80053f6:	e001      	b.n	80053fc <I2SEx_TxISR_I2SExt+0x54>
 80053f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	490d      	ldr	r1, [pc, #52]	; (8005438 <I2SEx_TxISR_I2SExt+0x90>)
 8005404:	428b      	cmp	r3, r1
 8005406:	d101      	bne.n	800540c <I2SEx_TxISR_I2SExt+0x64>
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <I2SEx_TxISR_I2SExt+0x94>)
 800540a:	e001      	b.n	8005410 <I2SEx_TxISR_I2SExt+0x68>
 800540c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005414:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff81 	bl	8005330 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40003800 	.word	0x40003800
 800543c:	40003400 	.word	0x40003400

08005440 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68d8      	ldr	r0, [r3, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	1c99      	adds	r1, r3, #2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005458:	b282      	uxth	r2, r0
 800545a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d113      	bne.n	800549c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005482:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff4a 	bl	8005330 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a20      	ldr	r2, [pc, #128]	; (8005534 <I2SEx_RxISR_I2SExt+0x90>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <I2SEx_RxISR_I2SExt+0x16>
 80054b6:	4b20      	ldr	r3, [pc, #128]	; (8005538 <I2SEx_RxISR_I2SExt+0x94>)
 80054b8:	e001      	b.n	80054be <I2SEx_RxISR_I2SExt+0x1a>
 80054ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054be:	68d8      	ldr	r0, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	1c99      	adds	r1, r3, #2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054ca:	b282      	uxth	r2, r0
 80054cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d121      	bne.n	800552a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <I2SEx_RxISR_I2SExt+0x90>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d101      	bne.n	80054f4 <I2SEx_RxISR_I2SExt+0x50>
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <I2SEx_RxISR_I2SExt+0x94>)
 80054f2:	e001      	b.n	80054f8 <I2SEx_RxISR_I2SExt+0x54>
 80054f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	490d      	ldr	r1, [pc, #52]	; (8005534 <I2SEx_RxISR_I2SExt+0x90>)
 8005500:	428b      	cmp	r3, r1
 8005502:	d101      	bne.n	8005508 <I2SEx_RxISR_I2SExt+0x64>
 8005504:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <I2SEx_RxISR_I2SExt+0x94>)
 8005506:	e001      	b.n	800550c <I2SEx_RxISR_I2SExt+0x68>
 8005508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005510:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff03 	bl	8005330 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	40003800 	.word	0x40003800
 8005538:	40003400 	.word	0x40003400

0800553c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e25b      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d075      	beq.n	8005646 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555a:	4ba3      	ldr	r3, [pc, #652]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
 8005562:	2b04      	cmp	r3, #4
 8005564:	d00c      	beq.n	8005580 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4ba0      	ldr	r3, [pc, #640]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800556e:	2b08      	cmp	r3, #8
 8005570:	d112      	bne.n	8005598 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005572:	4b9d      	ldr	r3, [pc, #628]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800557a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557e:	d10b      	bne.n	8005598 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005580:	4b99      	ldr	r3, [pc, #612]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05b      	beq.n	8005644 <HAL_RCC_OscConfig+0x108>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d157      	bne.n	8005644 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e236      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x74>
 80055a2:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a90      	ldr	r2, [pc, #576]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	e01d      	b.n	80055ec <HAL_RCC_OscConfig+0xb0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x98>
 80055ba:	4b8b      	ldr	r3, [pc, #556]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a8a      	ldr	r2, [pc, #552]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	4b88      	ldr	r3, [pc, #544]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a87      	ldr	r2, [pc, #540]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e00b      	b.n	80055ec <HAL_RCC_OscConfig+0xb0>
 80055d4:	4b84      	ldr	r3, [pc, #528]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a83      	ldr	r2, [pc, #524]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	4b81      	ldr	r3, [pc, #516]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a80      	ldr	r2, [pc, #512]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d013      	beq.n	800561c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f4:	f7fb fc68 	bl	8000ec8 <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055fc:	f7fb fc64 	bl	8000ec8 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b64      	cmp	r3, #100	; 0x64
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e1fb      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560e:	4b76      	ldr	r3, [pc, #472]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0f0      	beq.n	80055fc <HAL_RCC_OscConfig+0xc0>
 800561a:	e014      	b.n	8005646 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fb fc54 	bl	8000ec8 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005624:	f7fb fc50 	bl	8000ec8 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e1e7      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005636:	4b6c      	ldr	r3, [pc, #432]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0xe8>
 8005642:	e000      	b.n	8005646 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d063      	beq.n	800571a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005652:	4b65      	ldr	r3, [pc, #404]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b62      	ldr	r3, [pc, #392]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005666:	2b08      	cmp	r3, #8
 8005668:	d11c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566a:	4b5f      	ldr	r3, [pc, #380]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d116      	bne.n	80056a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_RCC_OscConfig+0x152>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d001      	beq.n	800568e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e1bb      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568e:	4b56      	ldr	r3, [pc, #344]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4952      	ldr	r1, [pc, #328]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056a2:	e03a      	b.n	800571a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d020      	beq.n	80056ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ac:	4b4f      	ldr	r3, [pc, #316]	; (80057ec <HAL_RCC_OscConfig+0x2b0>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fb fc09 	bl	8000ec8 <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ba:	f7fb fc05 	bl	8000ec8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e19c      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056cc:	4b46      	ldr	r3, [pc, #280]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d8:	4b43      	ldr	r3, [pc, #268]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4940      	ldr	r1, [pc, #256]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	e015      	b.n	800571a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ee:	4b3f      	ldr	r3, [pc, #252]	; (80057ec <HAL_RCC_OscConfig+0x2b0>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fb fbe8 	bl	8000ec8 <HAL_GetTick>
 80056f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fb fbe4 	bl	8000ec8 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e17b      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570e:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d030      	beq.n	8005788 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572e:	4b30      	ldr	r3, [pc, #192]	; (80057f0 <HAL_RCC_OscConfig+0x2b4>)
 8005730:	2201      	movs	r2, #1
 8005732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fb fbc8 	bl	8000ec8 <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573c:	f7fb fbc4 	bl	8000ec8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e15b      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 8005750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005752:	f003 0302 	and.w	r3, r3, #2
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x200>
 800575a:	e015      	b.n	8005788 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800575c:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <HAL_RCC_OscConfig+0x2b4>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005762:	f7fb fbb1 	bl	8000ec8 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800576a:	f7fb fbad 	bl	8000ec8 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e144      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 80a0 	beq.w	80058d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80057b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
 80057b6:	4b0c      	ldr	r3, [pc, #48]	; (80057e8 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c2:	2301      	movs	r3, #1
 80057c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c6:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x2b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d121      	bne.n	8005816 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <HAL_RCC_OscConfig+0x2b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_RCC_OscConfig+0x2b8>)
 80057d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057de:	f7fb fb73 	bl	8000ec8 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e4:	e011      	b.n	800580a <HAL_RCC_OscConfig+0x2ce>
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800
 80057ec:	42470000 	.word	0x42470000
 80057f0:	42470e80 	.word	0x42470e80
 80057f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f8:	f7fb fb66 	bl	8000ec8 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e0fd      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800580a:	4b81      	ldr	r3, [pc, #516]	; (8005a10 <HAL_RCC_OscConfig+0x4d4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d106      	bne.n	800582c <HAL_RCC_OscConfig+0x2f0>
 800581e:	4b7d      	ldr	r3, [pc, #500]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005822:	4a7c      	ldr	r2, [pc, #496]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	6713      	str	r3, [r2, #112]	; 0x70
 800582a:	e01c      	b.n	8005866 <HAL_RCC_OscConfig+0x32a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b05      	cmp	r3, #5
 8005832:	d10c      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
 8005834:	4b77      	ldr	r3, [pc, #476]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a76      	ldr	r2, [pc, #472]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 800583a:	f043 0304 	orr.w	r3, r3, #4
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	4b74      	ldr	r3, [pc, #464]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a73      	ldr	r2, [pc, #460]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	e00b      	b.n	8005866 <HAL_RCC_OscConfig+0x32a>
 800584e:	4b71      	ldr	r3, [pc, #452]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a70      	ldr	r2, [pc, #448]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005854:	f023 0301 	bic.w	r3, r3, #1
 8005858:	6713      	str	r3, [r2, #112]	; 0x70
 800585a:	4b6e      	ldr	r3, [pc, #440]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	4a6d      	ldr	r2, [pc, #436]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005860:	f023 0304 	bic.w	r3, r3, #4
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d015      	beq.n	800589a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586e:	f7fb fb2b 	bl	8000ec8 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005874:	e00a      	b.n	800588c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fb fb27 	bl	8000ec8 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e0bc      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800588c:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ee      	beq.n	8005876 <HAL_RCC_OscConfig+0x33a>
 8005898:	e014      	b.n	80058c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589a:	f7fb fb15 	bl	8000ec8 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a0:	e00a      	b.n	80058b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058a2:	f7fb fb11 	bl	8000ec8 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e0a6      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b8:	4b56      	ldr	r3, [pc, #344]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1ee      	bne.n	80058a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d105      	bne.n	80058d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ca:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a51      	ldr	r2, [pc, #324]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 80058d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8092 	beq.w	8005a04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e0:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 030c 	and.w	r3, r3, #12
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d05c      	beq.n	80059a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d141      	bne.n	8005978 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f4:	4b48      	ldr	r3, [pc, #288]	; (8005a18 <HAL_RCC_OscConfig+0x4dc>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fb fae5 	bl	8000ec8 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005902:	f7fb fae1 	bl	8000ec8 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e078      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005914:	4b3f      	ldr	r3, [pc, #252]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f0      	bne.n	8005902 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	019b      	lsls	r3, r3, #6
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005936:	085b      	lsrs	r3, r3, #1
 8005938:	3b01      	subs	r3, #1
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	061b      	lsls	r3, r3, #24
 8005944:	4933      	ldr	r1, [pc, #204]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800594a:	4b33      	ldr	r3, [pc, #204]	; (8005a18 <HAL_RCC_OscConfig+0x4dc>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005950:	f7fb faba 	bl	8000ec8 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005958:	f7fb fab6 	bl	8000ec8 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e04d      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596a:	4b2a      	ldr	r3, [pc, #168]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x41c>
 8005976:	e045      	b.n	8005a04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <HAL_RCC_OscConfig+0x4dc>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597e:	f7fb faa3 	bl	8000ec8 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005986:	f7fb fa9f 	bl	8000ec8 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e036      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005998:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f0      	bne.n	8005986 <HAL_RCC_OscConfig+0x44a>
 80059a4:	e02e      	b.n	8005a04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e029      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <HAL_RCC_OscConfig+0x4d8>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d11c      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d115      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059da:	4013      	ands	r3, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10d      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d106      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e000      	b.n	8005a06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40007000 	.word	0x40007000
 8005a14:	40023800 	.word	0x40023800
 8005a18:	42470060 	.word	0x42470060

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0cc      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a30:	4b68      	ldr	r3, [pc, #416]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d90c      	bls.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3e:	4b65      	ldr	r3, [pc, #404]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d001      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0b8      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4a58      	ldr	r2, [pc, #352]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	4a52      	ldr	r2, [pc, #328]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	494d      	ldr	r1, [pc, #308]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d044      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d119      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d003      	beq.n	8005ada <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d107      	bne.n	8005aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e06f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aea:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d101      	bne.n	8005afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e067      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005afa:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 0203 	bic.w	r2, r3, #3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	4934      	ldr	r1, [pc, #208]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b0c:	f7fb f9dc 	bl	8000ec8 <HAL_GetTick>
 8005b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b12:	e00a      	b.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b14:	f7fb f9d8 	bl	8000ec8 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e04f      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2a:	4b2b      	ldr	r3, [pc, #172]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 020c 	and.w	r2, r3, #12
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d1eb      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d20c      	bcs.n	8005b64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b22      	ldr	r3, [pc, #136]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b20      	ldr	r3, [pc, #128]	; (8005bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d001      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e032      	b.n	8005bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4916      	ldr	r1, [pc, #88]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d009      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	490e      	ldr	r1, [pc, #56]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ba2:	f000 f821 	bl	8005be8 <HAL_RCC_GetSysClockFreq>
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	; (8005bdc <HAL_RCC_ClockConfig+0x1c0>)
 8005bb4:	5cd3      	ldrb	r3, [r2, r3]
 8005bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8005bba:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <HAL_RCC_ClockConfig+0x1c4>)
 8005bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_ClockConfig+0x1c8>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fb f93c 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40023c00 	.word	0x40023c00
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	080095cc 	.word	0x080095cc
 8005be0:	20000000 	.word	0x20000000
 8005be4:	20000004 	.word	0x20000004

08005be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bfe:	4b63      	ldr	r3, [pc, #396]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d007      	beq.n	8005c1a <HAL_RCC_GetSysClockFreq+0x32>
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d008      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x38>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 80b4 	bne.w	8005d7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b5e      	ldr	r3, [pc, #376]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c16:	60bb      	str	r3, [r7, #8]
       break;
 8005c18:	e0b3      	b.n	8005d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c1a:	4b5e      	ldr	r3, [pc, #376]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005c1c:	60bb      	str	r3, [r7, #8]
      break;
 8005c1e:	e0b0      	b.n	8005d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c20:	4b5a      	ldr	r3, [pc, #360]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c2a:	4b58      	ldr	r3, [pc, #352]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d04a      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c36:	4b55      	ldr	r3, [pc, #340]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	099b      	lsrs	r3, r3, #6
 8005c3c:	f04f 0400 	mov.w	r4, #0
 8005c40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	ea03 0501 	and.w	r5, r3, r1
 8005c4c:	ea04 0602 	and.w	r6, r4, r2
 8005c50:	4629      	mov	r1, r5
 8005c52:	4632      	mov	r2, r6
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	0154      	lsls	r4, r2, #5
 8005c5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c62:	014b      	lsls	r3, r1, #5
 8005c64:	4619      	mov	r1, r3
 8005c66:	4622      	mov	r2, r4
 8005c68:	1b49      	subs	r1, r1, r5
 8005c6a:	eb62 0206 	sbc.w	r2, r2, r6
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	f04f 0400 	mov.w	r4, #0
 8005c76:	0194      	lsls	r4, r2, #6
 8005c78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c7c:	018b      	lsls	r3, r1, #6
 8005c7e:	1a5b      	subs	r3, r3, r1
 8005c80:	eb64 0402 	sbc.w	r4, r4, r2
 8005c84:	f04f 0100 	mov.w	r1, #0
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	00e2      	lsls	r2, r4, #3
 8005c8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c92:	00d9      	lsls	r1, r3, #3
 8005c94:	460b      	mov	r3, r1
 8005c96:	4614      	mov	r4, r2
 8005c98:	195b      	adds	r3, r3, r5
 8005c9a:	eb44 0406 	adc.w	r4, r4, r6
 8005c9e:	f04f 0100 	mov.w	r1, #0
 8005ca2:	f04f 0200 	mov.w	r2, #0
 8005ca6:	0262      	lsls	r2, r4, #9
 8005ca8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005cac:	0259      	lsls	r1, r3, #9
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f04f 0400 	mov.w	r4, #0
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	f7fa fa82 	bl	80001c8 <__aeabi_uldivmod>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	60fb      	str	r3, [r7, #12]
 8005cca:	e049      	b.n	8005d60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	099b      	lsrs	r3, r3, #6
 8005cd2:	f04f 0400 	mov.w	r4, #0
 8005cd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	ea03 0501 	and.w	r5, r3, r1
 8005ce2:	ea04 0602 	and.w	r6, r4, r2
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	4632      	mov	r2, r6
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	f04f 0400 	mov.w	r4, #0
 8005cf2:	0154      	lsls	r4, r2, #5
 8005cf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cf8:	014b      	lsls	r3, r1, #5
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	1b49      	subs	r1, r1, r5
 8005d00:	eb62 0206 	sbc.w	r2, r2, r6
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	f04f 0400 	mov.w	r4, #0
 8005d0c:	0194      	lsls	r4, r2, #6
 8005d0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d12:	018b      	lsls	r3, r1, #6
 8005d14:	1a5b      	subs	r3, r3, r1
 8005d16:	eb64 0402 	sbc.w	r4, r4, r2
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	00e2      	lsls	r2, r4, #3
 8005d24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d28:	00d9      	lsls	r1, r3, #3
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4614      	mov	r4, r2
 8005d2e:	195b      	adds	r3, r3, r5
 8005d30:	eb44 0406 	adc.w	r4, r4, r6
 8005d34:	f04f 0100 	mov.w	r1, #0
 8005d38:	f04f 0200 	mov.w	r2, #0
 8005d3c:	02a2      	lsls	r2, r4, #10
 8005d3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d42:	0299      	lsls	r1, r3, #10
 8005d44:	460b      	mov	r3, r1
 8005d46:	4614      	mov	r4, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f04f 0400 	mov.w	r4, #0
 8005d52:	461a      	mov	r2, r3
 8005d54:	4623      	mov	r3, r4
 8005d56:	f7fa fa37 	bl	80001c8 <__aeabi_uldivmod>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d60:	4b0a      	ldr	r3, [pc, #40]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	0c1b      	lsrs	r3, r3, #16
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	60bb      	str	r3, [r7, #8]
      break;
 8005d7a:	e002      	b.n	8005d82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d7e:	60bb      	str	r3, [r7, #8]
      break;
 8005d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d82:	68bb      	ldr	r3, [r7, #8]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	00f42400 	.word	0x00f42400
 8005d94:	007a1200 	.word	0x007a1200

08005d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <HAL_RCC_GetHCLKFreq+0x14>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	20000000 	.word	0x20000000

08005db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005db4:	f7ff fff0 	bl	8005d98 <HAL_RCC_GetHCLKFreq>
 8005db8:	4601      	mov	r1, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0a9b      	lsrs	r3, r3, #10
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4a03      	ldr	r2, [pc, #12]	; (8005dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	080095dc 	.word	0x080095dc

08005dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d035      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e00:	4b62      	ldr	r3, [pc, #392]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e06:	f7fb f85f 	bl	8000ec8 <HAL_GetTick>
 8005e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e0e:	f7fb f85b 	bl	8000ec8 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e0b0      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e20:	4b5b      	ldr	r3, [pc, #364]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f0      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	019a      	lsls	r2, r3, #6
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	071b      	lsls	r3, r3, #28
 8005e38:	4955      	ldr	r1, [pc, #340]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e40:	4b52      	ldr	r3, [pc, #328]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e46:	f7fb f83f 	bl	8000ec8 <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e4e:	f7fb f83b 	bl	8000ec8 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e090      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e60:	4b4b      	ldr	r3, [pc, #300]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8083 	beq.w	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
 8005e7e:	4b44      	ldr	r3, [pc, #272]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	4a43      	ldr	r2, [pc, #268]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8a:	4b41      	ldr	r3, [pc, #260]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e96:	4b3f      	ldr	r3, [pc, #252]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3e      	ldr	r2, [pc, #248]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ea2:	f7fb f811 	bl	8000ec8 <HAL_GetTick>
 8005ea6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ea8:	e008      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eaa:	f7fb f80d 	bl	8000ec8 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d901      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e062      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ebc:	4b35      	ldr	r3, [pc, #212]	; (8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0f0      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ec8:	4b31      	ldr	r3, [pc, #196]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02f      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d028      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ee6:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ef0:	4b29      	ldr	r3, [pc, #164]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ef6:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005efc:	4a24      	ldr	r2, [pc, #144]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d114      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f0e:	f7fa ffdb 	bl	8000ec8 <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f14:	e00a      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f16:	f7fa ffd7 	bl	8000ec8 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e02a      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2c:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ee      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f44:	d10d      	bne.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f46:	4b12      	ldr	r3, [pc, #72]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5a:	490d      	ldr	r1, [pc, #52]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	608b      	str	r3, [r1, #8]
 8005f60:	e005      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f6c:	6093      	str	r3, [r2, #8]
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7a:	4905      	ldr	r1, [pc, #20]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	42470068 	.word	0x42470068
 8005f90:	40023800 	.word	0x40023800
 8005f94:	40007000 	.word	0x40007000
 8005f98:	42470e40 	.word	0x42470e40

08005f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d13d      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fc2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d004      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d12f      	bne.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fce:	4b1e      	ldr	r3, [pc, #120]	; (8006048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fd0:	617b      	str	r3, [r7, #20]
          break;
 8005fd2:	e02f      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe0:	d108      	bne.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fea:	4a18      	ldr	r2, [pc, #96]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	613b      	str	r3, [r7, #16]
 8005ff2:	e007      	b.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ffc:	4a14      	ldr	r2, [pc, #80]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006002:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800601a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601e:	0f1b      	lsrs	r3, r3, #28
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
          break;
 800602c:	e002      	b.n	8006034 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
          break;
 8006032:	bf00      	nop
        }
      }
      break;
 8006034:	bf00      	nop
    }
  }
  return frequency;
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40023800 	.word	0x40023800
 8006048:	00bb8000 	.word	0x00bb8000
 800604c:	007a1200 	.word	0x007a1200
 8006050:	00f42400 	.word	0x00f42400

08006054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e056      	b.n	8006114 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d106      	bne.n	8006086 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fa fdb5 	bl	8000bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	431a      	orrs	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	ea42 0103 	orr.w	r1, r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	f003 0104 	and.w	r1, r3, #4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006102:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800611c:	b084      	sub	sp, #16
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	f107 001c 	add.w	r0, r7, #28
 800612a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800612e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006130:	2b01      	cmp	r3, #1
 8006132:	d122      	bne.n	800617a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800615c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f94a 	bl	8006408 <USB_CoreReset>
 8006174:	4603      	mov	r3, r0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e01a      	b.n	80061b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f93e 	bl	8006408 <USB_CoreReset>
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
 80061a2:	e005      	b.n	80061b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10b      	bne.n	80061ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f043 0206 	orr.w	r2, r3, #6
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f043 0220 	orr.w	r2, r3, #32
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061da:	b004      	add	sp, #16
 80061dc:	4770      	bx	lr

080061de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f043 0201 	orr.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f023 0201 	bic.w	r2, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e00b      	b.n	8006266 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800624e:	78fb      	ldrb	r3, [r7, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e001      	b.n	8006266 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e003      	b.n	800626e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006266:	2032      	movs	r0, #50	; 0x32
 8006268:	f7fa fe3a 	bl	8000ee0 <HAL_Delay>

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	019b      	lsls	r3, r3, #6
 800628a:	f043 0220 	orr.w	r2, r3, #32
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	3301      	adds	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <USB_FlushTxFifo+0x48>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d901      	bls.n	80062a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e006      	b.n	80062b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d0f0      	beq.n	8006292 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	00030d40 	.word	0x00030d40

080062c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2210      	movs	r2, #16
 80062d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	3301      	adds	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <USB_FlushRxFifo+0x40>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e006      	b.n	80062f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b10      	cmp	r3, #16
 80062f2:	d0f0      	beq.n	80062d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	00030d40 	.word	0x00030d40

08006308 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006308:	b480      	push	{r7}
 800630a:	b089      	sub	sp, #36	; 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4611      	mov	r1, r2
 8006314:	461a      	mov	r2, r3
 8006316:	460b      	mov	r3, r1
 8006318:	71fb      	strb	r3, [r7, #7]
 800631a:	4613      	mov	r3, r2
 800631c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d11a      	bne.n	8006364 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800632e:	88bb      	ldrh	r3, [r7, #4]
 8006330:	3303      	adds	r3, #3
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006336:	2300      	movs	r3, #0
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e00f      	b.n	800635c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	031a      	lsls	r2, r3, #12
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	4413      	add	r3, r2
 8006344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006348:	461a      	mov	r2, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3304      	adds	r3, #4
 8006354:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	3301      	adds	r3, #1
 800635a:	61bb      	str	r3, [r7, #24]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	429a      	cmp	r2, r3
 8006362:	d3eb      	bcc.n	800633c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3724      	adds	r7, #36	; 0x24
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006372:	b480      	push	{r7}
 8006374:	b089      	sub	sp, #36	; 0x24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	4613      	mov	r3, r2
 800637e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	3303      	adds	r3, #3
 800638c:	089b      	lsrs	r3, r3, #2
 800638e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	e00b      	b.n	80063ae <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	601a      	str	r2, [r3, #0]
    pDest++;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3304      	adds	r3, #4
 80063a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61bb      	str	r3, [r7, #24]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d3ef      	bcc.n	8006396 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80063b6:	69fb      	ldr	r3, [r7, #28]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3724      	adds	r7, #36	; 0x24
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063dc:	68fb      	ldr	r3, [r7, #12]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	f003 0301 	and.w	r3, r3, #1
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3301      	adds	r3, #1
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <USB_CoreReset+0x64>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e01b      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	daf2      	bge.n	8006414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f043 0201 	orr.w	r2, r3, #1
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3301      	adds	r3, #1
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <USB_CoreReset+0x64>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d901      	bls.n	8006450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e006      	b.n	800645e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b01      	cmp	r3, #1
 800645a:	d0f0      	beq.n	800643e <USB_CoreReset+0x36>

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	00030d40 	.word	0x00030d40

08006470 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006470:	b084      	sub	sp, #16
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	f107 001c 	add.w	r0, r7, #28
 800647e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800648c:	461a      	mov	r2, r3
 800648e:	2300      	movs	r3, #0
 8006490:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10a      	bne.n	80064de <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d6:	f043 0304 	orr.w	r3, r3, #4
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e014      	b.n	8006508 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e009      	b.n	8006508 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006502:	f023 0304 	bic.w	r3, r3, #4
 8006506:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006508:	2110      	movs	r1, #16
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff feb4 	bl	8006278 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff fed7 	bl	80062c4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e015      	b.n	8006548 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	461a      	mov	r2, r3
 800652a:	f04f 33ff 	mov.w	r3, #4294967295
 800652e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	429a      	cmp	r2, r3
 800654e:	d3e5      	bcc.n	800651c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006550:	2101      	movs	r1, #1
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8ac 	bl	80066b0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006558:	20c8      	movs	r0, #200	; 0xc8
 800655a:	f7fa fcc1 	bl	8000ee0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f04f 32ff 	mov.w	r2, #4294967295
 800656a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00b      	beq.n	8006590 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800657e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <USB_HostInit+0x164>)
 8006584:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <USB_HostInit+0x168>)
 800658a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800658e:	e009      	b.n	80065a4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a10      	ldr	r2, [pc, #64]	; (80065dc <USB_HostInit+0x16c>)
 800659a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a10      	ldr	r2, [pc, #64]	; (80065e0 <USB_HostInit+0x170>)
 80065a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f043 0210 	orr.w	r2, r3, #16
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <USB_HostInit+0x174>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ce:	b004      	add	sp, #16
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	01000200 	.word	0x01000200
 80065d8:	00e00300 	.word	0x00e00300
 80065dc:	00600080 	.word	0x00600080
 80065e0:	004000e0 	.word	0x004000e0
 80065e4:	a3200008 	.word	0xa3200008

080065e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	68f9      	ldr	r1, [r7, #12]
 800661c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006620:	4313      	orrs	r3, r2
 8006622:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d107      	bne.n	800663a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006630:	461a      	mov	r2, r3
 8006632:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006636:	6053      	str	r3, [r2, #4]
 8006638:	e009      	b.n	800664e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	2b02      	cmp	r3, #2
 800663e:	d106      	bne.n	800664e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006646:	461a      	mov	r2, r3
 8006648:	f241 7370 	movw	r3, #6000	; 0x1770
 800664c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800667c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800668c:	2064      	movs	r0, #100	; 0x64
 800668e:	f7fa fc27 	bl	8000ee0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800669a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066a0:	200a      	movs	r0, #10
 80066a2:	f7fa fc1d 	bl	8000ee0 <HAL_Delay>

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <USB_DriveVbus+0x44>
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d106      	bne.n	80066f4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066f2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d109      	bne.n	8006714 <USB_DriveVbus+0x64>
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800670e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006712:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	0c5b      	lsrs	r3, r3, #17
 8006740:	f003 0303 	and.w	r3, r3, #3
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	b29b      	uxth	r3, r3
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	4603      	mov	r3, r0
 8006784:	70fb      	strb	r3, [r7, #3]
 8006786:	460b      	mov	r3, r1
 8006788:	70bb      	strb	r3, [r7, #2]
 800678a:	4613      	mov	r3, r2
 800678c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a2:	461a      	mov	r2, r3
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d87e      	bhi.n	80068b0 <USB_HC_Init+0x13c>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <USB_HC_Init+0x44>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	08006873 	.word	0x08006873
 80067c0:	080067c9 	.word	0x080067c9
 80067c4:	08006835 	.word	0x08006835
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d4:	461a      	mov	r2, r3
 80067d6:	f240 439d 	movw	r3, #1181	; 0x49d
 80067da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da10      	bge.n	8006806 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	0151      	lsls	r1, r2, #5
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	440a      	add	r2, r1
 80067fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006802:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006804:	e057      	b.n	80068b6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680e:	2b00      	cmp	r3, #0
 8006810:	d051      	beq.n	80068b6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006812:	78fb      	ldrb	r3, [r7, #3]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	78fa      	ldrb	r2, [r7, #3]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	440a      	add	r2, r1
 8006828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006830:	60d3      	str	r3, [r2, #12]
      break;
 8006832:	e040      	b.n	80068b6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	461a      	mov	r2, r3
 8006842:	f240 639d 	movw	r3, #1693	; 0x69d
 8006846:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006848:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800684c:	2b00      	cmp	r3, #0
 800684e:	da34      	bge.n	80068ba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	78fa      	ldrb	r2, [r7, #3]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	440a      	add	r2, r1
 8006866:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800686a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006870:	e023      	b.n	80068ba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	461a      	mov	r2, r3
 8006880:	f240 2325 	movw	r3, #549	; 0x225
 8006884:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006886:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da17      	bge.n	80068be <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	78fa      	ldrb	r2, [r7, #3]
 800689e:	0151      	lsls	r1, r2, #5
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	440a      	add	r2, r1
 80068a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80068ac:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068ae:	e006      	b.n	80068be <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e004      	b.n	80068c0 <USB_HC_Init+0x14c>
      break;
 80068b6:	bf00      	nop
 80068b8:	e002      	b.n	80068c0 <USB_HC_Init+0x14c>
      break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <USB_HC_Init+0x14c>
      break;
 80068be:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	2101      	movs	r1, #1
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068da:	4313      	orrs	r3, r2
 80068dc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	da03      	bge.n	80068fa <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	e001      	b.n	80068fe <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80068fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d103      	bne.n	800690e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e001      	b.n	8006912 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006912:	787b      	ldrb	r3, [r7, #1]
 8006914:	059b      	lsls	r3, r3, #22
 8006916:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800691a:	78bb      	ldrb	r3, [r7, #2]
 800691c:	02db      	lsls	r3, r3, #11
 800691e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006922:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006924:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006928:	049b      	lsls	r3, r3, #18
 800692a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800692e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006930:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006932:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006936:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	0159      	lsls	r1, r3, #5
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	440b      	add	r3, r1
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800694e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006950:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006954:	2b03      	cmp	r3, #3
 8006956:	d10f      	bne.n	8006978 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	78fa      	ldrb	r2, [r7, #3]
 8006968:	0151      	lsls	r1, r2, #5
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	440a      	add	r2, r1
 800696e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006976:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
}
 800697a:	4618      	mov	r0, r3
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop

08006988 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08c      	sub	sp, #48	; 0x30
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80069a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d028      	beq.n	8006a04 <USB_HC_StartXfer+0x7c>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	791b      	ldrb	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d124      	bne.n	8006a04 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <USB_HC_StartXfer+0x50>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	795b      	ldrb	r3, [r3, #5]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d107      	bne.n	80069d8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	785b      	ldrb	r3, [r3, #1]
 80069cc:	4619      	mov	r1, r3
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fa30 	bl	8006e34 <USB_DoPing>
      return HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e114      	b.n	8006c02 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d112      	bne.n	8006a04 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	69fa      	ldr	r2, [r7, #28]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	6a3a      	ldr	r2, [r7, #32]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80069fc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d018      	beq.n	8006a3e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	8912      	ldrh	r2, [r2, #8]
 8006a14:	4413      	add	r3, r2
 8006a16:	3b01      	subs	r3, #1
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	8912      	ldrh	r2, [r2, #8]
 8006a1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a20:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a24:	8b7b      	ldrh	r3, [r7, #26]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d90b      	bls.n	8006a42 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	8912      	ldrh	r2, [r2, #8]
 8006a34:	fb02 f203 	mul.w	r2, r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	611a      	str	r2, [r3, #16]
 8006a3c:	e001      	b.n	8006a42 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	78db      	ldrb	r3, [r3, #3]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d006      	beq.n	8006a58 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	8912      	ldrh	r2, [r2, #8]
 8006a50:	fb02 f203 	mul.w	r2, r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a62:	04d9      	lsls	r1, r3, #19
 8006a64:	4b69      	ldr	r3, [pc, #420]	; (8006c0c <USB_HC_StartXfer+0x284>)
 8006a66:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a68:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7a9b      	ldrb	r3, [r3, #10]
 8006a6e:	075b      	lsls	r3, r3, #29
 8006a70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	0148      	lsls	r0, r1, #5
 8006a78:	6a39      	ldr	r1, [r7, #32]
 8006a7a:	4401      	add	r1, r0
 8006a7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a80:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a82:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	68d9      	ldr	r1, [r3, #12]
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9a:	460a      	mov	r2, r1
 8006a9c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ad4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	7e7b      	ldrb	r3, [r7, #25]
 8006ae6:	075b      	lsls	r3, r3, #29
 8006ae8:	69f9      	ldr	r1, [r7, #28]
 8006aea:	0148      	lsls	r0, r1, #5
 8006aec:	6a39      	ldr	r1, [r7, #32]
 8006aee:	4401      	add	r1, r0
 8006af0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006af4:	4313      	orrs	r3, r2
 8006af6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a42      	ldr	r2, [pc, #264]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b08:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b0a:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b12:	4a3f      	ldr	r2, [pc, #252]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b14:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	78db      	ldrb	r3, [r3, #3]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d006      	beq.n	8006b2c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b1e:	4b3c      	ldr	r3, [pc, #240]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b26:	4a3a      	ldr	r2, [pc, #232]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e005      	b.n	8006b38 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b2c:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b34:	4a36      	ldr	r2, [pc, #216]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b36:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b38:	4b35      	ldr	r3, [pc, #212]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b40:	4a33      	ldr	r2, [pc, #204]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b42:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b2f      	ldr	r3, [pc, #188]	; (8006c10 <USB_HC_StartXfer+0x288>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e04f      	b.n	8006c02 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	78db      	ldrb	r3, [r3, #3]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d14a      	bne.n	8006c00 <USB_HC_StartXfer+0x278>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d046      	beq.n	8006c00 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	79db      	ldrb	r3, [r3, #7]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d830      	bhi.n	8006bdc <USB_HC_StartXfer+0x254>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <USB_HC_StartXfer+0x1f8>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006b91 	.word	0x08006b91
 8006b8c:	08006bb5 	.word	0x08006bb5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	3303      	adds	r3, #3
 8006b96:	089b      	lsrs	r3, r3, #2
 8006b98:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b9a:	8afa      	ldrh	r2, [r7, #22]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d91c      	bls.n	8006be0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	f043 0220 	orr.w	r2, r3, #32
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bb2:	e015      	b.n	8006be0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	3303      	adds	r3, #3
 8006bba:	089b      	lsrs	r3, r3, #2
 8006bbc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006bbe:	8afa      	ldrh	r2, [r7, #22]
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d90a      	bls.n	8006be4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bda:	e003      	b.n	8006be4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bdc:	bf00      	nop
 8006bde:	e002      	b.n	8006be6 <USB_HC_StartXfer+0x25e>
        break;
 8006be0:	bf00      	nop
 8006be2:	e000      	b.n	8006be6 <USB_HC_StartXfer+0x25e>
        break;
 8006be4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68d9      	ldr	r1, [r3, #12]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	785a      	ldrb	r2, [r3, #1]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	b298      	uxth	r0, r3
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9300      	str	r3, [sp, #0]
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f7ff fb84 	bl	8006308 <USB_WritePacket>
  }

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	1ff80000 	.word	0x1ff80000
 8006c10:	200000b0 	.word	0x200000b0

08006c14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	b29b      	uxth	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b087      	sub	sp, #28
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c46:	78fb      	ldrb	r3, [r7, #3]
 8006c48:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	0c9b      	lsrs	r3, r3, #18
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <USB_HC_Halt+0x3a>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d16c      	bne.n	8006d4a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c8e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d143      	bne.n	8006d24 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cfa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d08:	d81d      	bhi.n	8006d46 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d20:	d0ec      	beq.n	8006cfc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d22:	e080      	b.n	8006e26 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d42:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d44:	e06f      	b.n	8006e26 <USB_HC_Halt+0x1f0>
          break;
 8006d46:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d48:	e06d      	b.n	8006e26 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d68:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d143      	bne.n	8006e02 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006db8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de6:	d81d      	bhi.n	8006e24 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dfe:	d0ec      	beq.n	8006dda <USB_HC_Halt+0x1a4>
 8006e00:	e011      	b.n	8006e26 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e000      	b.n	8006e26 <USB_HC_Halt+0x1f0>
          break;
 8006e24:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	04da      	lsls	r2, r3, #19
 8006e50:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <USB_DoPing+0x74>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	461a      	mov	r2, r3
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	1ff80000 	.word	0x1ff80000

08006eac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff f99f 	bl	8006200 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff f9d7 	bl	8006278 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff f9fa 	bl	80062c4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	e01f      	b.n	8006f16 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006efc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	3301      	adds	r3, #1
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	2b0f      	cmp	r3, #15
 8006f1a:	d9dc      	bls.n	8006ed6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	e034      	b.n	8006f8c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f48:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	617b      	str	r3, [r7, #20]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f68:	d80c      	bhi.n	8006f84 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f80:	d0ec      	beq.n	8006f5c <USB_StopHost+0xb0>
 8006f82:	e000      	b.n	8006f86 <USB_StopHost+0xda>
        break;
 8006f84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d9c7      	bls.n	8006f22 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f98:	461a      	mov	r2, r3
 8006f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff f918 	bl	80061de <USB_EnableGlobalInt>

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006fb8:	b590      	push	{r4, r7, lr}
 8006fba:	b089      	sub	sp, #36	; 0x24
 8006fbc:	af04      	add	r7, sp, #16
 8006fbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fc68 	bl	800789c <USBH_FindInterface>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	2bff      	cmp	r3, #255	; 0xff
 8006fd4:	d002      	beq.n	8006fdc <USBH_CDC_InterfaceInit+0x24>
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d901      	bls.n	8006fe0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e13d      	b.n	800725c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc3d 	bl	8007864 <USBH_SelectInterface>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e131      	b.n	800725c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006ffe:	2050      	movs	r0, #80	; 0x50
 8007000:	f002 fa04 	bl	800940c <malloc>
 8007004:	4603      	mov	r3, r0
 8007006:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800700e:	69db      	ldr	r3, [r3, #28]
 8007010:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007018:	2302      	movs	r3, #2
 800701a:	e11f      	b.n	800725c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800701c:	2250      	movs	r2, #80	; 0x50
 800701e:	2100      	movs	r1, #0
 8007020:	68b8      	ldr	r0, [r7, #8]
 8007022:	f002 fa03 	bl	800942c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	211a      	movs	r1, #26
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	b25b      	sxtb	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	da15      	bge.n	800706a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800703e:	7bfb      	ldrb	r3, [r7, #15]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	211a      	movs	r1, #26
 8007044:	fb01 f303 	mul.w	r3, r1, r3
 8007048:	4413      	add	r3, r2
 800704a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	211a      	movs	r1, #26
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	4413      	add	r3, r2
 8007060:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007064:	881a      	ldrh	r2, [r3, #0]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f001 fe36 	bl	8008ce2 <USBH_AllocPipe>
 8007076:	4603      	mov	r3, r0
 8007078:	461a      	mov	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	7819      	ldrb	r1, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	7858      	ldrb	r0, [r3, #1]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	8952      	ldrh	r2, [r2, #10]
 8007096:	9202      	str	r2, [sp, #8]
 8007098:	2203      	movs	r2, #3
 800709a:	9201      	str	r2, [sp, #4]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4623      	mov	r3, r4
 80070a0:	4602      	mov	r2, r0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fdee 	bl	8008c84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2200      	movs	r2, #0
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f002 f8fb 	bl	80092ac <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80070b6:	2300      	movs	r3, #0
 80070b8:	2200      	movs	r2, #0
 80070ba:	210a      	movs	r1, #10
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fbed 	bl	800789c <USBH_FindInterface>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2bff      	cmp	r3, #255	; 0xff
 80070ca:	d002      	beq.n	80070d2 <USBH_CDC_InterfaceInit+0x11a>
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d901      	bls.n	80070d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070d2:	2302      	movs	r3, #2
 80070d4:	e0c2      	b.n	800725c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	211a      	movs	r1, #26
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	b25b      	sxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	da16      	bge.n	800711c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	211a      	movs	r1, #26
 80070f4:	fb01 f303 	mul.w	r3, r1, r3
 80070f8:	4413      	add	r3, r2
 80070fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	211a      	movs	r1, #26
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	4413      	add	r3, r2
 8007110:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007114:	881a      	ldrh	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	835a      	strh	r2, [r3, #26]
 800711a:	e015      	b.n	8007148 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	211a      	movs	r1, #26
 8007122:	fb01 f303 	mul.w	r3, r1, r3
 8007126:	4413      	add	r3, r2
 8007128:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800712c:	781a      	ldrb	r2, [r3, #0]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	211a      	movs	r1, #26
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	4413      	add	r3, r2
 800713e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007142:	881a      	ldrh	r2, [r3, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	211a      	movs	r1, #26
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	4413      	add	r3, r2
 8007154:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b25b      	sxtb	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	da16      	bge.n	800718e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	211a      	movs	r1, #26
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	4413      	add	r3, r2
 800716c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007170:	781a      	ldrb	r2, [r3, #0]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	211a      	movs	r1, #26
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	4413      	add	r3, r2
 8007182:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007186:	881a      	ldrh	r2, [r3, #0]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	835a      	strh	r2, [r3, #26]
 800718c:	e015      	b.n	80071ba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	211a      	movs	r1, #26
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	211a      	movs	r1, #26
 80071aa:	fb01 f303 	mul.w	r3, r1, r3
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	7b9b      	ldrb	r3, [r3, #14]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fd8e 	bl	8008ce2 <USBH_AllocPipe>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	7bdb      	ldrb	r3, [r3, #15]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fd84 	bl	8008ce2 <USBH_AllocPipe>
 80071da:	4603      	mov	r3, r0
 80071dc:	461a      	mov	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	7b59      	ldrb	r1, [r3, #13]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	7b98      	ldrb	r0, [r3, #14]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	8b12      	ldrh	r2, [r2, #24]
 80071fa:	9202      	str	r2, [sp, #8]
 80071fc:	2202      	movs	r2, #2
 80071fe:	9201      	str	r2, [sp, #4]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	4623      	mov	r3, r4
 8007204:	4602      	mov	r2, r0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fd3c 	bl	8008c84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	7b19      	ldrb	r1, [r3, #12]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	7bd8      	ldrb	r0, [r3, #15]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	8b52      	ldrh	r2, [r2, #26]
 8007224:	9202      	str	r2, [sp, #8]
 8007226:	2202      	movs	r2, #2
 8007228:	9201      	str	r2, [sp, #4]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	4623      	mov	r3, r4
 800722e:	4602      	mov	r2, r0
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fd27 	bl	8008c84 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	7b5b      	ldrb	r3, [r3, #13]
 8007242:	2200      	movs	r2, #0
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f002 f830 	bl	80092ac <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	7b1b      	ldrb	r3, [r3, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f002 f829 	bl	80092ac <USBH_LL_SetToggle>

  return USBH_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	bd90      	pop	{r4, r7, pc}

08007264 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00e      	beq.n	800729c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	4619      	mov	r1, r3
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fd1c 	bl	8008cc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 fd47 	bl	8008d24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	7b1b      	ldrb	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00e      	beq.n	80072c2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	7b1b      	ldrb	r3, [r3, #12]
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f001 fd09 	bl	8008cc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7b1b      	ldrb	r3, [r3, #12]
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f001 fd34 	bl	8008d24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	7b5b      	ldrb	r3, [r3, #13]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00e      	beq.n	80072e8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	7b5b      	ldrb	r3, [r3, #13]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 fcf6 	bl	8008cc2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	7b5b      	ldrb	r3, [r3, #13]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fd21 	bl	8008d24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00b      	beq.n	800730c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f002 f88d 	bl	800941c <free>
    phost->pActiveClass->pData = 0U;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007308:	2200      	movs	r2, #0
 800730a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007324:	69db      	ldr	r3, [r3, #28]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	3340      	adds	r3, #64	; 0x40
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f8b1 	bl	8007496 <GetLineCoding>
 8007334:	4603      	mov	r3, r0
 8007336:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007344:	2102      	movs	r1, #2
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800734a:	7afb      	ldrb	r3, [r7, #11]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800735c:	2301      	movs	r3, #1
 800735e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007374:	2b04      	cmp	r3, #4
 8007376:	d877      	bhi.n	8007468 <USBH_CDC_Process+0x114>
 8007378:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <USBH_CDC_Process+0x2c>)
 800737a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737e:	bf00      	nop
 8007380:	08007395 	.word	0x08007395
 8007384:	0800739b 	.word	0x0800739b
 8007388:	080073cb 	.word	0x080073cb
 800738c:	0800743f 	.word	0x0800743f
 8007390:	0800744d 	.word	0x0800744d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]
      break;
 8007398:	e06d      	b.n	8007476 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f897 	bl	80074d4 <SetLineCoding>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073b8:	e058      	b.n	800746c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d055      	beq.n	800746c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	2204      	movs	r2, #4
 80073c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073c8:	e050      	b.n	800746c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	3340      	adds	r3, #64	; 0x40
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f860 	bl	8007496 <GetLineCoding>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d126      	bne.n	800742e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d13b      	bne.n	8007470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007402:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007404:	429a      	cmp	r2, r3
 8007406:	d133      	bne.n	8007470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007412:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007414:	429a      	cmp	r2, r3
 8007416:	d12b      	bne.n	8007470 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007420:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007422:	429a      	cmp	r2, r3
 8007424:	d124      	bne.n	8007470 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f95a 	bl	80076e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800742c:	e020      	b.n	8007470 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d01d      	beq.n	8007470 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2204      	movs	r2, #4
 8007438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800743c:	e018      	b.n	8007470 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f867 	bl	8007512 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f8dc 	bl	8007602 <CDC_ProcessReception>
      break;
 800744a:	e014      	b.n	8007476 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 ffe5 	bl	800841e <USBH_ClrFeature>
 8007454:	4603      	mov	r3, r0
 8007456:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10a      	bne.n	8007474 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007466:	e005      	b.n	8007474 <USBH_CDC_Process+0x120>

    default:
      break;
 8007468:	bf00      	nop
 800746a:	e004      	b.n	8007476 <USBH_CDC_Process+0x122>
      break;
 800746c:	bf00      	nop
 800746e:	e002      	b.n	8007476 <USBH_CDC_Process+0x122>
      break;
 8007470:	bf00      	nop
 8007472:	e000      	b.n	8007476 <USBH_CDC_Process+0x122>
      break;
 8007474:	bf00      	nop

  }

  return status;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	22a1      	movs	r2, #161	; 0xa1
 80074a4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2207      	movs	r2, #7
 80074bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2207      	movs	r2, #7
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 f98a 	bl	80087de <USBH_CtlReq>
 80074ca:	4603      	mov	r3, r0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2221      	movs	r2, #33	; 0x21
 80074e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2207      	movs	r2, #7
 80074fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	2207      	movs	r2, #7
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 f96b 	bl	80087de <USBH_CtlReq>
 8007508:	4603      	mov	r3, r0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af02      	add	r7, sp, #8
 8007518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007524:	2300      	movs	r3, #0
 8007526:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800752e:	2b01      	cmp	r3, #1
 8007530:	d002      	beq.n	8007538 <CDC_ProcessTransmission+0x26>
 8007532:	2b02      	cmp	r3, #2
 8007534:	d025      	beq.n	8007582 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007536:	e060      	b.n	80075fa <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	8b12      	ldrh	r2, [r2, #24]
 8007540:	4293      	cmp	r3, r2
 8007542:	d90c      	bls.n	800755e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	69d9      	ldr	r1, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8b1a      	ldrh	r2, [r3, #24]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	7b58      	ldrb	r0, [r3, #13]
 8007550:	2301      	movs	r3, #1
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fb51 	bl	8008bfe <USBH_BulkSendData>
 800755c:	e00c      	b.n	8007578 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007566:	b29a      	uxth	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7b58      	ldrb	r0, [r3, #13]
 800756c:	2301      	movs	r3, #1
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	4603      	mov	r3, r0
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fb43 	bl	8008bfe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007580:	e03b      	b.n	80075fa <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	7b5b      	ldrb	r3, [r3, #13]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 fe65 	bl	8009258 <USBH_LL_GetURBState>
 800758e:	4603      	mov	r3, r0
 8007590:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d128      	bne.n	80075ea <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	8b12      	ldrh	r2, [r2, #24]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d90e      	bls.n	80075c2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	8b12      	ldrh	r2, [r2, #24]
 80075ac:	1a9a      	subs	r2, r3, r2
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	8b12      	ldrh	r2, [r2, #24]
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	61da      	str	r2, [r3, #28]
 80075c0:	e002      	b.n	80075c8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075d8:	e00e      	b.n	80075f8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f868 	bl	80076b8 <USBH_CDC_TransmitCallback>
      break;
 80075e8:	e006      	b.n	80075f8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d103      	bne.n	80075f8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075f8:	bf00      	nop
  }
}
 80075fa:	bf00      	nop
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b086      	sub	sp, #24
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007614:	2300      	movs	r3, #0
 8007616:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800761e:	2b03      	cmp	r3, #3
 8007620:	d002      	beq.n	8007628 <CDC_ProcessReception+0x26>
 8007622:	2b04      	cmp	r3, #4
 8007624:	d00e      	beq.n	8007644 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007626:	e043      	b.n	80076b0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	6a19      	ldr	r1, [r3, #32]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	8b5a      	ldrh	r2, [r3, #26]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	7b1b      	ldrb	r3, [r3, #12]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 fb07 	bl	8008c48 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2204      	movs	r2, #4
 800763e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007642:	e035      	b.n	80076b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	7b1b      	ldrb	r3, [r3, #12]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 fe04 	bl	8009258 <USBH_LL_GetURBState>
 8007650:	4603      	mov	r3, r0
 8007652:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007654:	7cfb      	ldrb	r3, [r7, #19]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d129      	bne.n	80076ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	7b1b      	ldrb	r3, [r3, #12]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fd67 	bl	8009134 <USBH_LL_GetLastXferSize>
 8007666:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	429a      	cmp	r2, r3
 8007670:	d016      	beq.n	80076a0 <CDC_ProcessReception+0x9e>
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	8b5b      	ldrh	r3, [r3, #26]
 8007676:	461a      	mov	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4293      	cmp	r3, r2
 800767c:	d910      	bls.n	80076a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	1ad2      	subs	r2, r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	441a      	add	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2203      	movs	r2, #3
 800769a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800769e:	e006      	b.n	80076ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f80f 	bl	80076cc <USBH_CDC_ReceiveCallback>
      break;
 80076ae:	bf00      	nop
  }
}
 80076b0:	bf00      	nop
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076e8:	bf00      	nop
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007708:	2302      	movs	r3, #2
 800770a:	e029      	b.n	8007760 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	79fa      	ldrb	r2, [r7, #7]
 8007710:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f81f 	bl	8007768 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f001 fc39 	bl	8008fd0 <USBH_LL_Init>

  return USBH_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	e009      	b.n	800778e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	33e0      	adds	r3, #224	; 0xe0
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	2200      	movs	r2, #0
 8007786:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b0e      	cmp	r3, #14
 8007792:	d9f2      	bls.n	800777a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e009      	b.n	80077ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3301      	adds	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b4:	d3f1      	bcc.n	800779a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2240      	movs	r2, #64	; 0x40
 80077da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d016      	beq.n	8007852 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10e      	bne.n	800784c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007834:	1c59      	adds	r1, r3, #1
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	33de      	adds	r3, #222	; 0xde
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
 800784a:	e004      	b.n	8007856 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800784c:	2302      	movs	r3, #2
 800784e:	73fb      	strb	r3, [r7, #15]
 8007850:	e001      	b.n	8007856 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007852:	2302      	movs	r3, #2
 8007854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	429a      	cmp	r2, r3
 800787e:	d204      	bcs.n	800788a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	78fa      	ldrb	r2, [r7, #3]
 8007884:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007888:	e001      	b.n	800788e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800788a:	2302      	movs	r3, #2
 800788c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800788e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	70fb      	strb	r3, [r7, #3]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70bb      	strb	r3, [r7, #2]
 80078b2:	4613      	mov	r3, r2
 80078b4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078c4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078c6:	e025      	b.n	8007914 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	221a      	movs	r2, #26
 80078cc:	fb02 f303 	mul.w	r3, r2, r3
 80078d0:	3308      	adds	r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	3302      	adds	r3, #2
 80078d8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	795b      	ldrb	r3, [r3, #5]
 80078de:	78fa      	ldrb	r2, [r7, #3]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d002      	beq.n	80078ea <USBH_FindInterface+0x4e>
 80078e4:	78fb      	ldrb	r3, [r7, #3]
 80078e6:	2bff      	cmp	r3, #255	; 0xff
 80078e8:	d111      	bne.n	800790e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078ee:	78ba      	ldrb	r2, [r7, #2]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d002      	beq.n	80078fa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078f4:	78bb      	ldrb	r3, [r7, #2]
 80078f6:	2bff      	cmp	r3, #255	; 0xff
 80078f8:	d109      	bne.n	800790e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078fe:	787a      	ldrb	r2, [r7, #1]
 8007900:	429a      	cmp	r2, r3
 8007902:	d002      	beq.n	800790a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007904:	787b      	ldrb	r3, [r7, #1]
 8007906:	2bff      	cmp	r3, #255	; 0xff
 8007908:	d101      	bne.n	800790e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	e006      	b.n	800791c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	3301      	adds	r3, #1
 8007912:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007914:	7dfb      	ldrb	r3, [r7, #23]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d9d6      	bls.n	80078c8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800791a:	23ff      	movs	r3, #255	; 0xff
}
 800791c:	4618      	mov	r0, r3
 800791e:	371c      	adds	r7, #28
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fb89 	bl	8009048 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007936:	2101      	movs	r1, #1
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 fca0 	bl	800927e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af04      	add	r7, sp, #16
 800794e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007950:	2302      	movs	r3, #2
 8007952:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b01      	cmp	r3, #1
 8007962:	d102      	bne.n	800796a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2203      	movs	r2, #3
 8007968:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b0b      	cmp	r3, #11
 8007972:	f200 81b3 	bhi.w	8007cdc <USBH_Process+0x394>
 8007976:	a201      	add	r2, pc, #4	; (adr r2, 800797c <USBH_Process+0x34>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	080079ad 	.word	0x080079ad
 8007980:	080079df 	.word	0x080079df
 8007984:	08007a47 	.word	0x08007a47
 8007988:	08007c77 	.word	0x08007c77
 800798c:	08007cdd 	.word	0x08007cdd
 8007990:	08007aeb 	.word	0x08007aeb
 8007994:	08007c1d 	.word	0x08007c1d
 8007998:	08007b21 	.word	0x08007b21
 800799c:	08007b41 	.word	0x08007b41
 80079a0:	08007b61 	.word	0x08007b61
 80079a4:	08007b8f 	.word	0x08007b8f
 80079a8:	08007c5f 	.word	0x08007c5f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8193 	beq.w	8007ce0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80079c0:	20c8      	movs	r0, #200	; 0xc8
 80079c2:	f001 fca6 	bl	8009312 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fb99 	bl	80090fe <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079dc:	e180      	b.n	8007ce0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d107      	bne.n	80079f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079f6:	e182      	b.n	8007cfe <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a02:	d914      	bls.n	8007a2e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	d903      	bls.n	8007a26 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	220d      	movs	r2, #13
 8007a22:	701a      	strb	r2, [r3, #0]
      break;
 8007a24:	e16b      	b.n	8007cfe <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]
      break;
 8007a2c:	e167      	b.n	8007cfe <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a34:	f103 020a 	add.w	r2, r3, #10
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007a3e:	200a      	movs	r0, #10
 8007a40:	f001 fc67 	bl	8009312 <USBH_Delay>
      break;
 8007a44:	e15b      	b.n	8007cfe <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d005      	beq.n	8007a5c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a56:	2104      	movs	r1, #4
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a5c:	2064      	movs	r0, #100	; 0x64
 8007a5e:	f001 fc58 	bl	8009312 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f001 fb26 	bl	80090b4 <USBH_LL_GetSpeed>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2205      	movs	r2, #5
 8007a76:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a78:	2100      	movs	r1, #0
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f001 f931 	bl	8008ce2 <USBH_AllocPipe>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a88:	2180      	movs	r1, #128	; 0x80
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 f929 	bl	8008ce2 <USBH_AllocPipe>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7919      	ldrb	r1, [r3, #4]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007aac:	b292      	uxth	r2, r2
 8007aae:	9202      	str	r2, [sp, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	9201      	str	r2, [sp, #4]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2280      	movs	r2, #128	; 0x80
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f8e2 	bl	8008c84 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7959      	ldrb	r1, [r3, #5]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ad4:	b292      	uxth	r2, r2
 8007ad6:	9202      	str	r2, [sp, #8]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	9201      	str	r2, [sp, #4]
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f8ce 	bl	8008c84 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ae8:	e109      	b.n	8007cfe <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f90c 	bl	8007d08 <USBH_HandleEnum>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f040 80f3 	bne.w	8007ce4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d103      	bne.n	8007b18 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2208      	movs	r2, #8
 8007b14:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b16:	e0e5      	b.n	8007ce4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2207      	movs	r2, #7
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e0e1      	b.n	8007ce4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80de 	beq.w	8007ce8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b32:	2101      	movs	r1, #1
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2208      	movs	r2, #8
 8007b3c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b3e:	e0d3      	b.n	8007ce8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc20 	bl	8008390 <USBH_SetCfg>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f040 80ca 	bne.w	8007cec <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2209      	movs	r2, #9
 8007b5c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b5e:	e0c5      	b.n	8007cec <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b6e:	2101      	movs	r1, #1
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc30 	bl	80083d6 <USBH_SetFeature>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f040 80b9 	bne.w	8007cf0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	220a      	movs	r2, #10
 8007b82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b84:	e0b4      	b.n	8007cf0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	220a      	movs	r2, #10
 8007b8a:	701a      	strb	r2, [r3, #0]
      break;
 8007b8c:	e0b0      	b.n	8007cf0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 80ad 	beq.w	8007cf4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	e016      	b.n	8007bd6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ba8:	7bfa      	ldrb	r2, [r7, #15]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32de      	adds	r2, #222	; 0xde
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	791a      	ldrb	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d108      	bne.n	8007bd0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007bbe:	7bfa      	ldrb	r2, [r7, #15]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	32de      	adds	r2, #222	; 0xde
 8007bc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007bce:	e005      	b.n	8007bdc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	73fb      	strb	r3, [r7, #15]
 8007bd6:	7bfb      	ldrb	r3, [r7, #15]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0e5      	beq.n	8007ba8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	4798      	blx	r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d109      	bne.n	8007c0c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2206      	movs	r2, #6
 8007bfc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c04:	2103      	movs	r1, #3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c0a:	e073      	b.n	8007cf4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	220d      	movs	r2, #13
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e06f      	b.n	8007cf4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	220d      	movs	r2, #13
 8007c18:	701a      	strb	r2, [r3, #0]
      break;
 8007c1a:	e06b      	b.n	8007cf4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d017      	beq.n	8007c56 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c36:	7bbb      	ldrb	r3, [r7, #14]
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	220b      	movs	r2, #11
 8007c42:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c44:	e058      	b.n	8007cf8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d154      	bne.n	8007cf8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	220d      	movs	r2, #13
 8007c52:	701a      	strb	r2, [r3, #0]
      break;
 8007c54:	e050      	b.n	8007cf8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	220d      	movs	r2, #13
 8007c5a:	701a      	strb	r2, [r3, #0]
      break;
 8007c5c:	e04c      	b.n	8007cf8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d049      	beq.n	8007cfc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
      }
      break;
 8007c74:	e042      	b.n	8007cfc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fd72 	bl	8007768 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cb2:	2105      	movs	r1, #5
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d107      	bne.n	8007cd4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fe2b 	bl	8007928 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cd2:	e014      	b.n	8007cfe <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 f9b7 	bl	8009048 <USBH_LL_Start>
      break;
 8007cda:	e010      	b.n	8007cfe <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cdc:	bf00      	nop
 8007cde:	e00e      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e00c      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e00a      	b.n	8007cfe <USBH_Process+0x3b6>
    break;
 8007ce8:	bf00      	nop
 8007cea:	e008      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007cec:	bf00      	nop
 8007cee:	e006      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007cf0:	bf00      	nop
 8007cf2:	e004      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007cf4:	bf00      	nop
 8007cf6:	e002      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <USBH_Process+0x3b6>
      break;
 8007cfc:	bf00      	nop
  }
  return USBH_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d14:	2301      	movs	r3, #1
 8007d16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b07      	cmp	r3, #7
 8007d1e:	f200 81c1 	bhi.w	80080a4 <USBH_HandleEnum+0x39c>
 8007d22:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBH_HandleEnum+0x20>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007e07 	.word	0x08007e07
 8007d30:	08007e71 	.word	0x08007e71
 8007d34:	08007eff 	.word	0x08007eff
 8007d38:	08007f69 	.word	0x08007f69
 8007d3c:	08007fd9 	.word	0x08007fd9
 8007d40:	0800801f 	.word	0x0800801f
 8007d44:	08008065 	.word	0x08008065
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d48:	2108      	movs	r1, #8
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fa50 	bl	80081f0 <USBH_Get_DevDesc>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d130      	bne.n	8007dbc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	7919      	ldrb	r1, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d7e:	b292      	uxth	r2, r2
 8007d80:	9202      	str	r2, [sp, #8]
 8007d82:	2200      	movs	r2, #0
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	9300      	str	r3, [sp, #0]
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2280      	movs	r2, #128	; 0x80
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 ff79 	bl	8008c84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7959      	ldrb	r1, [r3, #5]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007da6:	b292      	uxth	r2, r2
 8007da8:	9202      	str	r2, [sp, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	9201      	str	r2, [sp, #4]
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4603      	mov	r3, r0
 8007db2:	2200      	movs	r2, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 ff65 	bl	8008c84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007dba:	e175      	b.n	80080a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dbc:	7bbb      	ldrb	r3, [r7, #14]
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	f040 8172 	bne.w	80080a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dca:	3301      	adds	r3, #1
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d903      	bls.n	8007de6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	220d      	movs	r2, #13
 8007de2:	701a      	strb	r2, [r3, #0]
      break;
 8007de4:	e160      	b.n	80080a8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	795b      	ldrb	r3, [r3, #5]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 ff99 	bl	8008d24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	791b      	ldrb	r3, [r3, #4]
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 ff93 	bl	8008d24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	701a      	strb	r2, [r3, #0]
      break;
 8007e04:	e150      	b.n	80080a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007e06:	2112      	movs	r1, #18
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f9f1 	bl	80081f0 <USBH_Get_DevDesc>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d103      	bne.n	8007e20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e1e:	e145      	b.n	80080ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	f040 8142 	bne.w	80080ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d903      	bls.n	8007e4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	220d      	movs	r2, #13
 8007e46:	701a      	strb	r2, [r3, #0]
      break;
 8007e48:	e130      	b.n	80080ac <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 ff67 	bl	8008d24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 ff61 	bl	8008d24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	701a      	strb	r2, [r3, #0]
      break;
 8007e6e:	e11d      	b.n	80080ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e70:	2101      	movs	r1, #1
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa68 	bl	8008348 <USBH_SetAddress>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d132      	bne.n	8007ee8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007e82:	2002      	movs	r0, #2
 8007e84:	f001 fa45 	bl	8009312 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2203      	movs	r2, #3
 8007e94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7919      	ldrb	r1, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	9202      	str	r2, [sp, #8]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	9201      	str	r2, [sp, #4]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2280      	movs	r2, #128	; 0x80
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fee3 	bl	8008c84 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7959      	ldrb	r1, [r3, #5]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ed2:	b292      	uxth	r2, r2
 8007ed4:	9202      	str	r2, [sp, #8]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	9201      	str	r2, [sp, #4]
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fecf 	bl	8008c84 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ee6:	e0e3      	b.n	80080b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	f040 80e0 	bne.w	80080b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	220d      	movs	r2, #13
 8007ef4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	705a      	strb	r2, [r3, #1]
      break;
 8007efc:	e0d8      	b.n	80080b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007efe:	2109      	movs	r1, #9
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f99d 	bl	8008240 <USBH_Get_CfgDesc>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2204      	movs	r2, #4
 8007f14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f16:	e0cd      	b.n	80080b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	f040 80ca 	bne.w	80080b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f26:	3301      	adds	r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d903      	bls.n	8007f42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	220d      	movs	r2, #13
 8007f3e:	701a      	strb	r2, [r3, #0]
      break;
 8007f40:	e0b8      	b.n	80080b4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	795b      	ldrb	r3, [r3, #5]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 feeb 	bl	8008d24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	791b      	ldrb	r3, [r3, #4]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fee5 	bl	8008d24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
      break;
 8007f66:	e0a5      	b.n	80080b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f965 	bl	8008240 <USBH_Get_CfgDesc>
 8007f76:	4603      	mov	r3, r0
 8007f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f7a:	7bbb      	ldrb	r3, [r7, #14]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2205      	movs	r2, #5
 8007f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f86:	e097      	b.n	80080b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f88:	7bbb      	ldrb	r3, [r7, #14]
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	f040 8094 	bne.w	80080b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f96:	3301      	adds	r3, #1
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007fa6:	2b03      	cmp	r3, #3
 8007fa8:	d903      	bls.n	8007fb2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	220d      	movs	r2, #13
 8007fae:	701a      	strb	r2, [r3, #0]
      break;
 8007fb0:	e082      	b.n	80080b8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	795b      	ldrb	r3, [r3, #5]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 feb3 	bl	8008d24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fead 	bl	8008d24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e06f      	b.n	80080b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d019      	beq.n	8008016 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fee:	23ff      	movs	r3, #255	; 0xff
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f949 	bl	8008288 <USBH_Get_StringDesc>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2206      	movs	r2, #6
 8008004:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008006:	e059      	b.n	80080bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	2b03      	cmp	r3, #3
 800800c:	d156      	bne.n	80080bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2206      	movs	r2, #6
 8008012:	705a      	strb	r2, [r3, #1]
      break;
 8008014:	e052      	b.n	80080bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2206      	movs	r2, #6
 800801a:	705a      	strb	r2, [r3, #1]
      break;
 800801c:	e04e      	b.n	80080bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008024:	2b00      	cmp	r3, #0
 8008026:	d019      	beq.n	800805c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008034:	23ff      	movs	r3, #255	; 0xff
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f926 	bl	8008288 <USBH_Get_StringDesc>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d103      	bne.n	800804e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2207      	movs	r2, #7
 800804a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800804c:	e038      	b.n	80080c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800804e:	7bbb      	ldrb	r3, [r7, #14]
 8008050:	2b03      	cmp	r3, #3
 8008052:	d135      	bne.n	80080c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2207      	movs	r2, #7
 8008058:	705a      	strb	r2, [r3, #1]
      break;
 800805a:	e031      	b.n	80080c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2207      	movs	r2, #7
 8008060:	705a      	strb	r2, [r3, #1]
      break;
 8008062:	e02d      	b.n	80080c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800806a:	2b00      	cmp	r3, #0
 800806c:	d017      	beq.n	800809e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800807a:	23ff      	movs	r3, #255	; 0xff
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f903 	bl	8008288 <USBH_Get_StringDesc>
 8008082:	4603      	mov	r3, r0
 8008084:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008090:	e018      	b.n	80080c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d115      	bne.n	80080c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
      break;
 800809c:	e012      	b.n	80080c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
      break;
 80080a2:	e00f      	b.n	80080c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80080a4:	bf00      	nop
 80080a6:	e00e      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080a8:	bf00      	nop
 80080aa:	e00c      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080ac:	bf00      	nop
 80080ae:	e00a      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080b0:	bf00      	nop
 80080b2:	e008      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080b4:	bf00      	nop
 80080b6:	e006      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080b8:	bf00      	nop
 80080ba:	e004      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080bc:	bf00      	nop
 80080be:	e002      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080c0:	bf00      	nop
 80080c2:	e000      	b.n	80080c6 <USBH_HandleEnum+0x3be>
      break;
 80080c4:	bf00      	nop
  }
  return Status;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f804 	bl	8008112 <USBH_HandleSof>
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b0b      	cmp	r3, #11
 8008122:	d10a      	bne.n	800813a <USBH_HandleSof+0x28>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
  }
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008152:	bf00      	nop
}
 8008154:	370c      	adds	r7, #12
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800816e:	bf00      	nop
}
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800817a:	b480      	push	{r7}
 800817c:	b083      	sub	sp, #12
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 ff58 	bl	800907e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	791b      	ldrb	r3, [r3, #4]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fda5 	bl	8008d24 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	795b      	ldrb	r3, [r3, #5]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fd9f 	bl	8008d24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	b29b      	uxth	r3, r3
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	4613      	mov	r3, r2
 800820a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f864 	bl	80082de <USBH_GetDescriptor>
 8008216:	4603      	mov	r3, r0
 8008218:	73fb      	strb	r3, [r7, #15]
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800822c:	78fa      	ldrb	r2, [r7, #3]
 800822e:	b292      	uxth	r2, r2
 8008230:	4619      	mov	r1, r3
 8008232:	f000 f918 	bl	8008466 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af02      	add	r7, sp, #8
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	331c      	adds	r3, #28
 8008250:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008252:	887b      	ldrh	r3, [r7, #2]
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800825c:	2100      	movs	r1, #0
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f83d 	bl	80082de <USBH_GetDescriptor>
 8008264:	4603      	mov	r3, r0
 8008266:	72fb      	strb	r3, [r7, #11]
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d107      	bne.n	800827e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008274:	887a      	ldrh	r2, [r7, #2]
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 f964 	bl	8008546 <USBH_ParseCfgDesc>
  }

  return status;
 800827e:	7afb      	ldrb	r3, [r7, #11]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	461a      	mov	r2, r3
 8008294:	460b      	mov	r3, r1
 8008296:	72fb      	strb	r3, [r7, #11]
 8008298:	4613      	mov	r3, r2
 800829a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80082a4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80082ac:	893b      	ldrh	r3, [r7, #8]
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	460b      	mov	r3, r1
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f812 	bl	80082de <USBH_GetDescriptor>
 80082ba:	4603      	mov	r3, r0
 80082bc:	75fb      	strb	r3, [r7, #23]
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082ca:	893a      	ldrh	r2, [r7, #8]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fa37 	bl	8008742 <USBH_ParseStringDesc>
  }

  return status;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	607b      	str	r3, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	72fb      	strb	r3, [r7, #11]
 80082ec:	4613      	mov	r3, r2
 80082ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d11c      	bne.n	8008332 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2206      	movs	r2, #6
 8008308:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	893a      	ldrh	r2, [r7, #8]
 800830e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008310:	893b      	ldrh	r3, [r7, #8]
 8008312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800831a:	d104      	bne.n	8008326 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f240 4209 	movw	r2, #1033	; 0x409
 8008322:	829a      	strh	r2, [r3, #20]
 8008324:	e002      	b.n	800832c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8b3a      	ldrh	r2, [r7, #24]
 8008330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008332:	8b3b      	ldrh	r3, [r7, #24]
 8008334:	461a      	mov	r2, r3
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fa50 	bl	80087de <USBH_CtlReq>
 800833e:	4603      	mov	r3, r0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	789b      	ldrb	r3, [r3, #2]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10f      	bne.n	800837c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2205      	movs	r2, #5
 8008366:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	b29a      	uxth	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800837c:	2200      	movs	r2, #0
 800837e:	2100      	movs	r1, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa2c 	bl	80087de <USBH_CtlReq>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	789b      	ldrb	r3, [r3, #2]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d10e      	bne.n	80083c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2209      	movs	r2, #9
 80083ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	887a      	ldrh	r2, [r7, #2]
 80083b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083c2:	2200      	movs	r2, #0
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fa09 	bl	80087de <USBH_CtlReq>
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	789b      	ldrb	r3, [r3, #2]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d10f      	bne.n	800840a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2203      	movs	r2, #3
 80083f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f9e5 	bl	80087de <USBH_CtlReq>
 8008414:	4603      	mov	r3, r0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800841e:	b580      	push	{r7, lr}
 8008420:	b082      	sub	sp, #8
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	460b      	mov	r3, r1
 8008428:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	789b      	ldrb	r3, [r3, #2]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d10f      	bne.n	8008452 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008452:	2200      	movs	r2, #0
 8008454:	2100      	movs	r1, #0
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9c1 	bl	80087de <USBH_CtlReq>
 800845c:	4603      	mov	r3, r0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3708      	adds	r7, #8
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008466:	b480      	push	{r7}
 8008468:	b085      	sub	sp, #20
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	60b9      	str	r1, [r7, #8]
 8008470:	4613      	mov	r3, r2
 8008472:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	781a      	ldrb	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	785a      	ldrb	r2, [r3, #1]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	3302      	adds	r3, #2
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	b29a      	uxth	r2, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	3303      	adds	r3, #3
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b29b      	uxth	r3, r3
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	b29b      	uxth	r3, r3
 8008498:	4313      	orrs	r3, r2
 800849a:	b29a      	uxth	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	791a      	ldrb	r2, [r3, #4]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	795a      	ldrb	r2, [r3, #5]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	799a      	ldrb	r2, [r3, #6]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	79da      	ldrb	r2, [r3, #7]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b08      	cmp	r3, #8
 80084c4:	d939      	bls.n	800853a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3308      	adds	r3, #8
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3309      	adds	r3, #9
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	b29b      	uxth	r3, r3
 80084da:	4313      	orrs	r3, r2
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	330a      	adds	r3, #10
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	330b      	adds	r3, #11
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	330c      	adds	r3, #12
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b29a      	uxth	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	330d      	adds	r3, #13
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	021b      	lsls	r3, r3, #8
 8008510:	b29b      	uxth	r3, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	7b9a      	ldrb	r2, [r3, #14]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	7bda      	ldrb	r2, [r3, #15]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	7c1a      	ldrb	r2, [r3, #16]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	7c5a      	ldrb	r2, [r3, #17]
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	745a      	strb	r2, [r3, #17]
  }
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b08a      	sub	sp, #40	; 0x28
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	4613      	mov	r3, r2
 8008552:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	785a      	ldrb	r2, [r3, #1]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3302      	adds	r3, #2
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	b29a      	uxth	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	3303      	adds	r3, #3
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29b      	uxth	r3, r3
 800858c:	4313      	orrs	r3, r2
 800858e:	b29a      	uxth	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	791a      	ldrb	r2, [r3, #4]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	795a      	ldrb	r2, [r3, #5]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	799a      	ldrb	r2, [r3, #6]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	79da      	ldrb	r2, [r3, #7]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	7a1a      	ldrb	r2, [r3, #8]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085bc:	88fb      	ldrh	r3, [r7, #6]
 80085be:	2b09      	cmp	r3, #9
 80085c0:	d95f      	bls.n	8008682 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80085c2:	2309      	movs	r3, #9
 80085c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085ca:	e051      	b.n	8008670 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085cc:	f107 0316 	add.w	r3, r7, #22
 80085d0:	4619      	mov	r1, r3
 80085d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085d4:	f000 f8e8 	bl	80087a8 <USBH_GetNextDesc>
 80085d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d146      	bne.n	8008670 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80085e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e6:	221a      	movs	r2, #26
 80085e8:	fb02 f303 	mul.w	r3, r2, r3
 80085ec:	3308      	adds	r3, #8
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	4413      	add	r3, r2
 80085f2:	3302      	adds	r3, #2
 80085f4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085f8:	69f8      	ldr	r0, [r7, #28]
 80085fa:	f000 f846 	bl	800868a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008604:	2300      	movs	r3, #0
 8008606:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008608:	e022      	b.n	8008650 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800860a:	f107 0316 	add.w	r3, r7, #22
 800860e:	4619      	mov	r1, r3
 8008610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008612:	f000 f8c9 	bl	80087a8 <USBH_GetNextDesc>
 8008616:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	785b      	ldrb	r3, [r3, #1]
 800861c:	2b05      	cmp	r3, #5
 800861e:	d117      	bne.n	8008650 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008624:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008628:	3201      	adds	r2, #1
 800862a:	00d2      	lsls	r2, r2, #3
 800862c:	211a      	movs	r1, #26
 800862e:	fb01 f303 	mul.w	r3, r1, r3
 8008632:	4413      	add	r3, r2
 8008634:	3308      	adds	r3, #8
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	3304      	adds	r3, #4
 800863c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800863e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008640:	69b8      	ldr	r0, [r7, #24]
 8008642:	f000 f851 	bl	80086e8 <USBH_ParseEPDesc>
            ep_ix++;
 8008646:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800864a:	3301      	adds	r3, #1
 800864c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	791b      	ldrb	r3, [r3, #4]
 8008654:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008658:	429a      	cmp	r2, r3
 800865a:	d204      	bcs.n	8008666 <USBH_ParseCfgDesc+0x120>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	885a      	ldrh	r2, [r3, #2]
 8008660:	8afb      	ldrh	r3, [r7, #22]
 8008662:	429a      	cmp	r2, r3
 8008664:	d8d1      	bhi.n	800860a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008666:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800866a:	3301      	adds	r3, #1
 800866c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008674:	2b01      	cmp	r3, #1
 8008676:	d804      	bhi.n	8008682 <USBH_ParseCfgDesc+0x13c>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	885a      	ldrh	r2, [r3, #2]
 800867c:	8afb      	ldrh	r3, [r7, #22]
 800867e:	429a      	cmp	r2, r3
 8008680:	d8a4      	bhi.n	80085cc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008682:	bf00      	nop
 8008684:	3728      	adds	r7, #40	; 0x28
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800868a:	b480      	push	{r7}
 800868c:	b083      	sub	sp, #12
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781a      	ldrb	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	785a      	ldrb	r2, [r3, #1]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	789a      	ldrb	r2, [r3, #2]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	78da      	ldrb	r2, [r3, #3]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	791a      	ldrb	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	795a      	ldrb	r2, [r3, #5]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	799a      	ldrb	r2, [r3, #6]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	79da      	ldrb	r2, [r3, #7]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	7a1a      	ldrb	r2, [r3, #8]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	721a      	strb	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	785a      	ldrb	r2, [r3, #1]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	789a      	ldrb	r2, [r3, #2]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	78da      	ldrb	r2, [r3, #3]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	3304      	adds	r3, #4
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	3305      	adds	r3, #5
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	b29b      	uxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	799a      	ldrb	r2, [r3, #6]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	719a      	strb	r2, [r3, #6]
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008742:	b480      	push	{r7}
 8008744:	b087      	sub	sp, #28
 8008746:	af00      	add	r7, sp, #0
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4613      	mov	r3, r2
 800874e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3301      	adds	r3, #1
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d120      	bne.n	800879c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	1e9a      	subs	r2, r3, #2
 8008760:	88fb      	ldrh	r3, [r7, #6]
 8008762:	4293      	cmp	r3, r2
 8008764:	bf28      	it	cs
 8008766:	4613      	movcs	r3, r2
 8008768:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3302      	adds	r3, #2
 800876e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008770:	2300      	movs	r3, #0
 8008772:	82fb      	strh	r3, [r7, #22]
 8008774:	e00b      	b.n	800878e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008776:	8afb      	ldrh	r3, [r7, #22]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4413      	add	r3, r2
 800877c:	781a      	ldrb	r2, [r3, #0]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	3301      	adds	r3, #1
 8008786:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008788:	8afb      	ldrh	r3, [r7, #22]
 800878a:	3302      	adds	r3, #2
 800878c:	82fb      	strh	r3, [r7, #22]
 800878e:	8afa      	ldrh	r2, [r7, #22]
 8008790:	8abb      	ldrh	r3, [r7, #20]
 8008792:	429a      	cmp	r2, r3
 8008794:	d3ef      	bcc.n	8008776 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2200      	movs	r2, #0
 800879a:	701a      	strb	r2, [r3, #0]
  }
}
 800879c:	bf00      	nop
 800879e:	371c      	adds	r7, #28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	881a      	ldrh	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	4413      	add	r3, r2
 80087be:	b29a      	uxth	r2, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087d0:	68fb      	ldr	r3, [r7, #12]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b086      	sub	sp, #24
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	4613      	mov	r3, r2
 80087ea:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087ec:	2301      	movs	r3, #1
 80087ee:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	789b      	ldrb	r3, [r3, #2]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d002      	beq.n	80087fe <USBH_CtlReq+0x20>
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d00f      	beq.n	800881c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80087fc:	e027      	b.n	800884e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	88fa      	ldrh	r2, [r7, #6]
 8008808:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2202      	movs	r2, #2
 8008814:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]
      break;
 800881a:	e018      	b.n	800884e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f81b 	bl	8008858 <USBH_HandleControl>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008826:	7dfb      	ldrb	r3, [r7, #23]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <USBH_CtlReq+0x54>
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	2b03      	cmp	r3, #3
 8008830:	d106      	bne.n	8008840 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	761a      	strb	r2, [r3, #24]
      break;
 800883e:	e005      	b.n	800884c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d102      	bne.n	800884c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	709a      	strb	r2, [r3, #2]
      break;
 800884c:	bf00      	nop
  }
  return status;
 800884e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af02      	add	r7, sp, #8
 800885e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008860:	2301      	movs	r3, #1
 8008862:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008864:	2300      	movs	r3, #0
 8008866:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	7e1b      	ldrb	r3, [r3, #24]
 800886c:	3b01      	subs	r3, #1
 800886e:	2b0a      	cmp	r3, #10
 8008870:	f200 8158 	bhi.w	8008b24 <USBH_HandleControl+0x2cc>
 8008874:	a201      	add	r2, pc, #4	; (adr r2, 800887c <USBH_HandleControl+0x24>)
 8008876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887a:	bf00      	nop
 800887c:	080088a9 	.word	0x080088a9
 8008880:	080088c3 	.word	0x080088c3
 8008884:	0800892d 	.word	0x0800892d
 8008888:	08008953 	.word	0x08008953
 800888c:	0800898b 	.word	0x0800898b
 8008890:	080089b7 	.word	0x080089b7
 8008894:	08008a09 	.word	0x08008a09
 8008898:	08008a2b 	.word	0x08008a2b
 800889c:	08008a67 	.word	0x08008a67
 80088a0:	08008a8f 	.word	0x08008a8f
 80088a4:	08008acd 	.word	0x08008acd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f103 0110 	add.w	r1, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	795b      	ldrb	r3, [r3, #5]
 80088b2:	461a      	mov	r2, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f945 	bl	8008b44 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2202      	movs	r2, #2
 80088be:	761a      	strb	r2, [r3, #24]
      break;
 80088c0:	e13b      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	795b      	ldrb	r3, [r3, #5]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fcc5 	bl	8009258 <USBH_LL_GetURBState>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d11e      	bne.n	8008916 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	7c1b      	ldrb	r3, [r3, #16]
 80088dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	8adb      	ldrh	r3, [r3, #22]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088ea:	7b7b      	ldrb	r3, [r7, #13]
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d103      	bne.n	80088f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2203      	movs	r2, #3
 80088f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088f6:	e117      	b.n	8008b28 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2205      	movs	r2, #5
 80088fc:	761a      	strb	r2, [r3, #24]
      break;
 80088fe:	e113      	b.n	8008b28 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008900:	7b7b      	ldrb	r3, [r7, #13]
 8008902:	2b80      	cmp	r3, #128	; 0x80
 8008904:	d103      	bne.n	800890e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2209      	movs	r2, #9
 800890a:	761a      	strb	r2, [r3, #24]
      break;
 800890c:	e10c      	b.n	8008b28 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2207      	movs	r2, #7
 8008912:	761a      	strb	r2, [r3, #24]
      break;
 8008914:	e108      	b.n	8008b28 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	2b04      	cmp	r3, #4
 800891a:	d003      	beq.n	8008924 <USBH_HandleControl+0xcc>
 800891c:	7bbb      	ldrb	r3, [r7, #14]
 800891e:	2b02      	cmp	r3, #2
 8008920:	f040 8102 	bne.w	8008b28 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	220b      	movs	r2, #11
 8008928:	761a      	strb	r2, [r3, #24]
      break;
 800892a:	e0fd      	b.n	8008b28 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008932:	b29a      	uxth	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6899      	ldr	r1, [r3, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	899a      	ldrh	r2, [r3, #12]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	791b      	ldrb	r3, [r3, #4]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f93c 	bl	8008bc2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2204      	movs	r2, #4
 800894e:	761a      	strb	r2, [r3, #24]
      break;
 8008950:	e0f3      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	791b      	ldrb	r3, [r3, #4]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fc7d 	bl	8009258 <USBH_LL_GetURBState>
 800895e:	4603      	mov	r3, r0
 8008960:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d102      	bne.n	800896e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2209      	movs	r2, #9
 800896c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800896e:	7bbb      	ldrb	r3, [r7, #14]
 8008970:	2b05      	cmp	r3, #5
 8008972:	d102      	bne.n	800897a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008974:	2303      	movs	r3, #3
 8008976:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008978:	e0d8      	b.n	8008b2c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800897a:	7bbb      	ldrb	r3, [r7, #14]
 800897c:	2b04      	cmp	r3, #4
 800897e:	f040 80d5 	bne.w	8008b2c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	220b      	movs	r2, #11
 8008986:	761a      	strb	r2, [r3, #24]
      break;
 8008988:	e0d0      	b.n	8008b2c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6899      	ldr	r1, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	899a      	ldrh	r2, [r3, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	7958      	ldrb	r0, [r3, #5]
 8008996:	2301      	movs	r3, #1
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	4603      	mov	r3, r0
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f8eb 	bl	8008b78 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2206      	movs	r2, #6
 80089b2:	761a      	strb	r2, [r3, #24]
      break;
 80089b4:	e0c1      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	795b      	ldrb	r3, [r3, #5]
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fc4b 	bl	8009258 <USBH_LL_GetURBState>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d103      	bne.n	80089d4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2207      	movs	r2, #7
 80089d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089d2:	e0ad      	b.n	8008b30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d105      	bne.n	80089e6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	220c      	movs	r2, #12
 80089de:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089e0:	2303      	movs	r3, #3
 80089e2:	73fb      	strb	r3, [r7, #15]
      break;
 80089e4:	e0a4      	b.n	8008b30 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089e6:	7bbb      	ldrb	r3, [r7, #14]
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d103      	bne.n	80089f4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2205      	movs	r2, #5
 80089f0:	761a      	strb	r2, [r3, #24]
      break;
 80089f2:	e09d      	b.n	8008b30 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b04      	cmp	r3, #4
 80089f8:	f040 809a 	bne.w	8008b30 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	220b      	movs	r2, #11
 8008a00:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a02:	2302      	movs	r3, #2
 8008a04:	73fb      	strb	r3, [r7, #15]
      break;
 8008a06:	e093      	b.n	8008b30 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	791b      	ldrb	r3, [r3, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f8d6 	bl	8008bc2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2208      	movs	r2, #8
 8008a26:	761a      	strb	r2, [r3, #24]

      break;
 8008a28:	e087      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	791b      	ldrb	r3, [r3, #4]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc11 	bl	8009258 <USBH_LL_GetURBState>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a3a:	7bbb      	ldrb	r3, [r7, #14]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d105      	bne.n	8008a4c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	220d      	movs	r2, #13
 8008a44:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a4a:	e073      	b.n	8008b34 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b04      	cmp	r3, #4
 8008a50:	d103      	bne.n	8008a5a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	220b      	movs	r2, #11
 8008a56:	761a      	strb	r2, [r3, #24]
      break;
 8008a58:	e06c      	b.n	8008b34 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b05      	cmp	r3, #5
 8008a5e:	d169      	bne.n	8008b34 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008a60:	2303      	movs	r3, #3
 8008a62:	73fb      	strb	r3, [r7, #15]
      break;
 8008a64:	e066      	b.n	8008b34 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	795a      	ldrb	r2, [r3, #5]
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	2200      	movs	r2, #0
 8008a72:	2100      	movs	r1, #0
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f87f 	bl	8008b78 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	220a      	movs	r2, #10
 8008a8a:	761a      	strb	r2, [r3, #24]
      break;
 8008a8c:	e055      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	795b      	ldrb	r3, [r3, #5]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fbdf 	bl	8009258 <USBH_LL_GetURBState>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220d      	movs	r2, #13
 8008aac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008aae:	e043      	b.n	8008b38 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ab0:	7bbb      	ldrb	r3, [r7, #14]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d103      	bne.n	8008abe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2209      	movs	r2, #9
 8008aba:	761a      	strb	r2, [r3, #24]
      break;
 8008abc:	e03c      	b.n	8008b38 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d139      	bne.n	8008b38 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	220b      	movs	r2, #11
 8008ac8:	761a      	strb	r2, [r3, #24]
      break;
 8008aca:	e035      	b.n	8008b38 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	7e5b      	ldrb	r3, [r3, #25]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	765a      	strb	r2, [r3, #25]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7e5b      	ldrb	r3, [r3, #25]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d806      	bhi.n	8008aee <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008aec:	e025      	b.n	8008b3a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008af4:	2106      	movs	r1, #6
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	795b      	ldrb	r3, [r3, #5]
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f90c 	bl	8008d24 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f906 	bl	8008d24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	73fb      	strb	r3, [r7, #15]
      break;
 8008b22:	e00a      	b.n	8008b3a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008b24:	bf00      	nop
 8008b26:	e008      	b.n	8008b3a <USBH_HandleControl+0x2e2>
      break;
 8008b28:	bf00      	nop
 8008b2a:	e006      	b.n	8008b3a <USBH_HandleControl+0x2e2>
      break;
 8008b2c:	bf00      	nop
 8008b2e:	e004      	b.n	8008b3a <USBH_HandleControl+0x2e2>
      break;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <USBH_HandleControl+0x2e2>
      break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <USBH_HandleControl+0x2e2>
      break;
 8008b38:	bf00      	nop
  }

  return status;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af04      	add	r7, sp, #16
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b52:	79f9      	ldrb	r1, [r7, #7]
 8008b54:	2300      	movs	r3, #0
 8008b56:	9303      	str	r3, [sp, #12]
 8008b58:	2308      	movs	r3, #8
 8008b5a:	9302      	str	r3, [sp, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2300      	movs	r3, #0
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	2200      	movs	r2, #0
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fb44 	bl	80091f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3710      	adds	r7, #16
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af04      	add	r7, sp, #16
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	4611      	mov	r1, r2
 8008b84:	461a      	mov	r2, r3
 8008b86:	460b      	mov	r3, r1
 8008b88:	80fb      	strh	r3, [r7, #6]
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b9c:	7979      	ldrb	r1, [r7, #5]
 8008b9e:	7e3b      	ldrb	r3, [r7, #24]
 8008ba0:	9303      	str	r3, [sp, #12]
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	9302      	str	r3, [sp, #8]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	2301      	movs	r3, #1
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fb1f 	bl	80091f6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b088      	sub	sp, #32
 8008bc6:	af04      	add	r7, sp, #16
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	4611      	mov	r1, r2
 8008bce:	461a      	mov	r2, r3
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	80fb      	strh	r3, [r7, #6]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bd8:	7979      	ldrb	r1, [r7, #5]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	9301      	str	r3, [sp, #4]
 8008be6:	2301      	movs	r3, #1
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	2300      	movs	r3, #0
 8008bec:	2201      	movs	r2, #1
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 fb01 	bl	80091f6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008bf4:	2300      	movs	r3, #0

}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b088      	sub	sp, #32
 8008c02:	af04      	add	r7, sp, #16
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	80fb      	strh	r3, [r7, #6]
 8008c10:	4613      	mov	r3, r2
 8008c12:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c22:	7979      	ldrb	r1, [r7, #5]
 8008c24:	7e3b      	ldrb	r3, [r7, #24]
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	2301      	movs	r3, #1
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	2302      	movs	r3, #2
 8008c36:	2200      	movs	r2, #0
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fadc 	bl	80091f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af04      	add	r7, sp, #16
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	460b      	mov	r3, r1
 8008c58:	80fb      	strh	r3, [r7, #6]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c5e:	7979      	ldrb	r1, [r7, #5]
 8008c60:	2300      	movs	r3, #0
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	2302      	movs	r3, #2
 8008c72:	2201      	movs	r2, #1
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 fabe 	bl	80091f6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af04      	add	r7, sp, #16
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	461a      	mov	r2, r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	70fb      	strb	r3, [r7, #3]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70bb      	strb	r3, [r7, #2]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c9e:	7878      	ldrb	r0, [r7, #1]
 8008ca0:	78ba      	ldrb	r2, [r7, #2]
 8008ca2:	78f9      	ldrb	r1, [r7, #3]
 8008ca4:	8b3b      	ldrh	r3, [r7, #24]
 8008ca6:	9302      	str	r3, [sp, #8]
 8008ca8:	7d3b      	ldrb	r3, [r7, #20]
 8008caa:	9301      	str	r3, [sp, #4]
 8008cac:	7c3b      	ldrb	r3, [r7, #16]
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fa51 	bl	800915a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa70 	bl	80091b8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b084      	sub	sp, #16
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f836 	bl	8008d60 <USBH_GetFreePipe>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008cf8:	89fb      	ldrh	r3, [r7, #14]
 8008cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00a      	beq.n	8008d18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008d02:	78fa      	ldrb	r2, [r7, #3]
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	33e0      	adds	r3, #224	; 0xe0
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	440b      	add	r3, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d18:	89fb      	ldrh	r3, [r7, #14]
 8008d1a:	b2db      	uxtb	r3, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	2b0a      	cmp	r3, #10
 8008d34:	d80d      	bhi.n	8008d52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	33e0      	adds	r3, #224	; 0xe0
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	33e0      	adds	r3, #224	; 0xe0
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e00f      	b.n	8008d92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	33e0      	adds	r3, #224	; 0xe0
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	e007      	b.n	8008d9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b0a      	cmp	r3, #10
 8008d96:	d9ec      	bls.n	8008d72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008dac:	2201      	movs	r2, #1
 8008dae:	490e      	ldr	r1, [pc, #56]	; (8008de8 <MX_USB_HOST_Init+0x40>)
 8008db0:	480e      	ldr	r0, [pc, #56]	; (8008dec <MX_USB_HOST_Init+0x44>)
 8008db2:	f7fe fc9f 	bl	80076f4 <USBH_Init>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008dbc:	f7f7 fe2c 	bl	8000a18 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008dc0:	490b      	ldr	r1, [pc, #44]	; (8008df0 <MX_USB_HOST_Init+0x48>)
 8008dc2:	480a      	ldr	r0, [pc, #40]	; (8008dec <MX_USB_HOST_Init+0x44>)
 8008dc4:	f7fe fd24 	bl	8007810 <USBH_RegisterClass>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008dce:	f7f7 fe23 	bl	8000a18 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008dd2:	4806      	ldr	r0, [pc, #24]	; (8008dec <MX_USB_HOST_Init+0x44>)
 8008dd4:	f7fe fda8 	bl	8007928 <USBH_Start>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008dde:	f7f7 fe1b 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008de2:	bf00      	nop
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	08008e09 	.word	0x08008e09
 8008dec:	200001bc 	.word	0x200001bc
 8008df0:	2000000c 	.word	0x2000000c

08008df4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008df8:	4802      	ldr	r0, [pc, #8]	; (8008e04 <MX_USB_HOST_Process+0x10>)
 8008dfa:	f7fe fda5 	bl	8007948 <USBH_Process>
}
 8008dfe:	bf00      	nop
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200001bc 	.word	0x200001bc

08008e08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d819      	bhi.n	8008e50 <USBH_UserProcess+0x48>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBH_UserProcess+0x1c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e51 	.word	0x08008e51
 8008e28:	08008e41 	.word	0x08008e41
 8008e2c:	08008e51 	.word	0x08008e51
 8008e30:	08008e49 	.word	0x08008e49
 8008e34:	08008e39 	.word	0x08008e39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <USBH_UserProcess+0x58>)
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	701a      	strb	r2, [r3, #0]
  break;
 8008e3e:	e008      	b.n	8008e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e40:	4b07      	ldr	r3, [pc, #28]	; (8008e60 <USBH_UserProcess+0x58>)
 8008e42:	2202      	movs	r2, #2
 8008e44:	701a      	strb	r2, [r3, #0]
  break;
 8008e46:	e004      	b.n	8008e52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e48:	4b05      	ldr	r3, [pc, #20]	; (8008e60 <USBH_UserProcess+0x58>)
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
  break;
 8008e4e:	e000      	b.n	8008e52 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	200000b4 	.word	0x200000b4

08008e64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08a      	sub	sp, #40	; 0x28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e6c:	f107 0314 	add.w	r3, r7, #20
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	605a      	str	r2, [r3, #4]
 8008e76:	609a      	str	r2, [r3, #8]
 8008e78:	60da      	str	r2, [r3, #12]
 8008e7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e84:	d147      	bne.n	8008f16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e86:	2300      	movs	r3, #0
 8008e88:	613b      	str	r3, [r7, #16]
 8008e8a:	4b25      	ldr	r3, [pc, #148]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e8e:	4a24      	ldr	r2, [pc, #144]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008e90:	f043 0301 	orr.w	r3, r3, #1
 8008e94:	6313      	str	r3, [r2, #48]	; 0x30
 8008e96:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008ea2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	481b      	ldr	r0, [pc, #108]	; (8008f24 <HAL_HCD_MspInit+0xc0>)
 8008eb8:	f7f8 f976 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ebc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ece:	230a      	movs	r3, #10
 8008ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ed2:	f107 0314 	add.w	r3, r7, #20
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4812      	ldr	r0, [pc, #72]	; (8008f24 <HAL_HCD_MspInit+0xc0>)
 8008eda:	f7f8 f965 	bl	80011a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008ede:	4b10      	ldr	r3, [pc, #64]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee2:	4a0f      	ldr	r2, [pc, #60]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ee8:	6353      	str	r3, [r2, #52]	; 0x34
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef2:	4a0b      	ldr	r2, [pc, #44]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8008efa:	4b09      	ldr	r3, [pc, #36]	; (8008f20 <HAL_HCD_MspInit+0xbc>)
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f02:	60fb      	str	r3, [r7, #12]
 8008f04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f06:	2200      	movs	r2, #0
 8008f08:	2100      	movs	r1, #0
 8008f0a:	2043      	movs	r0, #67	; 0x43
 8008f0c:	f7f8 f8e5 	bl	80010da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f10:	2043      	movs	r0, #67	; 0x43
 8008f12:	f7f8 f8fe 	bl	8001112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f16:	bf00      	nop
 8008f18:	3728      	adds	r7, #40	; 0x28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	40023800 	.word	0x40023800
 8008f24:	40020000 	.word	0x40020000

08008f28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff f8d9 	bl	80080ee <USBH_LL_IncTimer>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff f911 	bl	800817a <USBH_LL_Connect>
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff f91a 	bl	80081a8 <USBH_LL_Disconnect>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff f8cb 	bl	8008142 <USBH_LL_PortEnabled>
}
 8008fac:	bf00      	nop
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff f8cb 	bl	800815e <USBH_LL_PortDisabled>
}
 8008fc8:	bf00      	nop
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d12a      	bne.n	8009038 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008fe2:	4a18      	ldr	r2, [pc, #96]	; (8009044 <USBH_LL_Init+0x74>)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a15      	ldr	r2, [pc, #84]	; (8009044 <USBH_LL_Init+0x74>)
 8008fee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ff2:	4b14      	ldr	r3, [pc, #80]	; (8009044 <USBH_LL_Init+0x74>)
 8008ff4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ff8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008ffa:	4b12      	ldr	r3, [pc, #72]	; (8009044 <USBH_LL_Init+0x74>)
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <USBH_LL_Init+0x74>)
 8009002:	2201      	movs	r2, #1
 8009004:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <USBH_LL_Init+0x74>)
 8009008:	2200      	movs	r2, #0
 800900a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <USBH_LL_Init+0x74>)
 800900e:	2202      	movs	r2, #2
 8009010:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <USBH_LL_Init+0x74>)
 8009014:	2200      	movs	r2, #0
 8009016:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009018:	480a      	ldr	r0, [pc, #40]	; (8009044 <USBH_LL_Init+0x74>)
 800901a:	f7f8 fa93 	bl	8001544 <HAL_HCD_Init>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009024:	f7f7 fcf8 	bl	8000a18 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009028:	4806      	ldr	r0, [pc, #24]	; (8009044 <USBH_LL_Init+0x74>)
 800902a:	f7f8 fe97 	bl	8001d5c <HAL_HCD_GetCurrentFrame>
 800902e:	4603      	mov	r3, r0
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff f84c 	bl	80080d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000594 	.word	0x20000594

08009048 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800905e:	4618      	mov	r0, r3
 8009060:	f7f8 fe04 	bl	8001c6c <HAL_HCD_Start>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009068:	7bfb      	ldrb	r3, [r7, #15]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 f95c 	bl	8009328 <USBH_Get_USB_Status>
 8009070:	4603      	mov	r3, r0
 8009072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009074:	7bbb      	ldrb	r3, [r7, #14]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009094:	4618      	mov	r0, r3
 8009096:	f7f8 fe0c 	bl	8001cb2 <HAL_HCD_Stop>
 800909a:	4603      	mov	r3, r0
 800909c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800909e:	7bfb      	ldrb	r3, [r7, #15]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 f941 	bl	8009328 <USBH_Get_USB_Status>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80090bc:	2301      	movs	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f8 fe56 	bl	8001d78 <HAL_HCD_GetCurrentSpeed>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d007      	beq.n	80090e2 <USBH_LL_GetSpeed+0x2e>
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d302      	bcc.n	80090dc <USBH_LL_GetSpeed+0x28>
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d006      	beq.n	80090e8 <USBH_LL_GetSpeed+0x34>
 80090da:	e008      	b.n	80090ee <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]
    break;
 80090e0:	e008      	b.n	80090f4 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
    break;
 80090e6:	e005      	b.n	80090f4 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80090e8:	2302      	movs	r3, #2
 80090ea:	73fb      	strb	r3, [r7, #15]
    break;
 80090ec:	e002      	b.n	80090f4 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80090ee:	2301      	movs	r3, #1
 80090f0:	73fb      	strb	r3, [r7, #15]
    break;
 80090f2:	bf00      	nop
  }
  return  speed;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009114:	4618      	mov	r0, r3
 8009116:	f7f8 fde9 	bl	8001cec <HAL_HCD_ResetPort>
 800911a:	4603      	mov	r3, r0
 800911c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 f901 	bl	8009328 <USBH_Get_USB_Status>
 8009126:	4603      	mov	r3, r0
 8009128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912a:	7bbb      	ldrb	r3, [r7, #14]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	460b      	mov	r3, r1
 800913e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	4611      	mov	r1, r2
 800914a:	4618      	mov	r0, r3
 800914c:	f7f8 fdf1 	bl	8001d32 <HAL_HCD_HC_GetXferCount>
 8009150:	4603      	mov	r3, r0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800915a:	b590      	push	{r4, r7, lr}
 800915c:	b089      	sub	sp, #36	; 0x24
 800915e:	af04      	add	r7, sp, #16
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	461a      	mov	r2, r3
 8009168:	4603      	mov	r3, r0
 800916a:	70fb      	strb	r3, [r7, #3]
 800916c:	460b      	mov	r3, r1
 800916e:	70bb      	strb	r3, [r7, #2]
 8009170:	4613      	mov	r3, r2
 8009172:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009182:	787c      	ldrb	r4, [r7, #1]
 8009184:	78ba      	ldrb	r2, [r7, #2]
 8009186:	78f9      	ldrb	r1, [r7, #3]
 8009188:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800918a:	9302      	str	r3, [sp, #8]
 800918c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	4623      	mov	r3, r4
 800919a:	f7f8 fa35 	bl	8001608 <HAL_HCD_HC_Init>
 800919e:	4603      	mov	r3, r0
 80091a0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 f8bf 	bl	8009328 <USBH_Get_USB_Status>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd90      	pop	{r4, r7, pc}

080091b8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	460b      	mov	r3, r1
 80091c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c4:	2300      	movs	r3, #0
 80091c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f8 faae 	bl	8001738 <HAL_HCD_HC_Halt>
 80091dc:	4603      	mov	r3, r0
 80091de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 f8a0 	bl	8009328 <USBH_Get_USB_Status>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80091f6:	b590      	push	{r4, r7, lr}
 80091f8:	b089      	sub	sp, #36	; 0x24
 80091fa:	af04      	add	r7, sp, #16
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	4608      	mov	r0, r1
 8009200:	4611      	mov	r1, r2
 8009202:	461a      	mov	r2, r3
 8009204:	4603      	mov	r3, r0
 8009206:	70fb      	strb	r3, [r7, #3]
 8009208:	460b      	mov	r3, r1
 800920a:	70bb      	strb	r3, [r7, #2]
 800920c:	4613      	mov	r3, r2
 800920e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800921e:	787c      	ldrb	r4, [r7, #1]
 8009220:	78ba      	ldrb	r2, [r7, #2]
 8009222:	78f9      	ldrb	r1, [r7, #3]
 8009224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4623      	mov	r3, r4
 800923a:	f7f8 faa1 	bl	8001780 <HAL_HCD_HC_SubmitRequest>
 800923e:	4603      	mov	r3, r0
 8009240:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009242:	7bfb      	ldrb	r3, [r7, #15]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f86f 	bl	8009328 <USBH_Get_USB_Status>
 800924a:	4603      	mov	r3, r0
 800924c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800924e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009250:	4618      	mov	r0, r3
 8009252:	3714      	adds	r7, #20
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	4611      	mov	r1, r2
 800926e:	4618      	mov	r0, r3
 8009270:	f7f8 fd4a 	bl	8001d08 <HAL_HCD_HC_GetURBState>
 8009274:	4603      	mov	r3, r0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009290:	2b01      	cmp	r3, #1
 8009292:	d103      	bne.n	800929c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	4618      	mov	r0, r3
 8009298:	f000 f872 	bl	8009380 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800929c:	20c8      	movs	r0, #200	; 0xc8
 800929e:	f7f7 fe1f 	bl	8000ee0 <HAL_Delay>
  return USBH_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	4613      	mov	r3, r2
 80092ba:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092c2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092c4:	78fa      	ldrb	r2, [r7, #3]
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	440b      	add	r3, r1
 80092d2:	333b      	adds	r3, #59	; 0x3b
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	68f9      	ldr	r1, [r7, #12]
 80092de:	4613      	mov	r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	00db      	lsls	r3, r3, #3
 80092e6:	440b      	add	r3, r1
 80092e8:	3350      	adds	r3, #80	; 0x50
 80092ea:	78ba      	ldrb	r2, [r7, #2]
 80092ec:	701a      	strb	r2, [r3, #0]
 80092ee:	e009      	b.n	8009304 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80092f0:	78fa      	ldrb	r2, [r7, #3]
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	00db      	lsls	r3, r3, #3
 80092fc:	440b      	add	r3, r1
 80092fe:	3351      	adds	r3, #81	; 0x51
 8009300:	78ba      	ldrb	r2, [r7, #2]
 8009302:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7f7 fde0 	bl	8000ee0 <HAL_Delay>
}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009332:	2300      	movs	r3, #0
 8009334:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d817      	bhi.n	800936c <USBH_Get_USB_Status+0x44>
 800933c:	a201      	add	r2, pc, #4	; (adr r2, 8009344 <USBH_Get_USB_Status+0x1c>)
 800933e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009342:	bf00      	nop
 8009344:	08009355 	.word	0x08009355
 8009348:	0800935b 	.word	0x0800935b
 800934c:	08009361 	.word	0x08009361
 8009350:	08009367 	.word	0x08009367
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73fb      	strb	r3, [r7, #15]
    break;
 8009358:	e00b      	b.n	8009372 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800935a:	2302      	movs	r3, #2
 800935c:	73fb      	strb	r3, [r7, #15]
    break;
 800935e:	e008      	b.n	8009372 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009360:	2301      	movs	r3, #1
 8009362:	73fb      	strb	r3, [r7, #15]
    break;
 8009364:	e005      	b.n	8009372 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009366:	2302      	movs	r3, #2
 8009368:	73fb      	strb	r3, [r7, #15]
    break;
 800936a:	e002      	b.n	8009372 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800936c:	2302      	movs	r3, #2
 800936e:	73fb      	strb	r3, [r7, #15]
    break;
 8009370:	bf00      	nop
  }
  return usb_status;
 8009372:	7bfb      	ldrb	r3, [r7, #15]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3714      	adds	r7, #20
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
 8009398:	e001      	b.n	800939e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	461a      	mov	r2, r3
 80093a2:	2101      	movs	r1, #1
 80093a4:	4803      	ldr	r0, [pc, #12]	; (80093b4 <MX_DriverVbusFS+0x34>)
 80093a6:	f7f8 f899 	bl	80014dc <HAL_GPIO_WritePin>
}
 80093aa:	bf00      	nop
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	40020800 	.word	0x40020800

080093b8 <__errno>:
 80093b8:	4b01      	ldr	r3, [pc, #4]	; (80093c0 <__errno+0x8>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	2000002c 	.word	0x2000002c

080093c4 <__libc_init_array>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4e0d      	ldr	r6, [pc, #52]	; (80093fc <__libc_init_array+0x38>)
 80093c8:	4c0d      	ldr	r4, [pc, #52]	; (8009400 <__libc_init_array+0x3c>)
 80093ca:	1ba4      	subs	r4, r4, r6
 80093cc:	10a4      	asrs	r4, r4, #2
 80093ce:	2500      	movs	r5, #0
 80093d0:	42a5      	cmp	r5, r4
 80093d2:	d109      	bne.n	80093e8 <__libc_init_array+0x24>
 80093d4:	4e0b      	ldr	r6, [pc, #44]	; (8009404 <__libc_init_array+0x40>)
 80093d6:	4c0c      	ldr	r4, [pc, #48]	; (8009408 <__libc_init_array+0x44>)
 80093d8:	f000 f8ea 	bl	80095b0 <_init>
 80093dc:	1ba4      	subs	r4, r4, r6
 80093de:	10a4      	asrs	r4, r4, #2
 80093e0:	2500      	movs	r5, #0
 80093e2:	42a5      	cmp	r5, r4
 80093e4:	d105      	bne.n	80093f2 <__libc_init_array+0x2e>
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
 80093e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093ec:	4798      	blx	r3
 80093ee:	3501      	adds	r5, #1
 80093f0:	e7ee      	b.n	80093d0 <__libc_init_array+0xc>
 80093f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093f6:	4798      	blx	r3
 80093f8:	3501      	adds	r5, #1
 80093fa:	e7f2      	b.n	80093e2 <__libc_init_array+0x1e>
 80093fc:	080095ec 	.word	0x080095ec
 8009400:	080095ec 	.word	0x080095ec
 8009404:	080095ec 	.word	0x080095ec
 8009408:	080095f0 	.word	0x080095f0

0800940c <malloc>:
 800940c:	4b02      	ldr	r3, [pc, #8]	; (8009418 <malloc+0xc>)
 800940e:	4601      	mov	r1, r0
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	f000 b861 	b.w	80094d8 <_malloc_r>
 8009416:	bf00      	nop
 8009418:	2000002c 	.word	0x2000002c

0800941c <free>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <free+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f000 b80b 	b.w	800943c <_free_r>
 8009426:	bf00      	nop
 8009428:	2000002c 	.word	0x2000002c

0800942c <memset>:
 800942c:	4402      	add	r2, r0
 800942e:	4603      	mov	r3, r0
 8009430:	4293      	cmp	r3, r2
 8009432:	d100      	bne.n	8009436 <memset+0xa>
 8009434:	4770      	bx	lr
 8009436:	f803 1b01 	strb.w	r1, [r3], #1
 800943a:	e7f9      	b.n	8009430 <memset+0x4>

0800943c <_free_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4605      	mov	r5, r0
 8009440:	2900      	cmp	r1, #0
 8009442:	d045      	beq.n	80094d0 <_free_r+0x94>
 8009444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009448:	1f0c      	subs	r4, r1, #4
 800944a:	2b00      	cmp	r3, #0
 800944c:	bfb8      	it	lt
 800944e:	18e4      	addlt	r4, r4, r3
 8009450:	f000 f8ac 	bl	80095ac <__malloc_lock>
 8009454:	4a1f      	ldr	r2, [pc, #124]	; (80094d4 <_free_r+0x98>)
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	4610      	mov	r0, r2
 800945a:	b933      	cbnz	r3, 800946a <_free_r+0x2e>
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	6014      	str	r4, [r2, #0]
 8009460:	4628      	mov	r0, r5
 8009462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009466:	f000 b8a2 	b.w	80095ae <__malloc_unlock>
 800946a:	42a3      	cmp	r3, r4
 800946c:	d90c      	bls.n	8009488 <_free_r+0x4c>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	1862      	adds	r2, r4, r1
 8009472:	4293      	cmp	r3, r2
 8009474:	bf04      	itt	eq
 8009476:	681a      	ldreq	r2, [r3, #0]
 8009478:	685b      	ldreq	r3, [r3, #4]
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	bf04      	itt	eq
 800947e:	1852      	addeq	r2, r2, r1
 8009480:	6022      	streq	r2, [r4, #0]
 8009482:	6004      	str	r4, [r0, #0]
 8009484:	e7ec      	b.n	8009460 <_free_r+0x24>
 8009486:	4613      	mov	r3, r2
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	b10a      	cbz	r2, 8009490 <_free_r+0x54>
 800948c:	42a2      	cmp	r2, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x4a>
 8009490:	6819      	ldr	r1, [r3, #0]
 8009492:	1858      	adds	r0, r3, r1
 8009494:	42a0      	cmp	r0, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x74>
 8009498:	6820      	ldr	r0, [r4, #0]
 800949a:	4401      	add	r1, r0
 800949c:	1858      	adds	r0, r3, r1
 800949e:	4282      	cmp	r2, r0
 80094a0:	6019      	str	r1, [r3, #0]
 80094a2:	d1dd      	bne.n	8009460 <_free_r+0x24>
 80094a4:	6810      	ldr	r0, [r2, #0]
 80094a6:	6852      	ldr	r2, [r2, #4]
 80094a8:	605a      	str	r2, [r3, #4]
 80094aa:	4401      	add	r1, r0
 80094ac:	6019      	str	r1, [r3, #0]
 80094ae:	e7d7      	b.n	8009460 <_free_r+0x24>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x7c>
 80094b2:	230c      	movs	r3, #12
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	e7d3      	b.n	8009460 <_free_r+0x24>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	1821      	adds	r1, r4, r0
 80094bc:	428a      	cmp	r2, r1
 80094be:	bf04      	itt	eq
 80094c0:	6811      	ldreq	r1, [r2, #0]
 80094c2:	6852      	ldreq	r2, [r2, #4]
 80094c4:	6062      	str	r2, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1809      	addeq	r1, r1, r0
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	605c      	str	r4, [r3, #4]
 80094ce:	e7c7      	b.n	8009460 <_free_r+0x24>
 80094d0:	bd38      	pop	{r3, r4, r5, pc}
 80094d2:	bf00      	nop
 80094d4:	200000b8 	.word	0x200000b8

080094d8 <_malloc_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	1ccd      	adds	r5, r1, #3
 80094dc:	f025 0503 	bic.w	r5, r5, #3
 80094e0:	3508      	adds	r5, #8
 80094e2:	2d0c      	cmp	r5, #12
 80094e4:	bf38      	it	cc
 80094e6:	250c      	movcc	r5, #12
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	4606      	mov	r6, r0
 80094ec:	db01      	blt.n	80094f2 <_malloc_r+0x1a>
 80094ee:	42a9      	cmp	r1, r5
 80094f0:	d903      	bls.n	80094fa <_malloc_r+0x22>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	2000      	movs	r0, #0
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
 80094fa:	f000 f857 	bl	80095ac <__malloc_lock>
 80094fe:	4a21      	ldr	r2, [pc, #132]	; (8009584 <_malloc_r+0xac>)
 8009500:	6814      	ldr	r4, [r2, #0]
 8009502:	4621      	mov	r1, r4
 8009504:	b991      	cbnz	r1, 800952c <_malloc_r+0x54>
 8009506:	4c20      	ldr	r4, [pc, #128]	; (8009588 <_malloc_r+0xb0>)
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	b91b      	cbnz	r3, 8009514 <_malloc_r+0x3c>
 800950c:	4630      	mov	r0, r6
 800950e:	f000 f83d 	bl	800958c <_sbrk_r>
 8009512:	6020      	str	r0, [r4, #0]
 8009514:	4629      	mov	r1, r5
 8009516:	4630      	mov	r0, r6
 8009518:	f000 f838 	bl	800958c <_sbrk_r>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d124      	bne.n	800956a <_malloc_r+0x92>
 8009520:	230c      	movs	r3, #12
 8009522:	6033      	str	r3, [r6, #0]
 8009524:	4630      	mov	r0, r6
 8009526:	f000 f842 	bl	80095ae <__malloc_unlock>
 800952a:	e7e4      	b.n	80094f6 <_malloc_r+0x1e>
 800952c:	680b      	ldr	r3, [r1, #0]
 800952e:	1b5b      	subs	r3, r3, r5
 8009530:	d418      	bmi.n	8009564 <_malloc_r+0x8c>
 8009532:	2b0b      	cmp	r3, #11
 8009534:	d90f      	bls.n	8009556 <_malloc_r+0x7e>
 8009536:	600b      	str	r3, [r1, #0]
 8009538:	50cd      	str	r5, [r1, r3]
 800953a:	18cc      	adds	r4, r1, r3
 800953c:	4630      	mov	r0, r6
 800953e:	f000 f836 	bl	80095ae <__malloc_unlock>
 8009542:	f104 000b 	add.w	r0, r4, #11
 8009546:	1d23      	adds	r3, r4, #4
 8009548:	f020 0007 	bic.w	r0, r0, #7
 800954c:	1ac3      	subs	r3, r0, r3
 800954e:	d0d3      	beq.n	80094f8 <_malloc_r+0x20>
 8009550:	425a      	negs	r2, r3
 8009552:	50e2      	str	r2, [r4, r3]
 8009554:	e7d0      	b.n	80094f8 <_malloc_r+0x20>
 8009556:	428c      	cmp	r4, r1
 8009558:	684b      	ldr	r3, [r1, #4]
 800955a:	bf16      	itet	ne
 800955c:	6063      	strne	r3, [r4, #4]
 800955e:	6013      	streq	r3, [r2, #0]
 8009560:	460c      	movne	r4, r1
 8009562:	e7eb      	b.n	800953c <_malloc_r+0x64>
 8009564:	460c      	mov	r4, r1
 8009566:	6849      	ldr	r1, [r1, #4]
 8009568:	e7cc      	b.n	8009504 <_malloc_r+0x2c>
 800956a:	1cc4      	adds	r4, r0, #3
 800956c:	f024 0403 	bic.w	r4, r4, #3
 8009570:	42a0      	cmp	r0, r4
 8009572:	d005      	beq.n	8009580 <_malloc_r+0xa8>
 8009574:	1a21      	subs	r1, r4, r0
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f808 	bl	800958c <_sbrk_r>
 800957c:	3001      	adds	r0, #1
 800957e:	d0cf      	beq.n	8009520 <_malloc_r+0x48>
 8009580:	6025      	str	r5, [r4, #0]
 8009582:	e7db      	b.n	800953c <_malloc_r+0x64>
 8009584:	200000b8 	.word	0x200000b8
 8009588:	200000bc 	.word	0x200000bc

0800958c <_sbrk_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4c06      	ldr	r4, [pc, #24]	; (80095a8 <_sbrk_r+0x1c>)
 8009590:	2300      	movs	r3, #0
 8009592:	4605      	mov	r5, r0
 8009594:	4608      	mov	r0, r1
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	f7f7 fbba 	bl	8000d10 <_sbrk>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_sbrk_r+0x1a>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_sbrk_r+0x1a>
 80095a4:	602b      	str	r3, [r5, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	20000858 	.word	0x20000858

080095ac <__malloc_lock>:
 80095ac:	4770      	bx	lr

080095ae <__malloc_unlock>:
 80095ae:	4770      	bx	lr

080095b0 <_init>:
 80095b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b2:	bf00      	nop
 80095b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b6:	bc08      	pop	{r3}
 80095b8:	469e      	mov	lr, r3
 80095ba:	4770      	bx	lr

080095bc <_fini>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr
