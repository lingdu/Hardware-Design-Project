
STM32F407-I2C_slave_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f4  080094f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094fc  080094fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094fc  080094fc  000194fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  08009594  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08009594  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197f7  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037d6  00000000  00000000  000398b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003d090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ab1  00000000  00000000  0003f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a1f  00000000  00000000  00062d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb0d8  00000000  00000000  00074790  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f868  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  0013f8e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080094c0 	.word	0x080094c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080094c0 	.word	0x080094c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_I2C_AddrCallback>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_I2C_AddrCallback+0x2c>)
 80004de:	f001 f80e 	bl	80014fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <HAL_I2C_AddrCallback+0x2c>)
 80004e8:	f001 f809 	bl	80014fe <HAL_GPIO_TogglePin>
	if(TransferDirection==1) //master read
	{
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &i2c_send_slave, 1);
	}
	*/
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020c00 	.word	0x40020c00

080004f8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000504:	4807      	ldr	r0, [pc, #28]	; (8000524 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8000506:	f000 fffa 	bl	80014fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8000510:	f000 fff5 	bl	80014fe <HAL_GPIO_TogglePin>
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 8000516:	f002 fe37 	bl	8003188 <HAL_I2C_EnableListen_IT>

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40020c00 	.word	0x40020c00
 8000528:	200000c0 	.word	0x200000c0

0800052c <HAL_I2C_SlaveTxCpltCallback>:



void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 800053a:	f000 ffe0 	bl	80014fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800053e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000542:	4805      	ldr	r0, [pc, #20]	; (8000558 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 8000544:	f000 ffdb 	bl	80014fe <HAL_GPIO_TogglePin>
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000548:	4804      	ldr	r0, [pc, #16]	; (800055c <HAL_I2C_SlaveTxCpltCallback+0x30>)
 800054a:	f002 fe1d 	bl	8003188 <HAL_I2C_EnableListen_IT>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40020c00 	.word	0x40020c00
 800055c:	200000c0 	.word	0x200000c0

08000560 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // Restart
 8000568:	6878      	ldr	r0, [r7, #4]
 800056a:	f002 fe0d 	bl	8003188 <HAL_I2C_EnableListen_IT>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000576:	b580      	push	{r7, lr}
 8000578:	b082      	sub	sp, #8
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f003 f87e 	bl	8003680 <HAL_I2C_GetError>
 8000584:	4603      	mov	r3, r0
 8000586:	2b04      	cmp	r3, #4
 8000588:	d000      	beq.n	800058c <HAL_I2C_ErrorCallback+0x16>
		asm("nop");
 800058a:	bf00      	nop
	}
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc28 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f820 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f934 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a4:	f000 f89e 	bl	80006e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005a8:	f000 f8ca 	bl	8000740 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ac:	f000 f8f8 	bl	80007a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005b0:	f008 fb82 	bl	8008cb8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <main+0x44>)
 80005bc:	f000 ff86 	bl	80014cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <main+0x44>)
 80005c8:	f000 ff80 	bl	80014cc <HAL_GPIO_WritePin>

  HAL_I2C_EnableListen_IT(&hi2c1);
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0x48>)
 80005ce:	f002 fddb 	bl	8003188 <HAL_I2C_EnableListen_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d2:	f008 fb97 	bl	8008d04 <MX_USB_HOST_Process>
 80005d6:	e7fc      	b.n	80005d2 <main+0x3e>
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	200000c0 	.word	0x200000c0

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b098      	sub	sp, #96	; 0x60
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f008 fea4 	bl	800933c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <SystemClock_Config+0xfc>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	4a30      	ldr	r2, [pc, #192]	; (80006dc <SystemClock_Config+0xfc>)
 800061c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000620:	6413      	str	r3, [r2, #64]	; 0x40
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <SystemClock_Config+0xfc>)
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <SystemClock_Config+0x100>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <SystemClock_Config+0x100>)
 8000638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063c:	6013      	str	r3, [r2, #0]
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064a:	2301      	movs	r3, #1
 800064c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065e:	2308      	movs	r3, #8
 8000660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000662:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fee9 	bl	800544c <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000680:	f000 f9c2 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 f942 	bl	800592c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ae:	f000 f9ab 	bl	8000a08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006b2:	2301      	movs	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006b6:	23c0      	movs	r3, #192	; 0xc0
 80006b8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4618      	mov	r0, r3
 80006c4:	f005 fb10 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ce:	f000 f99b 	bl	8000a08 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3760      	adds	r7, #96	; 0x60
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_I2C1_Init+0x50>)
 80006ea:	4a13      	ldr	r2, [pc, #76]	; (8000738 <MX_I2C1_Init+0x54>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f0:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_I2C1_Init+0x58>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 64;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_I2C1_Init+0x50>)
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_I2C1_Init+0x50>)
 8000702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_I2C1_Init+0x50>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_I2C1_Init+0x50>)
 8000722:	f002 fbf9 	bl	8002f18 <HAL_I2C_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800072c:	f000 f96c 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000c0 	.word	0x200000c0
 8000738:	40005400 	.word	0x40005400
 800073c:	000186a0 	.word	0x000186a0

08000740 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_I2S3_Init+0x54>)
 8000746:	4a14      	ldr	r2, [pc, #80]	; (8000798 <MX_I2S3_Init+0x58>)
 8000748:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2S3_Init+0x54>)
 800074c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000750:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_I2S3_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000758:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2S3_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_I2S3_Init+0x54>)
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_I2S3_Init+0x54>)
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <MX_I2S3_Init+0x5c>)
 800076a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_I2S3_Init+0x54>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2S3_Init+0x54>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2S3_Init+0x54>)
 8000780:	f004 f9c4 	bl	8004b0c <HAL_I2S_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800078a:	f000 f93d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000016c 	.word	0x2000016c
 8000798:	40003c00 	.word	0x40003c00
 800079c:	00017700 	.word	0x00017700

080007a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f005 fbb7 	bl	8005f64 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 f904 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000114 	.word	0x20000114
 8000808:	40013000 	.word	0x40013000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
 8000826:	4b71      	ldr	r3, [pc, #452]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a70      	ldr	r2, [pc, #448]	; (80009ec <MX_GPIO_Init+0x1e0>)
 800082c:	f043 0310 	orr.w	r3, r3, #16
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b6e      	ldr	r3, [pc, #440]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0310 	and.w	r3, r3, #16
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	4b6a      	ldr	r3, [pc, #424]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a69      	ldr	r2, [pc, #420]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b67      	ldr	r3, [pc, #412]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	4b63      	ldr	r3, [pc, #396]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a62      	ldr	r2, [pc, #392]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b60      	ldr	r3, [pc, #384]	; (80009ec <MX_GPIO_Init+0x1e0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b5c      	ldr	r3, [pc, #368]	; (80009ec <MX_GPIO_Init+0x1e0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a5b      	ldr	r2, [pc, #364]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b59      	ldr	r3, [pc, #356]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	4b55      	ldr	r3, [pc, #340]	; (80009ec <MX_GPIO_Init+0x1e0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a54      	ldr	r2, [pc, #336]	; (80009ec <MX_GPIO_Init+0x1e0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b52      	ldr	r3, [pc, #328]	; (80009ec <MX_GPIO_Init+0x1e0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	4b4e      	ldr	r3, [pc, #312]	; (80009ec <MX_GPIO_Init+0x1e0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a4d      	ldr	r2, [pc, #308]	; (80009ec <MX_GPIO_Init+0x1e0>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <MX_GPIO_Init+0x1e0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4848      	ldr	r0, [pc, #288]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80008d0:	f000 fdfc 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2101      	movs	r1, #1
 80008d8:	4846      	ldr	r0, [pc, #280]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 80008da:	f000 fdf7 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 80008e6:	f000 fdf1 	bl	80014cc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ea:	2308      	movs	r3, #8
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 8000902:	f000 fc49 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000906:	2301      	movs	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4835      	ldr	r0, [pc, #212]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 800091e:	f000 fc3b 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000922:	2308      	movs	r3, #8
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	482d      	ldr	r0, [pc, #180]	; (80009f4 <MX_GPIO_Init+0x1e8>)
 800093e:	f000 fc2b 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000946:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <MX_GPIO_Init+0x1f0>)
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	482a      	ldr	r0, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x1f4>)
 8000956:	f000 fc1f 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 800096e:	f000 fc13 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000984:	2305      	movs	r3, #5
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <MX_GPIO_Init+0x1f8>)
 8000990:	f000 fc02 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000994:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000998:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 80009ae:	f000 fbf3 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	480c      	ldr	r0, [pc, #48]	; (80009f8 <MX_GPIO_Init+0x1ec>)
 80009c6:	f000 fbe7 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_GPIO_Init+0x1f0>)
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0x1e4>)
 80009de:	f000 fbdb 	bl	8001198 <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020c00 	.word	0x40020c00
 80009fc:	10120000 	.word	0x10120000
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <Error_Handler+0x6>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a24:	6453      	str	r3, [r2, #68]	; 0x44
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4e:	2007      	movs	r0, #7
 8000a50:	f000 fb30 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <HAL_I2C_MspInit+0xa4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d13b      	bne.n	8000afa <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a1f      	ldr	r2, [pc, #124]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a9e:	23c0      	movs	r3, #192	; 0xc0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa2:	2312      	movs	r3, #18
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4814      	ldr	r0, [pc, #80]	; (8000b0c <HAL_I2C_MspInit+0xac>)
 8000aba:	f000 fb6d 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_I2C_MspInit+0xa8>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	201f      	movs	r0, #31
 8000ae0:	f000 faf3 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ae4:	201f      	movs	r0, #31
 8000ae6:	f000 fb0c 	bl	8001102 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2020      	movs	r0, #32
 8000af0:	f000 faeb 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f000 fb04 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000afa:	bf00      	nop
 8000afc:	3728      	adds	r7, #40	; 0x28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40005400 	.word	0x40005400
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a28      	ldr	r2, [pc, #160]	; (8000bd0 <HAL_I2S_MspInit+0xc0>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d14a      	bne.n	8000bc8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b24      	ldr	r3, [pc, #144]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_I2S_MspInit+0xc4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b86:	2310      	movs	r3, #16
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b96:	2306      	movs	r3, #6
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <HAL_I2S_MspInit+0xc8>)
 8000ba2:	f000 faf9 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb8:	2306      	movs	r3, #6
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <HAL_I2S_MspInit+0xcc>)
 8000bc4:	f000 fae8 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020800 	.word	0x40020800

08000be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_SPI_MspInit+0x84>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d12b      	bne.n	8000c5a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_SPI_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3a:	23e0      	movs	r3, #224	; 0xe0
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4a:	2305      	movs	r3, #5
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_SPI_MspInit+0x8c>)
 8000c56:	f000 fa9f 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40013000 	.word	0x40013000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8e8 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <I2C1_EV_IRQHandler+0x10>)
 8000cca:	f002 fa93 	bl	80031f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000c0 	.word	0x200000c0

08000cd8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <I2C1_ER_IRQHandler+0x10>)
 8000cde:	f002 fbf6 	bl	80034ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000c0 	.word	0x200000c0

08000cec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <OTG_FS_IRQHandler+0x10>)
 8000cf2:	f000 feaf 	bl	8001a54 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000590 	.word	0x20000590

08000d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d08:	4a14      	ldr	r2, [pc, #80]	; (8000d5c <_sbrk+0x5c>)
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <_sbrk+0x60>)
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d102      	bne.n	8000d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <_sbrk+0x64>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <_sbrk+0x68>)
 8000d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d207      	bcs.n	8000d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d30:	f008 faca 	bl	80092c8 <__errno>
 8000d34:	4602      	mov	r2, r0
 8000d36:	230c      	movs	r3, #12
 8000d38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3e:	e009      	b.n	8000d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <_sbrk+0x64>)
 8000d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d52:	68fb      	ldr	r3, [r7, #12]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20020000 	.word	0x20020000
 8000d60:	00000400 	.word	0x00000400
 8000d64:	200000ac 	.word	0x200000ac
 8000d68:	20000858 	.word	0x20000858

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SystemInit+0x28>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <SystemInit+0x28>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SystemInit+0x28>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	609a      	str	r2, [r3, #8]
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d9e:	e003      	b.n	8000da8 <LoopCopyDataInit>

08000da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000da6:	3104      	adds	r1, #4

08000da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db0:	d3f6      	bcc.n	8000da0 <CopyDataInit>
  ldr  r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db4:	e002      	b.n	8000dbc <LoopFillZerobss>

08000db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000db8:	f842 3b04 	str.w	r3, [r2], #4

08000dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc0:	d3f9      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd3 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f008 fa85 	bl	80092d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fbe3 	bl	8000594 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd4:	08009504 	.word	0x08009504
  ldr  r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ddc:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000de0:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000de4:	20000858 	.word	0x20000858

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f94d 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fdf6 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f965 	bl	800111e <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f92d 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200001b4 	.word	0x200001b4

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001b4 	.word	0x200001b4

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_Delay+0x40>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d004      	beq.n	8001154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e00c      	b.n	800116e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2205      	movs	r2, #5
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001188:	b2db      	uxtb	r3, r3
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e16b      	b.n	800148c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 815a 	bne.w	8001486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d00b      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e6:	2b11      	cmp	r3, #17
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d130      	bne.n	8001254 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	2203      	movs	r2, #3
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 0201 	and.w	r2, r3, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0xfc>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b12      	cmp	r3, #18
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80b4 	beq.w	8001486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a5e      	ldr	r2, [pc, #376]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x310>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d02b      	beq.n	80013be <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x314>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d025      	beq.n	80013ba <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x318>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01f      	beq.n	80013b6 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d019      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d013      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4c      	ldr	r2, [pc, #304]	; (80014bc <HAL_GPIO_Init+0x324>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00d      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4b      	ldr	r2, [pc, #300]	; (80014c0 <HAL_GPIO_Init+0x328>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d007      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4a      	ldr	r2, [pc, #296]	; (80014c4 <HAL_GPIO_Init+0x32c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_GPIO_Init+0x20a>
 800139e:	2307      	movs	r3, #7
 80013a0:	e00e      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013a2:	2308      	movs	r3, #8
 80013a4:	e00c      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013a6:	2306      	movs	r3, #6
 80013a8:	e00a      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013aa:	2305      	movs	r3, #5
 80013ac:	e008      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013ae:	2304      	movs	r3, #4
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e004      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e002      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <HAL_GPIO_Init+0x228>
 80013be:	2300      	movs	r3, #0
 80013c0:	69fa      	ldr	r2, [r7, #28]
 80013c2:	f002 0203 	and.w	r2, r2, #3
 80013c6:	0092      	lsls	r2, r2, #2
 80013c8:	4093      	lsls	r3, r2
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d0:	4934      	ldr	r1, [pc, #208]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013de:	4b3a      	ldr	r3, [pc, #232]	; (80014c8 <HAL_GPIO_Init+0x330>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001432:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <HAL_GPIO_Init+0x330>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_GPIO_Init+0x330>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3301      	adds	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2b0f      	cmp	r3, #15
 8001490:	f67f ae90 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001494:	bf00      	nop
 8001496:	3724      	adds	r7, #36	; 0x24
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013800 	.word	0x40013800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400
 80014b0:	40020800 	.word	0x40020800
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40021400 	.word	0x40021400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021c00 	.word	0x40021c00
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	401a      	ands	r2, r3
 8001512:	887b      	ldrh	r3, [r7, #2]
 8001514:	429a      	cmp	r2, r3
 8001516:	d104      	bne.n	8001522 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	041a      	lsls	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001520:	e002      	b.n	8001528 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001522:	887a      	ldrh	r2, [r7, #2]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	b08f      	sub	sp, #60	; 0x3c
 8001538:	af0a      	add	r7, sp, #40	; 0x28
 800153a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e054      	b.n	80015f0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d106      	bne.n	8001566 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f007 fc07 	bl	8008d74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2203      	movs	r2, #3
 800156a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001576:	2b00      	cmp	r3, #0
 8001578:	d102      	bne.n	8001580 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fdc3 	bl	8006110 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	687e      	ldr	r6, [r7, #4]
 8001592:	466d      	mov	r5, sp
 8001594:	f106 0410 	add.w	r4, r6, #16
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a8:	1d33      	adds	r3, r6, #4
 80015aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ac:	6838      	ldr	r0, [r7, #0]
 80015ae:	f004 fd3d 	bl	800602c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fdba 	bl	8006132 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	687e      	ldr	r6, [r7, #4]
 80015c6:	466d      	mov	r5, sp
 80015c8:	f106 0410 	add.w	r4, r6, #16
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015dc:	1d33      	adds	r3, r6, #4
 80015de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e0:	6838      	ldr	r0, [r7, #0]
 80015e2:	f004 fecd 	bl	8006380 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	4608      	mov	r0, r1
 8001602:	4611      	mov	r1, r2
 8001604:	461a      	mov	r2, r3
 8001606:	4603      	mov	r3, r0
 8001608:	70fb      	strb	r3, [r7, #3]
 800160a:	460b      	mov	r3, r1
 800160c:	70bb      	strb	r3, [r7, #2]
 800160e:	4613      	mov	r3, r2
 8001610:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001618:	2b01      	cmp	r3, #1
 800161a:	d101      	bne.n	8001620 <HAL_HCD_HC_Init+0x28>
 800161c:	2302      	movs	r3, #2
 800161e:	e07f      	b.n	8001720 <HAL_HCD_HC_Init+0x128>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001628:	78fa      	ldrb	r2, [r7, #3]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	333d      	adds	r3, #61	; 0x3d
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	3338      	adds	r3, #56	; 0x38
 800164c:	787a      	ldrb	r2, [r7, #1]
 800164e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3340      	adds	r3, #64	; 0x40
 8001660:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001662:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3339      	adds	r3, #57	; 0x39
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001678:	78fa      	ldrb	r2, [r7, #3]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	440b      	add	r3, r1
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800168e:	78fa      	ldrb	r2, [r7, #3]
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001696:	b2d8      	uxtb	r0, r3
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	333a      	adds	r3, #58	; 0x3a
 80016a6:	4602      	mov	r2, r0
 80016a8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da0a      	bge.n	80016c8 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	333b      	adds	r3, #59	; 0x3b
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e009      	b.n	80016dc <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	333b      	adds	r3, #59	; 0x3b
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	333c      	adds	r3, #60	; 0x3c
 80016ec:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016f0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	787c      	ldrb	r4, [r7, #1]
 80016f8:	78ba      	ldrb	r2, [r7, #2]
 80016fa:	78f9      	ldrb	r1, [r7, #3]
 80016fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016fe:	9302      	str	r3, [sp, #8]
 8001700:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4623      	mov	r3, r4
 800170e:	f004 ffb9 	bl	8006684 <USB_HC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800171e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_HCD_HC_Halt+0x1e>
 8001742:	2302      	movs	r3, #2
 8001744:	e00f      	b.n	8001766 <HAL_HCD_HC_Halt+0x3e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	78fa      	ldrb	r2, [r7, #3]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f9f5 	bl	8006b46 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001764:	7bfb      	ldrb	r3, [r7, #15]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4608      	mov	r0, r1
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	4603      	mov	r3, r0
 8001780:	70fb      	strb	r3, [r7, #3]
 8001782:	460b      	mov	r3, r1
 8001784:	70bb      	strb	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	333b      	adds	r3, #59	; 0x3b
 800179a:	78ba      	ldrb	r2, [r7, #2]
 800179c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800179e:	78fa      	ldrb	r2, [r7, #3]
 80017a0:	6879      	ldr	r1, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	333f      	adds	r3, #63	; 0x3f
 80017ae:	787a      	ldrb	r2, [r7, #1]
 80017b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017b2:	7c3b      	ldrb	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d114      	bne.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3342      	adds	r3, #66	; 0x42
 80017c8:	2203      	movs	r2, #3
 80017ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	4413      	add	r3, r2
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	440b      	add	r3, r1
 80017da:	333d      	adds	r3, #61	; 0x3d
 80017dc:	7f3a      	ldrb	r2, [r7, #28]
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e009      	b.n	80017f6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3342      	adds	r3, #66	; 0x42
 80017f2:	2202      	movs	r2, #2
 80017f4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017f6:	787b      	ldrb	r3, [r7, #1]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	f200 80d6 	bhi.w	80019aa <HAL_HCD_HC_SubmitRequest+0x23a>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	08001995 	.word	0x08001995
 800180c:	08001881 	.word	0x08001881
 8001810:	0800190b 	.word	0x0800190b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001814:	7c3b      	ldrb	r3, [r7, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 80c9 	bne.w	80019ae <HAL_HCD_HC_SubmitRequest+0x23e>
 800181c:	78bb      	ldrb	r3, [r7, #2]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80c5 	bne.w	80019ae <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001824:	8b3b      	ldrh	r3, [r7, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	00db      	lsls	r3, r3, #3
 8001836:	440b      	add	r3, r1
 8001838:	3351      	adds	r3, #81	; 0x51
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	3351      	adds	r3, #81	; 0x51
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10a      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	3342      	adds	r3, #66	; 0x42
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001868:	e0a1      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3342      	adds	r3, #66	; 0x42
 800187a:	2202      	movs	r2, #2
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e096      	b.n	80019ae <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001880:	78bb      	ldrb	r3, [r7, #2]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d120      	bne.n	80018c8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3351      	adds	r3, #81	; 0x51
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	3342      	adds	r3, #66	; 0x42
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018b0:	e07e      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e073      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	3350      	adds	r3, #80	; 0x50
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10a      	bne.n	80018f4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	3342      	adds	r3, #66	; 0x42
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
      break;
 80018f2:	e05d      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	3342      	adds	r3, #66	; 0x42
 8001904:	2202      	movs	r2, #2
 8001906:	701a      	strb	r2, [r3, #0]
      break;
 8001908:	e052      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800190a:	78bb      	ldrb	r3, [r7, #2]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d120      	bne.n	8001952 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3351      	adds	r3, #81	; 0x51
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3342      	adds	r3, #66	; 0x42
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800193a:	e039      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3342      	adds	r3, #66	; 0x42
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
      break;
 8001950:	e02e      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3350      	adds	r3, #80	; 0x50
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	3342      	adds	r3, #66	; 0x42
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
      break;
 800197c:	e018      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	3342      	adds	r3, #66	; 0x42
 800198e:	2202      	movs	r2, #2
 8001990:	701a      	strb	r2, [r3, #0]
      break;
 8001992:	e00d      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3342      	adds	r3, #66	; 0x42
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
      break;
 80019a8:	e002      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80019aa:	bf00      	nop
 80019ac:	e000      	b.n	80019b0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80019ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3344      	adds	r3, #68	; 0x44
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	8b39      	ldrh	r1, [r7, #24]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4403      	add	r3, r0
 80019d4:	3348      	adds	r3, #72	; 0x48
 80019d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	440b      	add	r3, r1
 80019e6:	335c      	adds	r3, #92	; 0x5c
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	334c      	adds	r3, #76	; 0x4c
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3339      	adds	r3, #57	; 0x39
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	335d      	adds	r3, #93	; 0x5d
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	78fa      	ldrb	r2, [r7, #3]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	3338      	adds	r3, #56	; 0x38
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	18d1      	adds	r1, r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	f004 ff28 	bl	8006898 <USB_HC_StartXfer>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop

08001a54 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 fc45 	bl	80062fa <USB_GetMode>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	f040 80ef 	bne.w	8001c56 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fc29 	bl	80062d4 <USB_ReadInterrupts>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80e5 	beq.w	8001c54 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f004 fc20 	bl	80062d4 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9e:	d104      	bne.n	8001aaa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fc10 	bl	80062d4 <USB_ReadInterrupts>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001abe:	d104      	bne.n	8001aca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f004 fc00 	bl	80062d4 <USB_ReadInterrupts>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ada:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ade:	d104      	bne.n	8001aea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 fbf0 	bl	80062d4 <USB_ReadInterrupts>
 8001af4:	4603      	mov	r3, r0
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d103      	bne.n	8001b06 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2202      	movs	r2, #2
 8001b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 fbe2 	bl	80062d4 <USB_ReadInterrupts>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b1a:	d115      	bne.n	8001b48 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b24:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d108      	bne.n	8001b48 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f007 f99a 	bl	8008e70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fcd8 	bl	80064f8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fbc1 	bl	80062d4 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d102      	bne.n	8001b64 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f001 f966 	bl	8002e30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f004 fbb3 	bl	80062d4 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d106      	bne.n	8001b86 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f007 f95d 	bl	8008e38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2208      	movs	r2, #8
 8001b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f004 fba2 	bl	80062d4 <USB_ReadInterrupts>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b9a:	d138      	bne.n	8001c0e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 ffbf 	bl	8006b24 <USB_HC_ReadInterrupt>
 8001ba6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e025      	b.n	8001bfa <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d018      	beq.n	8001bf4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	015a      	lsls	r2, r3, #5
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd8:	d106      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8cf 	bl	8001d84 <HCD_HC_IN_IRQHandler>
 8001be6:	e005      	b.n	8001bf4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fcfd 	bl	80025ee <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3d4      	bcc.n	8001bae <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 fb5e 	bl	80062d4 <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 0310 	and.w	r3, r3, #16
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d101      	bne.n	8001c26 <HAL_HCD_IRQHandler+0x1d2>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_HCD_IRQHandler+0x1d4>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d014      	beq.n	8001c56 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699a      	ldr	r2, [r3, #24]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0210 	bic.w	r2, r2, #16
 8001c3a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f001 f84b 	bl	8002cd8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0210 	orr.w	r2, r2, #16
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	e000      	b.n	8001c56 <HAL_HCD_IRQHandler+0x202>
      return;
 8001c54:	bf00      	nop
    }
  }
}
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_HCD_Start+0x16>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e013      	b.n	8001c9a <HAL_HCD_Start+0x3e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fa35 	bl	80060ee <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f004 fc98 	bl	80065c0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_HCD_Stop+0x16>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e00d      	b.n	8001cd4 <HAL_HCD_Stop+0x32>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 f879 	bl	8006dbc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f004 fc3f 	bl	800656c <USB_ResetPort>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	335c      	adds	r3, #92	; 0x5c
 8001d14:	781b      	ldrb	r3, [r3, #0]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	334c      	adds	r3, #76	; 0x4c
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f004 fc81 	bl	8006660 <USB_GetCurrentFrame>
 8001d5e:	4603      	mov	r3, r0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fc5c 	bl	8006632 <USB_GetHostSpeed>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d119      	bne.n	8001de8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	0151      	lsls	r1, r2, #5
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	440a      	add	r2, r1
 8001ddc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	60d3      	str	r3, [r2, #12]
 8001de6:	e0ce      	b.n	8001f86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfe:	d12c      	bne.n	8001e5a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	335d      	adds	r3, #93	; 0x5d
 8001e24:	2207      	movs	r2, #7
 8001e26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	0151      	lsls	r1, r2, #5
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	440a      	add	r2, r1
 8001e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f004 fe77 	bl	8006b46 <USB_HC_Halt>
 8001e58:	e095      	b.n	8001f86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d109      	bne.n	8001e84 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	2320      	movs	r3, #32
 8001e80:	6093      	str	r3, [r2, #8]
 8001e82:	e080      	b.n	8001f86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d134      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	0151      	lsls	r1, r2, #5
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	440a      	add	r2, r1
 8001eb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	335d      	adds	r3, #93	; 0x5d
 8001eca:	2205      	movs	r2, #5
 8001ecc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	2310      	movs	r3, #16
 8001ede:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	461a      	mov	r2, r3
 8001eee:	2308      	movs	r3, #8
 8001ef0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f004 fe22 	bl	8006b46 <USB_HC_Halt>
 8001f02:	e040      	b.n	8001f86 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f1a:	d134      	bne.n	8001f86 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	0151      	lsls	r1, r2, #5
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	440a      	add	r2, r1
 8001f32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f36:	f043 0302 	orr.w	r3, r3, #2
 8001f3a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 fdfd 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	335d      	adds	r3, #93	; 0x5d
 8001f6e:	2208      	movs	r2, #8
 8001f70:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f84:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f9c:	d122      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	0151      	lsls	r1, r2, #5
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	440a      	add	r2, r1
 8001fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f004 fdbc 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe0:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fe2:	e300      	b.n	80025e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	f040 80fd 	bne.w	80021f6 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	3348      	adds	r3, #72	; 0x48
 8002014:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0159      	lsls	r1, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	440b      	add	r3, r1
 800201e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002028:	1ad1      	subs	r1, r2, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	334c      	adds	r3, #76	; 0x4c
 800203a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	335d      	adds	r3, #93	; 0x5d
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3358      	adds	r3, #88	; 0x58
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	461a      	mov	r2, r3
 8002072:	2301      	movs	r3, #1
 8002074:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	440b      	add	r3, r1
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	333f      	adds	r3, #63	; 0x3f
 800209c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d121      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	0151      	lsls	r1, r2, #5
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	440a      	add	r2, r1
 80020b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 fd3a 	bl	8006b46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	461a      	mov	r2, r3
 80020e0:	2310      	movs	r3, #16
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	e070      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	333f      	adds	r3, #63	; 0x3f
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d12a      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	0151      	lsls	r1, r2, #5
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	440a      	add	r2, r1
 8002112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002116:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800211a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	335c      	adds	r3, #92	; 0x5c
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	b2d8      	uxtb	r0, r3
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	440b      	add	r3, r1
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	4601      	mov	r1, r0
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f006 fe9e 	bl	8008e8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002150:	e03a      	b.n	80021c8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d12f      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	335c      	adds	r3, #92	; 0x5c
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	3350      	adds	r3, #80	; 0x50
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2d8      	uxtb	r0, r3
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	3350      	adds	r3, #80	; 0x50
 80021a4:	4602      	mov	r2, r0
 80021a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b2d8      	uxtb	r0, r3
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4601      	mov	r1, r0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f006 fe62 	bl	8008e8c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3350      	adds	r3, #80	; 0x50
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2d8      	uxtb	r0, r3
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	3350      	adds	r3, #80	; 0x50
 80021f0:	4602      	mov	r2, r0
 80021f2:	701a      	strb	r2, [r3, #0]
}
 80021f4:	e1f7      	b.n	80025e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b02      	cmp	r3, #2
 800220a:	f040 811a 	bne.w	8002442 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	0151      	lsls	r1, r2, #5
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	440a      	add	r2, r1
 8002224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002228:	f023 0302 	bic.w	r3, r3, #2
 800222c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	440b      	add	r3, r1
 800223c:	335d      	adds	r3, #93	; 0x5d
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d10a      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	335c      	adds	r3, #92	; 0x5c
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e0d9      	b.n	800240e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	440b      	add	r3, r1
 8002268:	335d      	adds	r3, #93	; 0x5d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b05      	cmp	r3, #5
 800226e:	d10a      	bne.n	8002286 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	335c      	adds	r3, #92	; 0x5c
 8002280:	2205      	movs	r2, #5
 8002282:	701a      	strb	r2, [r3, #0]
 8002284:	e0c3      	b.n	800240e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	335d      	adds	r3, #93	; 0x5d
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b06      	cmp	r3, #6
 800229a:	d00a      	beq.n	80022b2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	335d      	adds	r3, #93	; 0x5d
 80022ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d156      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	3358      	adds	r3, #88	; 0x58
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c59      	adds	r1, r3, #1
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4403      	add	r3, r0
 80022d4:	3358      	adds	r3, #88	; 0x58
 80022d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	3358      	adds	r3, #88	; 0x58
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d914      	bls.n	8002318 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3358      	adds	r3, #88	; 0x58
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	2204      	movs	r2, #4
 8002314:	701a      	strb	r2, [r3, #0]
 8002316:	e009      	b.n	800232c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4613      	mov	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	440b      	add	r3, r1
 8002326:	335c      	adds	r3, #92	; 0x5c
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002342:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800234a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e056      	b.n	800240e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	335d      	adds	r3, #93	; 0x5d
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d123      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	335c      	adds	r3, #92	; 0x5c
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023a0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e027      	b.n	800240e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	335d      	adds	r3, #93	; 0x5d
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d11c      	bne.n	800240e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	440b      	add	r3, r1
 80023e2:	3358      	adds	r3, #88	; 0x58
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1c59      	adds	r1, r3, #1
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4403      	add	r3, r0
 80023f6:	3358      	adds	r3, #88	; 0x58
 80023f8:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	2204      	movs	r2, #4
 800240c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2302      	movs	r3, #2
 800241e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	b2d8      	uxtb	r0, r3
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	440b      	add	r3, r1
 8002432:	335c      	adds	r3, #92	; 0x5c
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	461a      	mov	r2, r3
 8002438:	4601      	mov	r1, r0
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f006 fd26 	bl	8008e8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002440:	e0d1      	b.n	80025e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d13e      	bne.n	80024d6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	0151      	lsls	r1, r2, #5
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	440a      	add	r2, r1
 800246e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	3358      	adds	r3, #88	; 0x58
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4403      	add	r3, r0
 800249a:	3358      	adds	r3, #88	; 0x58
 800249c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	440b      	add	r3, r1
 80024ac:	335d      	adds	r3, #93	; 0x5d
 80024ae:	2206      	movs	r2, #6
 80024b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f004 fb42 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	461a      	mov	r2, r3
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	6093      	str	r3, [r2, #8]
}
 80024d4:	e087      	b.n	80025e6 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d17c      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	333f      	adds	r3, #63	; 0x3f
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d122      	bne.n	8002548 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3358      	adds	r3, #88	; 0x58
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	0151      	lsls	r1, r2, #5
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	440a      	add	r2, r1
 800252c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fb00 	bl	8006b46 <USB_HC_Halt>
 8002546:	e045      	b.n	80025d4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4613      	mov	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	333f      	adds	r3, #63	; 0x3f
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	333f      	adds	r3, #63	; 0x3f
 800256e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002570:	2b02      	cmp	r3, #2
 8002572:	d12f      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	440b      	add	r3, r1
 8002582:	3358      	adds	r3, #88	; 0x58
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d121      	bne.n	80025d4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	335d      	adds	r3, #93	; 0x5d
 80025a0:	2203      	movs	r2, #3
 80025a2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	0151      	lsls	r1, r2, #5
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	440a      	add	r2, r1
 80025ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025be:	f043 0302 	orr.w	r3, r3, #2
 80025c2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fab9 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2310      	movs	r3, #16
 80025e4:	6093      	str	r3, [r2, #8]
}
 80025e6:	bf00      	nop
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d119      	bne.n	8002652 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2304      	movs	r3, #4
 800262e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	0151      	lsls	r1, r2, #5
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	440a      	add	r2, r1
 8002646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002650:	e33e      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	2b20      	cmp	r3, #32
 8002666:	d141      	bne.n	80026ec <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2320      	movs	r3, #32
 8002678:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	440b      	add	r3, r1
 8002688:	333d      	adds	r3, #61	; 0x3d
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 831f 	bne.w	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	333d      	adds	r3, #61	; 0x3d
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	335c      	adds	r3, #92	; 0x5c
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	0151      	lsls	r1, r2, #5
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	440a      	add	r2, r1
 80026d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fa2e 	bl	8006b46 <USB_HC_Halt>
}
 80026ea:	e2f1      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d13f      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	335d      	adds	r3, #93	; 0x5d
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	333d      	adds	r3, #61	; 0x3d
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	3358      	adds	r3, #88	; 0x58
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f004 f9ec 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	461a      	mov	r2, r3
 800277c:	2340      	movs	r3, #64	; 0x40
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	e2a6      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d122      	bne.n	80027e0 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f004 f9be 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027dc:	6093      	str	r3, [r2, #8]
}
 80027de:	e277      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d135      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	440b      	add	r3, r1
 8002804:	3358      	adds	r3, #88	; 0x58
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	0151      	lsls	r1, r2, #5
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	440a      	add	r2, r1
 8002820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f004 f986 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4413      	add	r3, r2
 8002842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002846:	461a      	mov	r2, r3
 8002848:	2301      	movs	r3, #1
 800284a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	335d      	adds	r3, #93	; 0x5d
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
}
 8002860:	e236      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b08      	cmp	r3, #8
 8002876:	d12b      	bne.n	80028d0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2308      	movs	r3, #8
 8002888:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	0151      	lsls	r1, r2, #5
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	440a      	add	r2, r1
 80028a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	4611      	mov	r1, r2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 f946 	bl	8006b46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	335d      	adds	r3, #93	; 0x5d
 80028ca:	2205      	movs	r2, #5
 80028cc:	701a      	strb	r2, [r3, #0]
}
 80028ce:	e1ff      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d155      	bne.n	8002992 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	440b      	add	r3, r1
 80028f4:	3358      	adds	r3, #88	; 0x58
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4613      	mov	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	440b      	add	r3, r1
 8002908:	335d      	adds	r3, #93	; 0x5d
 800290a:	2203      	movs	r2, #3
 800290c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	440b      	add	r3, r1
 800291c:	333d      	adds	r3, #61	; 0x3d
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d114      	bne.n	800294e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	440b      	add	r3, r1
 8002932:	333c      	adds	r3, #60	; 0x3c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	333d      	adds	r3, #61	; 0x3d
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	440a      	add	r2, r1
 8002964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f004 f8e4 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	015a      	lsls	r2, r3, #5
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298a:	461a      	mov	r2, r3
 800298c:	2310      	movs	r3, #16
 800298e:	6093      	str	r3, [r2, #8]
}
 8002990:	e19e      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d12b      	bne.n	8002a00 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	015a      	lsls	r2, r3, #5
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4413      	add	r3, r2
 80029b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	0151      	lsls	r1, r2, #5
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	440a      	add	r2, r1
 80029be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 f8b7 	bl	8006b46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	335d      	adds	r3, #93	; 0x5d
 80029e8:	2206      	movs	r2, #6
 80029ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	6093      	str	r3, [r2, #8]
}
 80029fe:	e167      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a16:	d135      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f87f 	bl	8006b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a54:	461a      	mov	r2, r3
 8002a56:	2310      	movs	r3, #16
 8002a58:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	335d      	adds	r3, #93	; 0x5d
 8002a7e:	2208      	movs	r2, #8
 8002a80:	701a      	strb	r2, [r3, #0]
}
 8002a82:	e125      	b.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 811a 	bne.w	8002cd0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab6:	f023 0302 	bic.w	r3, r3, #2
 8002aba:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	440b      	add	r3, r1
 8002aca:	335d      	adds	r3, #93	; 0x5d
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d137      	bne.n	8002b42 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	335c      	adds	r3, #92	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	333f      	adds	r3, #63	; 0x3f
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d00b      	beq.n	8002b14 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	440b      	add	r3, r1
 8002b0a:	333f      	adds	r3, #63	; 0x3f
 8002b0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	f040 80c5 	bne.w	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3351      	adds	r3, #81	; 0x51
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2d8      	uxtb	r0, r3
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3351      	adds	r3, #81	; 0x51
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e0ad      	b.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	335d      	adds	r3, #93	; 0x5d
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d10a      	bne.n	8002b6e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	335c      	adds	r3, #92	; 0x5c
 8002b68:	2202      	movs	r2, #2
 8002b6a:	701a      	strb	r2, [r3, #0]
 8002b6c:	e097      	b.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	335d      	adds	r3, #93	; 0x5d
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d10a      	bne.n	8002b9a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	335c      	adds	r3, #92	; 0x5c
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e081      	b.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	440b      	add	r3, r1
 8002ba8:	335d      	adds	r3, #93	; 0x5d
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d10a      	bne.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	335c      	adds	r3, #92	; 0x5c
 8002bc0:	2205      	movs	r2, #5
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e06b      	b.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	335d      	adds	r3, #93	; 0x5d
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b06      	cmp	r3, #6
 8002bda:	d00a      	beq.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	335d      	adds	r3, #93	; 0x5d
 8002bec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d155      	bne.n	8002c9e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3358      	adds	r3, #88	; 0x58
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	1c59      	adds	r1, r3, #1
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4403      	add	r3, r0
 8002c14:	3358      	adds	r3, #88	; 0x58
 8002c16:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	3358      	adds	r3, #88	; 0x58
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d914      	bls.n	8002c58 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3358      	adds	r3, #88	; 0x58
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	335c      	adds	r3, #92	; 0x5c
 8002c52:	2204      	movs	r2, #4
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e009      	b.n	8002c6c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	440b      	add	r3, r1
 8002c66:	335c      	adds	r3, #92	; 0x5c
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c82:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	2302      	movs	r3, #2
 8002cae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	b2d8      	uxtb	r0, r3
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4601      	mov	r1, r0
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f006 f8de 	bl	8008e8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	0c5b      	lsrs	r3, r3, #17
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d003      	beq.n	8002d1c <HCD_RXQLVL_IRQHandler+0x44>
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	f000 8082 	beq.w	8002e1e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d1a:	e083      	b.n	8002e24 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d07f      	beq.n	8002e22 <HCD_RXQLVL_IRQHandler+0x14a>
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	; 0x44
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d074      	beq.n	8002e22 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	3344      	adds	r3, #68	; 0x44
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	b292      	uxth	r2, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f003 fa95 	bl	8006282 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	18d1      	adds	r1, r2, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4403      	add	r3, r0
 8002d7c:	3344      	adds	r3, #68	; 0x44
 8002d7e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	334c      	adds	r3, #76	; 0x4c
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	18d1      	adds	r1, r2, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4403      	add	r3, r0
 8002da4:	334c      	adds	r3, #76	; 0x4c
 8002da6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <HCD_RXQLVL_IRQHandler+0x154>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d031      	beq.n	8002e22 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ddc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3350      	adds	r3, #80	; 0x50
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	f083 0301 	eor.w	r3, r3, #1
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	440b      	add	r3, r1
 8002e16:	3350      	adds	r3, #80	; 0x50
 8002e18:	4602      	mov	r2, r0
 8002e1a:	701a      	strb	r2, [r3, #0]
      break;
 8002e1c:	e001      	b.n	8002e22 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e000      	b.n	8002e24 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e22:	bf00      	nop
  }
}
 8002e24:	bf00      	nop
 8002e26:	3728      	adds	r7, #40	; 0x28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	1ff80000 	.word	0x1ff80000

08002e30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d10b      	bne.n	8002e80 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f005 ffee 	bl	8008e54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d132      	bne.n	8002ef0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d126      	bne.n	8002eea <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d113      	bne.n	8002ecc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eae:	d106      	bne.n	8002ebe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f003 fb1e 	bl	80064f8 <USB_InitFSLSPClkSel>
 8002ebc:	e011      	b.n	8002ee2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f003 fb17 	bl	80064f8 <USB_InitFSLSPClkSel>
 8002eca:	e00a      	b.n	8002ee2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002eda:	461a      	mov	r2, r3
 8002edc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002ee0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f005 ffe0 	bl	8008ea8 <HAL_HCD_PortEnabled_Callback>
 8002ee8:	e002      	b.n	8002ef0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f005 ffea 	bl	8008ec4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d103      	bne.n	8002f02 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	6013      	str	r3, [r2, #0]
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e11f      	b.n	800316a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fd fd8e 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f7c:	f002 fea0 	bl	8005cc0 <HAL_RCC_GetPCLK1Freq>
 8002f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4a7b      	ldr	r2, [pc, #492]	; (8003174 <HAL_I2C_Init+0x25c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d807      	bhi.n	8002f9c <HAL_I2C_Init+0x84>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_I2C_Init+0x260>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	bf94      	ite	ls
 8002f94:	2301      	movls	r3, #1
 8002f96:	2300      	movhi	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e006      	b.n	8002faa <HAL_I2C_Init+0x92>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4a77      	ldr	r2, [pc, #476]	; (800317c <HAL_I2C_Init+0x264>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bf94      	ite	ls
 8002fa4:	2301      	movls	r3, #1
 8002fa6:	2300      	movhi	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0db      	b.n	800316a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a72      	ldr	r2, [pc, #456]	; (8003180 <HAL_I2C_Init+0x268>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a64      	ldr	r2, [pc, #400]	; (8003174 <HAL_I2C_Init+0x25c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d802      	bhi.n	8002fec <HAL_I2C_Init+0xd4>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	e009      	b.n	8003000 <HAL_I2C_Init+0xe8>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ff2:	fb02 f303 	mul.w	r3, r2, r3
 8002ff6:	4a63      	ldr	r2, [pc, #396]	; (8003184 <HAL_I2C_Init+0x26c>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	099b      	lsrs	r3, r3, #6
 8002ffe:	3301      	adds	r3, #1
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	430b      	orrs	r3, r1
 8003006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003012:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4956      	ldr	r1, [pc, #344]	; (8003174 <HAL_I2C_Init+0x25c>)
 800301c:	428b      	cmp	r3, r1
 800301e:	d80d      	bhi.n	800303c <HAL_I2C_Init+0x124>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e59      	subs	r1, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	fbb1 f3f3 	udiv	r3, r1, r3
 800302e:	3301      	adds	r3, #1
 8003030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003034:	2b04      	cmp	r3, #4
 8003036:	bf38      	it	cc
 8003038:	2304      	movcc	r3, #4
 800303a:	e04f      	b.n	80030dc <HAL_I2C_Init+0x1c4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d111      	bne.n	8003068 <HAL_I2C_Init+0x150>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e012      	b.n	800308e <HAL_I2C_Init+0x176>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1e58      	subs	r0, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	0099      	lsls	r1, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	fbb0 f3f3 	udiv	r3, r0, r3
 800307e:	3301      	adds	r3, #1
 8003080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Init+0x17e>
 8003092:	2301      	movs	r3, #1
 8003094:	e022      	b.n	80030dc <HAL_I2C_Init+0x1c4>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10e      	bne.n	80030bc <HAL_I2C_Init+0x1a4>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1e58      	subs	r0, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ba:	e00f      	b.n	80030dc <HAL_I2C_Init+0x1c4>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	0099      	lsls	r1, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80030d2:	3301      	adds	r3, #1
 80030d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6809      	ldr	r1, [r1, #0]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800310a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6911      	ldr	r1, [r2, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68d2      	ldr	r2, [r2, #12]
 8003116:	4311      	orrs	r1, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	000186a0 	.word	0x000186a0
 8003178:	001e847f 	.word	0x001e847f
 800317c:	003d08ff 	.word	0x003d08ff
 8003180:	431bde83 	.word	0x431bde83
 8003184:	10624dd3 	.word	0x10624dd3

08003188 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b20      	cmp	r3, #32
 800319a:	d124      	bne.n	80031e6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2228      	movs	r2, #40	; 0x28
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d007      	beq.n	80031c2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031d0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031e0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80031e6:	2302      	movs	r3, #2
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003214:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800321c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b10      	cmp	r3, #16
 8003222:	d003      	beq.n	800322c <HAL_I2C_EV_IRQHandler+0x38>
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	f040 80bd 	bne.w	80033a6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <HAL_I2C_EV_IRQHandler+0x6e>
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800324c:	d003      	beq.n	8003256 <HAL_I2C_EV_IRQHandler+0x62>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003254:	d101      	bne.n	800325a <HAL_I2C_EV_IRQHandler+0x66>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_I2C_EV_IRQHandler+0x68>
 800325a:	2300      	movs	r3, #0
 800325c:	2b01      	cmp	r3, #1
 800325e:	f000 812e 	beq.w	80034be <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00c      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x92>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d006      	beq.n	8003286 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f001 fc2b 	bl	8004ad4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fd38 	bl	8003cf4 <I2C_Master_SB>
 8003284:	e08e      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d009      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	0a5b      	lsrs	r3, r3, #9
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fdae 	bl	8003e00 <I2C_Master_ADD10>
 80032a4:	e07e      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0xd2>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	0a5b      	lsrs	r3, r3, #9
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fdc8 	bl	8003e54 <I2C_Master_ADDR>
 80032c4:	e06e      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d037      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e0:	f000 80ef 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	09db      	lsrs	r3, r3, #7
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00f      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x11c>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	0a9b      	lsrs	r3, r3, #10
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d009      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x11c>
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f9c5 	bl	8003698 <I2C_MasterTransmit_TXE>
 800330e:	e049      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80d2 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	0a5b      	lsrs	r3, r3, #9
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80cb 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b10      	cmp	r3, #16
 8003330:	d103      	bne.n	800333a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 fa4c 	bl	80037d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003338:	e0c3      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fab0 	bl	80038a0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003340:	e0bf      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003350:	f000 80b7 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x18c>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	0a9b      	lsrs	r3, r3, #10
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d009      	beq.n	8003380 <HAL_I2C_EV_IRQHandler+0x18c>
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d103      	bne.n	8003380 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fb20 	bl	80039be <I2C_MasterReceive_RXNE>
 800337e:	e011      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 809a 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8093 	beq.w	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fbbf 	bl	8003b20 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a2:	e08e      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80033a4:	e08d      	b.n	80034c2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d004      	beq.n	80033b8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	61fb      	str	r3, [r7, #28]
 80033b6:	e007      	b.n	80033c8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x206>
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	0a5b      	lsrs	r3, r3, #9
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00c      	beq.n	80033fa <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033f0:	69b9      	ldr	r1, [r7, #24]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff7d 	bl	80042f2 <I2C_Slave_ADDR>
 80033f8:	e066      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	091b      	lsrs	r3, r3, #4
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x226>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0a5b      	lsrs	r3, r3, #9
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 ffb2 	bl	800437c <I2C_Slave_STOPF>
 8003418:	e056      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800341a:	7bbb      	ldrb	r3, [r7, #14]
 800341c:	2b21      	cmp	r3, #33	; 0x21
 800341e:	d002      	beq.n	8003426 <HAL_I2C_EV_IRQHandler+0x232>
 8003420:	7bbb      	ldrb	r3, [r7, #14]
 8003422:	2b29      	cmp	r3, #41	; 0x29
 8003424:	d125      	bne.n	8003472 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	09db      	lsrs	r3, r3, #7
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x25e>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	0a9b      	lsrs	r3, r3, #10
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x25e>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d103      	bne.n	8003452 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fe93 	bl	8004176 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003450:	e039      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d033      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	0a5b      	lsrs	r3, r3, #9
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d02d      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fec0 	bl	80041f0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003470:	e029      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00f      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x2aa>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	0a9b      	lsrs	r3, r3, #10
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_I2C_EV_IRQHandler+0x2aa>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fecb 	bl	8004232 <I2C_SlaveReceive_RXNE>
 800349c:	e014      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	0a5b      	lsrs	r3, r3, #9
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fef9 	bl	80042ae <I2C_SlaveReceive_BTF>
 80034bc:	e004      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	; 0x28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <HAL_I2C_ER_IRQHandler+0x4e>
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800351a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	0a5b      	lsrs	r3, r3, #9
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00e      	beq.n	8003546 <HAL_I2C_ER_IRQHandler+0x78>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f043 0302 	orr.w	r3, r3, #2
 800353a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003544:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	0a9b      	lsrs	r3, r3, #10
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03f      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x104>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d039      	beq.n	80035d2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800355e:	7efb      	ldrb	r3, [r7, #27]
 8003560:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003570:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003578:	7ebb      	ldrb	r3, [r7, #26]
 800357a:	2b20      	cmp	r3, #32
 800357c:	d112      	bne.n	80035a4 <HAL_I2C_ER_IRQHandler+0xd6>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10f      	bne.n	80035a4 <HAL_I2C_ER_IRQHandler+0xd6>
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b21      	cmp	r3, #33	; 0x21
 8003588:	d008      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b29      	cmp	r3, #41	; 0x29
 800358e:	d005      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0xce>
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b28      	cmp	r3, #40	; 0x28
 8003594:	d106      	bne.n	80035a4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b21      	cmp	r3, #33	; 0x21
 800359a:	d103      	bne.n	80035a4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f001 f81d 	bl	80045dc <I2C_Slave_AF>
 80035a2:	e016      	b.n	80035d2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ac:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035b6:	7efb      	ldrb	r3, [r7, #27]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d002      	beq.n	80035c2 <HAL_I2C_ER_IRQHandler+0xf4>
 80035bc:	7efb      	ldrb	r3, [r7, #27]
 80035be:	2b40      	cmp	r3, #64	; 0x40
 80035c0:	d107      	bne.n	80035d2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	0adb      	lsrs	r3, r3, #11
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00e      	beq.n	80035fc <HAL_I2C_ER_IRQHandler+0x12e>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	0a1b      	lsrs	r3, r3, #8
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	f043 0308 	orr.w	r3, r3, #8
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80035fa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f001 f854 	bl	80046bc <I2C_ITError>
  }
}
 8003614:	bf00      	nop
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d150      	bne.n	8003760 <I2C_MasterTransmit_TXE+0xc8>
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b21      	cmp	r3, #33	; 0x21
 80036c2:	d14d      	bne.n	8003760 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d01d      	beq.n	8003706 <I2C_MasterTransmit_TXE+0x6e>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b20      	cmp	r3, #32
 80036ce:	d01a      	beq.n	8003706 <I2C_MasterTransmit_TXE+0x6e>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036d6:	d016      	beq.n	8003706 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2211      	movs	r2, #17
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff ff8c 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003704:	e060      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003714:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d107      	bne.n	8003750 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff7b 	bl	8003644 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800374e:	e03b      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff5f 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800375e:	e033      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b21      	cmp	r3, #33	; 0x21
 8003764:	d005      	beq.n	8003772 <I2C_MasterTransmit_TXE+0xda>
 8003766:	7bbb      	ldrb	r3, [r7, #14]
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d12d      	bne.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	d12a      	bne.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800378a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800378c:	e01c      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d103      	bne.n	80037a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f880 	bl	80038a0 <I2C_MemoryTransmit_TXE_BTF>
}
 80037a0:	e012      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	781a      	ldrb	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037c6:	e7ff      	b.n	80037c8 <I2C_MasterTransmit_TXE+0x130>
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b21      	cmp	r3, #33	; 0x21
 80037e8:	d156      	bne.n	8003898 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	781a      	ldrb	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003818:	e03e      	b.n	8003898 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b08      	cmp	r3, #8
 800381e:	d01d      	beq.n	800385c <I2C_MasterTransmit_BTF+0x8c>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b20      	cmp	r3, #32
 8003824:	d01a      	beq.n	800385c <I2C_MasterTransmit_BTF+0x8c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800382c:	d016      	beq.n	800385c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800383c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2211      	movs	r2, #17
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fee1 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
}
 800385a:	e01d      	b.n	8003898 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800386a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff fec2 	bl	800361c <HAL_I2C_MasterTxCpltCallback>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ae:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11d      	bne.n	80038f4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10b      	bne.n	80038d8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d0:	1c9a      	adds	r2, r3, #2
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038d6:	e06e      	b.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	b29b      	uxth	r3, r3
 80038de:	121b      	asrs	r3, r3, #8
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038f2:	e060      	b.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10b      	bne.n	8003914 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	b2da      	uxtb	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003912:	e050      	b.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	2b02      	cmp	r3, #2
 800391a:	d14c      	bne.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b22      	cmp	r3, #34	; 0x22
 8003920:	d108      	bne.n	8003934 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	e040      	b.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b21      	cmp	r3, #33	; 0x21
 8003942:	d112      	bne.n	800396a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003968:	e025      	b.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d120      	bne.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b21      	cmp	r3, #33	; 0x21
 8003978:	d11d      	bne.n	80039b6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003988:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003998:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2220      	movs	r2, #32
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fe47 	bl	8003644 <HAL_I2C_MemTxCpltCallback>
}
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b22      	cmp	r3, #34	; 0x22
 80039d0:	f040 80a2 	bne.w	8003b18 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d921      	bls.n	8003a26 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f040 8082 	bne.w	8003b18 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a22:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003a24:	e078      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d074      	beq.n	8003b18 <I2C_MasterReceive_RXNE+0x15a>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d002      	beq.n	8003a3a <I2C_MasterReceive_RXNE+0x7c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d16e      	bne.n	8003b18 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 f818 	bl	8004a70 <I2C_WaitOnSTOPRequestThroughIT>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d142      	bne.n	8003acc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a54:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d10a      	bne.n	8003ab6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fdd2 	bl	8003658 <HAL_I2C_MemRxCpltCallback>
}
 8003ab4:	e030      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2212      	movs	r2, #18
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fdb3 	bl	8003630 <HAL_I2C_MasterRxCpltCallback>
}
 8003aca:	e025      	b.n	8003b18 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ada:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fc fd2f 	bl	8000576 <HAL_I2C_ErrorCallback>
}
 8003b18:	bf00      	nop
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d11b      	bne.n	8003b70 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b46:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b6e:	e0bd      	b.n	8003cec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d129      	bne.n	8003bce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b88:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00a      	beq.n	8003ba6 <I2C_MasterReceive_BTF+0x86>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d007      	beq.n	8003ba6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	691a      	ldr	r2, [r3, #16]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bcc:	e08e      	b.n	8003cec <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d176      	bne.n	8003cc6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d002      	beq.n	8003be4 <I2C_MasterReceive_BTF+0xc4>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d108      	bne.n	8003bf6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	e019      	b.n	8003c2a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d002      	beq.n	8003c02 <I2C_MasterReceive_BTF+0xe2>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d108      	bne.n	8003c14 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e00a      	b.n	8003c2a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d007      	beq.n	8003c2a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c28:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c84:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d10a      	bne.n	8003cb0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fcd5 	bl	8003658 <HAL_I2C_MemRxCpltCallback>
}
 8003cae:	e01d      	b.n	8003cec <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2212      	movs	r2, #18
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fcb6 	bl	8003630 <HAL_I2C_MasterRxCpltCallback>
}
 8003cc4:	e012      	b.n	8003cec <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d117      	bne.n	8003d38 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d22:	e067      	b.n	8003df4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	611a      	str	r2, [r3, #16]
}
 8003d36:	e05d      	b.n	8003df4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d40:	d133      	bne.n	8003daa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b21      	cmp	r3, #33	; 0x21
 8003d4c:	d109      	bne.n	8003d62 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d5e:	611a      	str	r2, [r3, #16]
 8003d60:	e008      	b.n	8003d74 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <I2C_Master_SB+0x92>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d032      	beq.n	8003df4 <I2C_Master_SB+0x100>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d02d      	beq.n	8003df4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	605a      	str	r2, [r3, #4]
}
 8003da8:	e024      	b.n	8003df4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10e      	bne.n	8003dd0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	11db      	asrs	r3, r3, #7
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	f003 0306 	and.w	r3, r3, #6
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	f063 030f 	orn	r3, r3, #15
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
}
 8003dce:	e011      	b.n	8003df4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d10d      	bne.n	8003df4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	11db      	asrs	r3, r3, #7
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 0306 	and.w	r3, r3, #6
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f063 030e 	orn	r3, r3, #14
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <I2C_Master_ADD10+0x24>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d011      	beq.n	8003e48 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d104      	bne.n	8003e38 <I2C_Master_ADD10+0x38>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e46:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b091      	sub	sp, #68	; 0x44
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b22      	cmp	r3, #34	; 0x22
 8003e7c:	f040 8169 	bne.w	8004152 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10f      	bne.n	8003ea8 <I2C_Master_ADDR+0x54>
 8003e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d10b      	bne.n	8003ea8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e90:	2300      	movs	r3, #0
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea6:	e160      	b.n	800416a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d11d      	bne.n	8003eec <I2C_Master_ADDR+0x98>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eb8:	d118      	bne.n	8003eec <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ede:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	651a      	str	r2, [r3, #80]	; 0x50
 8003eea:	e13e      	b.n	800416a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d113      	bne.n	8003f1e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	e115      	b.n	800414a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	f040 808a 	bne.w	800403e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f30:	d137      	bne.n	8003fa2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f40:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d113      	bne.n	8003f7a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	e0e7      	b.n	800414a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e0d3      	b.n	800414a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d02e      	beq.n	8004006 <I2C_Master_ADDR+0x1b2>
 8003fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d02b      	beq.n	8004006 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	2b12      	cmp	r3, #18
 8003fb2:	d102      	bne.n	8003fba <I2C_Master_ADDR+0x166>
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d125      	bne.n	8004006 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d00e      	beq.n	8003fde <I2C_Master_ADDR+0x18a>
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d00b      	beq.n	8003fde <I2C_Master_ADDR+0x18a>
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b10      	cmp	r3, #16
 8003fca:	d008      	beq.n	8003fde <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e007      	b.n	8003fee <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fec:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	e0a1      	b.n	800414a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e085      	b.n	800414a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d14d      	bne.n	80040e4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404a:	2b04      	cmp	r3, #4
 800404c:	d016      	beq.n	800407c <I2C_Master_ADDR+0x228>
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004050:	2b02      	cmp	r3, #2
 8004052:	d013      	beq.n	800407c <I2C_Master_ADDR+0x228>
 8004054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004056:	2b10      	cmp	r3, #16
 8004058:	d010      	beq.n	800407c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004068:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e007      	b.n	800408c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409a:	d117      	bne.n	80040cc <I2C_Master_ADDR+0x278>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040a2:	d00b      	beq.n	80040bc <I2C_Master_ADDR+0x268>
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d008      	beq.n	80040bc <I2C_Master_ADDR+0x268>
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d005      	beq.n	80040bc <I2C_Master_ADDR+0x268>
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d002      	beq.n	80040bc <I2C_Master_ADDR+0x268>
 80040b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d107      	bne.n	80040cc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ca:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	e032      	b.n	800414a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004102:	d117      	bne.n	8004134 <I2C_Master_ADDR+0x2e0>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800410a:	d00b      	beq.n	8004124 <I2C_Master_ADDR+0x2d0>
 800410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410e:	2b01      	cmp	r3, #1
 8004110:	d008      	beq.n	8004124 <I2C_Master_ADDR+0x2d0>
 8004112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004114:	2b08      	cmp	r3, #8
 8004116:	d005      	beq.n	8004124 <I2C_Master_ADDR+0x2d0>
 8004118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411a:	2b10      	cmp	r3, #16
 800411c:	d002      	beq.n	8004124 <I2C_Master_ADDR+0x2d0>
 800411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004120:	2b20      	cmp	r3, #32
 8004122:	d107      	bne.n	8004134 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004132:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004134:	2300      	movs	r3, #0
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004150:	e00b      	b.n	800416a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	e7ff      	b.n	800416a <I2C_Master_ADDR+0x316>
 800416a:	bf00      	nop
 800416c:	3744      	adds	r7, #68	; 0x44
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02b      	beq.n	80041e8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d114      	bne.n	80041e8 <I2C_SlaveTransmit_TXE+0x72>
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b29      	cmp	r3, #41	; 0x29
 80041c2:	d111      	bne.n	80041e8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2221      	movs	r2, #33	; 0x21
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2228      	movs	r2, #40	; 0x28
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fc f9a2 	bl	800052c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d011      	beq.n	8004226 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	781a      	ldrb	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02c      	beq.n	80042a6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d114      	bne.n	80042a6 <I2C_SlaveReceive_RXNE+0x74>
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b2a      	cmp	r3, #42	; 0x2a
 8004280:	d111      	bne.n	80042a6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004290:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2222      	movs	r2, #34	; 0x22
 8004296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2228      	movs	r2, #40	; 0x28
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fc f929 	bl	80004f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800430c:	2b28      	cmp	r3, #40	; 0x28
 800430e:	d127      	bne.n	8004360 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	089b      	lsrs	r3, r3, #2
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	81bb      	strh	r3, [r7, #12]
 8004342:	e002      	b.n	800434a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004352:	89ba      	ldrh	r2, [r7, #12]
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7fc f8b5 	bl	80004c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800435e:	e008      	b.n	8004372 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0202 	mvn.w	r2, #2
 8004368:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
	...

0800437c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800439a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d172      	bne.n	80044c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b22      	cmp	r3, #34	; 0x22
 80043de:	d002      	beq.n	80043e6 <I2C_Slave_STOPF+0x6a>
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b2a      	cmp	r3, #42	; 0x2a
 80043e4:	d135      	bne.n	8004452 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d005      	beq.n	800440a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f043 0204 	orr.w	r2, r3, #4
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004418:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc feab 	bl	800117a <HAL_DMA_GetState>
 8004424:	4603      	mov	r3, r0
 8004426:	2b01      	cmp	r3, #1
 8004428:	d049      	beq.n	80044be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	4a69      	ldr	r2, [pc, #420]	; (80045d4 <I2C_Slave_STOPF+0x258>)
 8004430:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc fe7d 	bl	8001136 <HAL_DMA_Abort_IT>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d03d      	beq.n	80044be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800444c:	4610      	mov	r0, r2
 800444e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004450:	e035      	b.n	80044be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	b29a      	uxth	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	f043 0204 	orr.w	r2, r3, #4
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004484:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	4618      	mov	r0, r3
 800448c:	f7fc fe75 	bl	800117a <HAL_DMA_GetState>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d014      	beq.n	80044c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449a:	4a4e      	ldr	r2, [pc, #312]	; (80045d4 <I2C_Slave_STOPF+0x258>)
 800449c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fc fe47 	bl	8001136 <HAL_DMA_Abort_IT>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044b8:	4610      	mov	r0, r2
 80044ba:	4798      	blx	r3
 80044bc:	e000      	b.n	80044c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03e      	beq.n	8004548 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d112      	bne.n	80044fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	1c5a      	adds	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b01      	subs	r3, #1
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d112      	bne.n	8004532 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f043 0204 	orr.w	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8b3 	bl	80046bc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004556:	e039      	b.n	80045cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b2a      	cmp	r3, #42	; 0x2a
 800455c:	d109      	bne.n	8004572 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2228      	movs	r2, #40	; 0x28
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fb ffc3 	bl	80004f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b28      	cmp	r3, #40	; 0x28
 800457c:	d111      	bne.n	80045a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <I2C_Slave_STOPF+0x25c>)
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fb ffe0 	bl	8000560 <HAL_I2C_ListenCpltCallback>
}
 80045a0:	e014      	b.n	80045cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	2b22      	cmp	r3, #34	; 0x22
 80045a8:	d002      	beq.n	80045b0 <I2C_Slave_STOPF+0x234>
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b22      	cmp	r3, #34	; 0x22
 80045ae:	d10d      	bne.n	80045cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fb ff96 	bl	80004f8 <HAL_I2C_SlaveRxCpltCallback>
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	08004921 	.word	0x08004921
 80045d8:	ffff0000 	.word	0xffff0000

080045dc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d002      	beq.n	80045fe <I2C_Slave_AF+0x22>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d129      	bne.n	8004652 <I2C_Slave_AF+0x76>
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	2b28      	cmp	r3, #40	; 0x28
 8004602:	d126      	bne.n	8004652 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a2c      	ldr	r2, [pc, #176]	; (80046b8 <I2C_Slave_AF+0xdc>)
 8004608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004618:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004622:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004632:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fb ff88 	bl	8000560 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004650:	e02e      	b.n	80046b0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b21      	cmp	r3, #33	; 0x21
 8004656:	d126      	bne.n	80046a6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <I2C_Slave_AF+0xdc>)
 800465c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2221      	movs	r2, #33	; 0x21
 8004662:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004682:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800468c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fb ff44 	bl	800052c <HAL_I2C_SlaveTxCpltCallback>
}
 80046a4:	e004      	b.n	80046b0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ae:	615a      	str	r2, [r3, #20]
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	ffff0000 	.word	0xffff0000

080046bc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d002      	beq.n	80046e0 <I2C_ITError+0x24>
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d10a      	bne.n	80046f6 <I2C_ITError+0x3a>
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b22      	cmp	r3, #34	; 0x22
 80046e4:	d107      	bne.n	80046f6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046fc:	2b28      	cmp	r3, #40	; 0x28
 80046fe:	d107      	bne.n	8004710 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2228      	movs	r2, #40	; 0x28
 800470a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800470e:	e015      	b.n	800473c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471e:	d00a      	beq.n	8004736 <I2C_ITError+0x7a>
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	2b60      	cmp	r3, #96	; 0x60
 8004724:	d007      	beq.n	8004736 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474a:	d162      	bne.n	8004812 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b01      	cmp	r3, #1
 8004768:	d020      	beq.n	80047ac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476e:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <I2C_ITError+0x25c>)
 8004770:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004776:	4618      	mov	r0, r3
 8004778:	f7fc fcdd 	bl	8001136 <HAL_DMA_Abort_IT>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8089 	beq.w	8004896 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0201 	bic.w	r2, r2, #1
 8004792:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a6:	4610      	mov	r0, r2
 80047a8:	4798      	blx	r3
 80047aa:	e074      	b.n	8004896 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	4a59      	ldr	r2, [pc, #356]	; (8004918 <I2C_ITError+0x25c>)
 80047b2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc fcbc 	bl	8001136 <HAL_DMA_Abort_IT>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d068      	beq.n	8004896 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d10b      	bne.n	80047ea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800480c:	4610      	mov	r0, r2
 800480e:	4798      	blx	r3
 8004810:	e041      	b.n	8004896 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b60      	cmp	r3, #96	; 0x60
 800481c:	d125      	bne.n	800486a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10b      	bne.n	8004852 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe ff02 	bl	800366c <HAL_I2C_AbortCpltCallback>
 8004868:	e015      	b.n	8004896 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d10b      	bne.n	8004890 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fb fe70 	bl	8000576 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10e      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d113      	bne.n	8004910 <I2C_ITError+0x254>
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b28      	cmp	r3, #40	; 0x28
 80048ec:	d110      	bne.n	8004910 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	; (800491c <I2C_ITError+0x260>)
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fb fe28 	bl	8000560 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08004921 	.word	0x08004921
 800491c:	ffff0000 	.word	0xffff0000

08004920 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800493a:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <I2C_DMAAbort+0x148>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	4a4a      	ldr	r2, [pc, #296]	; (8004a6c <I2C_DMAAbort+0x14c>)
 8004942:	fba2 2303 	umull	r2, r3, r2, r3
 8004946:	0a1a      	lsrs	r2, r3, #8
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00da      	lsls	r2, r3, #3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f043 0220 	orr.w	r2, r3, #32
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004966:	e00a      	b.n	800497e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3b01      	subs	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497c:	d0ea      	beq.n	8004954 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498a:	2200      	movs	r2, #0
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	2200      	movs	r2, #0
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	2200      	movs	r2, #0
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	2200      	movs	r2, #0
 80049d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d10e      	bne.n	8004a0e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2200      	movs	r2, #0
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7fe fe30 	bl	800366c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a0c:	e027      	b.n	8004a5e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a14:	2b28      	cmp	r3, #40	; 0x28
 8004a16:	d117      	bne.n	8004a48 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2228      	movs	r2, #40	; 0x28
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a46:	e007      	b.n	8004a58 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f7fb fd8c 	bl	8000576 <HAL_I2C_ErrorCallback>
}
 8004a5e:	bf00      	nop
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	14f8b589 	.word	0x14f8b589

08004a70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a7c:	4b13      	ldr	r3, [pc, #76]	; (8004acc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	4a13      	ldr	r2, [pc, #76]	; (8004ad0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	0a1a      	lsrs	r2, r3, #8
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0220 	orr.w	r2, r3, #32
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e008      	b.n	8004ac0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d0e9      	beq.n	8004a92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	14f8b589 	.word	0x14f8b589

08004ad4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ae4:	d103      	bne.n	8004aee <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aec:	e007      	b.n	8004afe <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004af6:	d102      	bne.n	8004afe <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2208      	movs	r2, #8
 8004afc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e128      	b.n	8004d70 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a90      	ldr	r2, [pc, #576]	; (8004d78 <HAL_I2S_Init+0x26c>)
 8004b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fb ffe9 	bl	8000b10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b54:	f023 030f 	bic.w	r3, r3, #15
 8004b58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d060      	beq.n	8004c2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004b72:	2310      	movs	r3, #16
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e001      	b.n	8004b7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d802      	bhi.n	8004b8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004b8a:	2001      	movs	r0, #1
 8004b8c:	f001 f98e 	bl	8005eac <HAL_RCCEx_GetPeriphCLKFreq>
 8004b90:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d125      	bne.n	8004be8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d010      	beq.n	8004bc6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	3305      	adds	r3, #5
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	e01f      	b.n	8004c06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	3305      	adds	r3, #5
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e00e      	b.n	8004c06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	3305      	adds	r3, #5
 8004c04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4a5c      	ldr	r2, [pc, #368]	; (8004d7c <HAL_I2S_Init+0x270>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e003      	b.n	8004c34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d902      	bls.n	8004c40 <HAL_I2S_Init+0x134>
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2bff      	cmp	r3, #255	; 0xff
 8004c3e:	d907      	bls.n	8004c50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f043 0210 	orr.w	r2, r3, #16
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e08f      	b.n	8004d70 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	ea42 0103 	orr.w	r1, r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c6e:	f023 030f 	bic.w	r3, r3, #15
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6851      	ldr	r1, [r2, #4]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6892      	ldr	r2, [r2, #8]
 8004c7a:	4311      	orrs	r1, r2
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	68d2      	ldr	r2, [r2, #12]
 8004c80:	4311      	orrs	r1, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6992      	ldr	r2, [r2, #24]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d161      	bne.n	8004d60 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a38      	ldr	r2, [pc, #224]	; (8004d80 <HAL_I2S_Init+0x274>)
 8004ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a37      	ldr	r2, [pc, #220]	; (8004d84 <HAL_I2S_Init+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d101      	bne.n	8004cb0 <HAL_I2S_Init+0x1a4>
 8004cac:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <HAL_I2S_Init+0x27c>)
 8004cae:	e001      	b.n	8004cb4 <HAL_I2S_Init+0x1a8>
 8004cb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	4932      	ldr	r1, [pc, #200]	; (8004d84 <HAL_I2S_Init+0x278>)
 8004cbc:	428a      	cmp	r2, r1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_I2S_Init+0x1b8>
 8004cc0:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <HAL_I2S_Init+0x27c>)
 8004cc2:	e001      	b.n	8004cc8 <HAL_I2S_Init+0x1bc>
 8004cc4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004cc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ccc:	f023 030f 	bic.w	r3, r3, #15
 8004cd0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2b      	ldr	r2, [pc, #172]	; (8004d84 <HAL_I2S_Init+0x278>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d101      	bne.n	8004ce0 <HAL_I2S_Init+0x1d4>
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <HAL_I2S_Init+0x27c>)
 8004cde:	e001      	b.n	8004ce4 <HAL_I2S_Init+0x1d8>
 8004ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a25      	ldr	r2, [pc, #148]	; (8004d84 <HAL_I2S_Init+0x278>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_I2S_Init+0x1ea>
 8004cf2:	4b25      	ldr	r3, [pc, #148]	; (8004d88 <HAL_I2S_Init+0x27c>)
 8004cf4:	e001      	b.n	8004cfa <HAL_I2S_Init+0x1ee>
 8004cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d06:	d003      	beq.n	8004d10 <HAL_I2S_Init+0x204>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e001      	b.n	8004d1c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	b299      	uxth	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004d32:	4303      	orrs	r3, r0
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	430b      	orrs	r3, r1
 8004d38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	897b      	ldrh	r3, [r7, #10]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d48:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <HAL_I2S_Init+0x278>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d101      	bne.n	8004d58 <HAL_I2S_Init+0x24c>
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_I2S_Init+0x27c>)
 8004d56:	e001      	b.n	8004d5c <HAL_I2S_Init+0x250>
 8004d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d5c:	897a      	ldrh	r2, [r7, #10]
 8004d5e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	08004e83 	.word	0x08004e83
 8004d7c:	cccccccd 	.word	0xcccccccd
 8004d80:	08004f99 	.word	0x08004f99
 8004d84:	40003800 	.word	0x40003800
 8004d88:	40003400 	.word	0x40003400

08004d8c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e0c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffb8 	bl	8004d8c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	3708      	adds	r7, #8
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	b292      	uxth	r2, r2
 8004e38:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	1c9a      	adds	r2, r3, #2
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10e      	bne.n	8004e7a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff93 	bl	8004da0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d13a      	bne.n	8004f14 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d109      	bne.n	8004ebc <I2S_IRQHandler+0x3a>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	d102      	bne.n	8004ebc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ffb4 	bl	8004e24 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d126      	bne.n	8004f14 <I2S_IRQHandler+0x92>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	d11f      	bne.n	8004f14 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ee2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f043 0202 	orr.w	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ff50 	bl	8004db4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d136      	bne.n	8004f8e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d109      	bne.n	8004f3e <I2S_IRQHandler+0xbc>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b80      	cmp	r3, #128	; 0x80
 8004f36:	d102      	bne.n	8004f3e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff45 	bl	8004dc8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d122      	bne.n	8004f8e <I2S_IRQHandler+0x10c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d11b      	bne.n	8004f8e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f64:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff ff13 	bl	8004db4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f8e:	bf00      	nop
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
	...

08004f98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4aa2      	ldr	r2, [pc, #648]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004fb2:	4ba2      	ldr	r3, [pc, #648]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fb4:	e001      	b.n	8004fba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a9b      	ldr	r2, [pc, #620]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d101      	bne.n	8004fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004fd0:	4b9a      	ldr	r3, [pc, #616]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fd2:	e001      	b.n	8004fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004fd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe4:	d004      	beq.n	8004ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f040 8099 	bne.w	8005122 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d107      	bne.n	800500a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f925 	bl	8005254 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b01      	cmp	r3, #1
 8005012:	d107      	bne.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9c8 	bl	80053b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d13a      	bne.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d035      	beq.n	80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7e      	ldr	r2, [pc, #504]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d101      	bne.n	8005046 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005042:	4b7e      	ldr	r3, [pc, #504]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005044:	e001      	b.n	800504a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4979      	ldr	r1, [pc, #484]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005052:	428b      	cmp	r3, r1
 8005054:	d101      	bne.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005056:	4b79      	ldr	r3, [pc, #484]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005058:	e001      	b.n	800505e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800505a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005062:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005072:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	f043 0202 	orr.w	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fe88 	bl	8004db4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	f040 80be 	bne.w	800522c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0320 	and.w	r3, r3, #32
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80b8 	beq.w	800522c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050ca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a59      	ldr	r2, [pc, #356]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d101      	bne.n	80050da <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80050d6:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050d8:	e001      	b.n	80050de <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80050da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4954      	ldr	r1, [pc, #336]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050e6:	428b      	cmp	r3, r1
 80050e8:	d101      	bne.n	80050ee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80050ea:	4b54      	ldr	r3, [pc, #336]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050ec:	e001      	b.n	80050f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80050ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050f6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	60bb      	str	r3, [r7, #8]
 8005104:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f043 0204 	orr.w	r2, r3, #4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fe4a 	bl	8004db4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005120:	e084      	b.n	800522c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d107      	bne.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8be 	bl	80052b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d107      	bne.n	8005156 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f8fd 	bl	8005350 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d12f      	bne.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d02a      	beq.n	80051c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005178:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a2e      	ldr	r2, [pc, #184]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d101      	bne.n	8005188 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005184:	4b2d      	ldr	r3, [pc, #180]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005186:	e001      	b.n	800518c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4929      	ldr	r1, [pc, #164]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005194:	428b      	cmp	r3, r1
 8005196:	d101      	bne.n	800519c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005198:	4b28      	ldr	r3, [pc, #160]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800519a:	e001      	b.n	80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800519c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f043 0202 	orr.w	r2, r3, #2
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff fdfa 	bl	8004db4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d131      	bne.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02c      	beq.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051e0:	e001      	b.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80051e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4912      	ldr	r1, [pc, #72]	; (8005238 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051ee:	428b      	cmp	r3, r1
 80051f0:	d101      	bne.n	80051f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051f4:	e001      	b.n	80051fa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80051f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800520e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fdc5 	bl	8004db4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800522a:	e000      	b.n	800522e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800522c:	bf00      	nop
}
 800522e:	bf00      	nop
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40003800 	.word	0x40003800
 800523c:	40003400 	.word	0x40003400

08005240 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c99      	adds	r1, r3, #2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6251      	str	r1, [r2, #36]	; 0x24
 8005266:	881a      	ldrh	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d113      	bne.n	80052ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005294:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ffc9 	bl	8005240 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	1c99      	adds	r1, r3, #2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6251      	str	r1, [r2, #36]	; 0x24
 80052ca:	8819      	ldrh	r1, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <I2SEx_TxISR_I2SExt+0x90>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d101      	bne.n	80052da <I2SEx_TxISR_I2SExt+0x22>
 80052d6:	4b1d      	ldr	r3, [pc, #116]	; (800534c <I2SEx_TxISR_I2SExt+0x94>)
 80052d8:	e001      	b.n	80052de <I2SEx_TxISR_I2SExt+0x26>
 80052da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052de:	460a      	mov	r2, r1
 80052e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a12      	ldr	r2, [pc, #72]	; (8005348 <I2SEx_TxISR_I2SExt+0x90>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <I2SEx_TxISR_I2SExt+0x50>
 8005304:	4b11      	ldr	r3, [pc, #68]	; (800534c <I2SEx_TxISR_I2SExt+0x94>)
 8005306:	e001      	b.n	800530c <I2SEx_TxISR_I2SExt+0x54>
 8005308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	490d      	ldr	r1, [pc, #52]	; (8005348 <I2SEx_TxISR_I2SExt+0x90>)
 8005314:	428b      	cmp	r3, r1
 8005316:	d101      	bne.n	800531c <I2SEx_TxISR_I2SExt+0x64>
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <I2SEx_TxISR_I2SExt+0x94>)
 800531a:	e001      	b.n	8005320 <I2SEx_TxISR_I2SExt+0x68>
 800531c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005324:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff81 	bl	8005240 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40003800 	.word	0x40003800
 800534c:	40003400 	.word	0x40003400

08005350 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68d8      	ldr	r0, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	1c99      	adds	r1, r3, #2
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005368:	b282      	uxth	r2, r0
 800536a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d113      	bne.n	80053ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005392:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d106      	bne.n	80053ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ff4a 	bl	8005240 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a20      	ldr	r2, [pc, #128]	; (8005444 <I2SEx_RxISR_I2SExt+0x90>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d101      	bne.n	80053ca <I2SEx_RxISR_I2SExt+0x16>
 80053c6:	4b20      	ldr	r3, [pc, #128]	; (8005448 <I2SEx_RxISR_I2SExt+0x94>)
 80053c8:	e001      	b.n	80053ce <I2SEx_RxISR_I2SExt+0x1a>
 80053ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ce:	68d8      	ldr	r0, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	1c99      	adds	r1, r3, #2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053da:	b282      	uxth	r2, r0
 80053dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d121      	bne.n	800543a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a12      	ldr	r2, [pc, #72]	; (8005444 <I2SEx_RxISR_I2SExt+0x90>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <I2SEx_RxISR_I2SExt+0x50>
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <I2SEx_RxISR_I2SExt+0x94>)
 8005402:	e001      	b.n	8005408 <I2SEx_RxISR_I2SExt+0x54>
 8005404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	490d      	ldr	r1, [pc, #52]	; (8005444 <I2SEx_RxISR_I2SExt+0x90>)
 8005410:	428b      	cmp	r3, r1
 8005412:	d101      	bne.n	8005418 <I2SEx_RxISR_I2SExt+0x64>
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <I2SEx_RxISR_I2SExt+0x94>)
 8005416:	e001      	b.n	800541c <I2SEx_RxISR_I2SExt+0x68>
 8005418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800541c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005420:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d106      	bne.n	800543a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff ff03 	bl	8005240 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800543a:	bf00      	nop
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	40003800 	.word	0x40003800
 8005448:	40003400 	.word	0x40003400

0800544c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e25b      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d075      	beq.n	8005556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800546a:	4ba3      	ldr	r3, [pc, #652]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	2b04      	cmp	r3, #4
 8005474:	d00c      	beq.n	8005490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005476:	4ba0      	ldr	r3, [pc, #640]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800547e:	2b08      	cmp	r3, #8
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b9d      	ldr	r3, [pc, #628]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800548a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800548e:	d10b      	bne.n	80054a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	4b99      	ldr	r3, [pc, #612]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d05b      	beq.n	8005554 <HAL_RCC_OscConfig+0x108>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d157      	bne.n	8005554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e236      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b0:	d106      	bne.n	80054c0 <HAL_RCC_OscConfig+0x74>
 80054b2:	4b91      	ldr	r3, [pc, #580]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a90      	ldr	r2, [pc, #576]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e01d      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x98>
 80054ca:	4b8b      	ldr	r3, [pc, #556]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a8a      	ldr	r2, [pc, #552]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4b88      	ldr	r3, [pc, #544]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a87      	ldr	r2, [pc, #540]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0xb0>
 80054e4:	4b84      	ldr	r3, [pc, #528]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a83      	ldr	r2, [pc, #524]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a80      	ldr	r2, [pc, #512]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80054f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d013      	beq.n	800552c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fb fcd8 	bl	8000eb8 <HAL_GetTick>
 8005508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800550c:	f7fb fcd4 	bl	8000eb8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b64      	cmp	r3, #100	; 0x64
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1fb      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	4b76      	ldr	r3, [pc, #472]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0xc0>
 800552a:	e014      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552c:	f7fb fcc4 	bl	8000eb8 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005534:	f7fb fcc0 	bl	8000eb8 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b64      	cmp	r3, #100	; 0x64
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e1e7      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	4b6c      	ldr	r3, [pc, #432]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0xe8>
 8005552:	e000      	b.n	8005556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d063      	beq.n	800562a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005562:	4b65      	ldr	r3, [pc, #404]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800556e:	4b62      	ldr	r3, [pc, #392]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005576:	2b08      	cmp	r3, #8
 8005578:	d11c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b5f      	ldr	r3, [pc, #380]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d116      	bne.n	80055b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005586:	4b5c      	ldr	r3, [pc, #368]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d005      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e1bb      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559e:	4b56      	ldr	r3, [pc, #344]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4952      	ldr	r1, [pc, #328]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055b2:	e03a      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d020      	beq.n	80055fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055bc:	4b4f      	ldr	r3, [pc, #316]	; (80056fc <HAL_RCC_OscConfig+0x2b0>)
 80055be:	2201      	movs	r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c2:	f7fb fc79 	bl	8000eb8 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055ca:	f7fb fc75 	bl	8000eb8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e19c      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	4b46      	ldr	r3, [pc, #280]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0f0      	beq.n	80055ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e8:	4b43      	ldr	r3, [pc, #268]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	4940      	ldr	r1, [pc, #256]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_OscConfig+0x2b0>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fb fc58 	bl	8000eb8 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560c:	f7fb fc54 	bl	8000eb8 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e17b      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d030      	beq.n	8005698 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d016      	beq.n	800566c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563e:	4b30      	ldr	r3, [pc, #192]	; (8005700 <HAL_RCC_OscConfig+0x2b4>)
 8005640:	2201      	movs	r2, #1
 8005642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fb fc38 	bl	8000eb8 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564c:	f7fb fc34 	bl	8000eb8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e15b      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0x200>
 800566a:	e015      	b.n	8005698 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566c:	4b24      	ldr	r3, [pc, #144]	; (8005700 <HAL_RCC_OscConfig+0x2b4>)
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fb fc21 	bl	8000eb8 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800567a:	f7fb fc1d 	bl	8000eb8 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e144      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800568c:	4b1a      	ldr	r3, [pc, #104]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 800568e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1f0      	bne.n	800567a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80a0 	beq.w	80057e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056aa:	4b13      	ldr	r3, [pc, #76]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10f      	bne.n	80056d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	4a0e      	ldr	r2, [pc, #56]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6413      	str	r3, [r2, #64]	; 0x40
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <HAL_RCC_OscConfig+0x2ac>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	60bb      	str	r3, [r7, #8]
 80056d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056d2:	2301      	movs	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_OscConfig+0x2b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d121      	bne.n	8005726 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056e2:	4b08      	ldr	r3, [pc, #32]	; (8005704 <HAL_RCC_OscConfig+0x2b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a07      	ldr	r2, [pc, #28]	; (8005704 <HAL_RCC_OscConfig+0x2b8>)
 80056e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ee:	f7fb fbe3 	bl	8000eb8 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056f4:	e011      	b.n	800571a <HAL_RCC_OscConfig+0x2ce>
 80056f6:	bf00      	nop
 80056f8:	40023800 	.word	0x40023800
 80056fc:	42470000 	.word	0x42470000
 8005700:	42470e80 	.word	0x42470e80
 8005704:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005708:	f7fb fbd6 	bl	8000eb8 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0fd      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <HAL_RCC_OscConfig+0x4d4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d106      	bne.n	800573c <HAL_RCC_OscConfig+0x2f0>
 800572e:	4b7d      	ldr	r3, [pc, #500]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	4a7c      	ldr	r2, [pc, #496]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6713      	str	r3, [r2, #112]	; 0x70
 800573a:	e01c      	b.n	8005776 <HAL_RCC_OscConfig+0x32a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b05      	cmp	r3, #5
 8005742:	d10c      	bne.n	800575e <HAL_RCC_OscConfig+0x312>
 8005744:	4b77      	ldr	r3, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005748:	4a76      	ldr	r2, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	6713      	str	r3, [r2, #112]	; 0x70
 8005750:	4b74      	ldr	r3, [pc, #464]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005754:	4a73      	ldr	r2, [pc, #460]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005756:	f043 0301 	orr.w	r3, r3, #1
 800575a:	6713      	str	r3, [r2, #112]	; 0x70
 800575c:	e00b      	b.n	8005776 <HAL_RCC_OscConfig+0x32a>
 800575e:	4b71      	ldr	r3, [pc, #452]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	4a70      	ldr	r2, [pc, #448]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	6713      	str	r3, [r2, #112]	; 0x70
 800576a:	4b6e      	ldr	r3, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	4a6d      	ldr	r2, [pc, #436]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005770:	f023 0304 	bic.w	r3, r3, #4
 8005774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d015      	beq.n	80057aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577e:	f7fb fb9b 	bl	8000eb8 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fb fb97 	bl	8000eb8 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	; 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e0bc      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0ee      	beq.n	8005786 <HAL_RCC_OscConfig+0x33a>
 80057a8:	e014      	b.n	80057d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057aa:	f7fb fb85 	bl	8000eb8 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b0:	e00a      	b.n	80057c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b2:	f7fb fb81 	bl	8000eb8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0a6      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c8:	4b56      	ldr	r3, [pc, #344]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ee      	bne.n	80057b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d105      	bne.n	80057e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057da:	4b52      	ldr	r3, [pc, #328]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	4a51      	ldr	r2, [pc, #324]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80057e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 8092 	beq.w	8005914 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f0:	4b4c      	ldr	r3, [pc, #304]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d05c      	beq.n	80058b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d141      	bne.n	8005888 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	4b48      	ldr	r3, [pc, #288]	; (8005928 <HAL_RCC_OscConfig+0x4dc>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fb fb55 	bl	8000eb8 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005812:	f7fb fb51 	bl	8000eb8 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e078      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005824:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1f0      	bne.n	8005812 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	431a      	orrs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	019b      	lsls	r3, r3, #6
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	3b01      	subs	r3, #1
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	4933      	ldr	r1, [pc, #204]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 8005856:	4313      	orrs	r3, r2
 8005858:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800585a:	4b33      	ldr	r3, [pc, #204]	; (8005928 <HAL_RCC_OscConfig+0x4dc>)
 800585c:	2201      	movs	r2, #1
 800585e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fb fb2a 	bl	8000eb8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005868:	f7fb fb26 	bl	8000eb8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e04d      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x41c>
 8005886:	e045      	b.n	8005914 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005888:	4b27      	ldr	r3, [pc, #156]	; (8005928 <HAL_RCC_OscConfig+0x4dc>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588e:	f7fb fb13 	bl	8000eb8 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005896:	f7fb fb0f 	bl	8000eb8 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e036      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f0      	bne.n	8005896 <HAL_RCC_OscConfig+0x44a>
 80058b4:	e02e      	b.n	8005914 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e029      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058c2:	4b18      	ldr	r3, [pc, #96]	; (8005924 <HAL_RCC_OscConfig+0x4d8>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d11c      	bne.n	8005910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d115      	bne.n	8005910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058ea:	4013      	ands	r3, r2
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10d      	bne.n	8005910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80058fe:	429a      	cmp	r2, r3
 8005900:	d106      	bne.n	8005910 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40007000 	.word	0x40007000
 8005924:	40023800 	.word	0x40023800
 8005928:	42470060 	.word	0x42470060

0800592c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e0cc      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005940:	4b68      	ldr	r3, [pc, #416]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d90c      	bls.n	8005968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b65      	ldr	r3, [pc, #404]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0b8      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d020      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005980:	4b59      	ldr	r3, [pc, #356]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	4a58      	ldr	r2, [pc, #352]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800598a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005998:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a52      	ldr	r2, [pc, #328]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059a4:	4b50      	ldr	r3, [pc, #320]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	494d      	ldr	r1, [pc, #308]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d044      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ca:	4b47      	ldr	r3, [pc, #284]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d119      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ea:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e06f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	4b3b      	ldr	r3, [pc, #236]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e067      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a0a:	4b37      	ldr	r3, [pc, #220]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 0203 	bic.w	r2, r3, #3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4934      	ldr	r1, [pc, #208]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fb fa4c 	bl	8000eb8 <HAL_GetTick>
 8005a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a24:	f7fb fa48 	bl	8000eb8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e04f      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 020c 	and.w	r2, r3, #12
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d1eb      	bne.n	8005a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d20c      	bcs.n	8005a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e032      	b.n	8005ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a80:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	4916      	ldr	r1, [pc, #88]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	00db      	lsls	r3, r3, #3
 8005aac:	490e      	ldr	r1, [pc, #56]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ab2:	f000 f821 	bl	8005af8 <HAL_RCC_GetSysClockFreq>
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	4a0a      	ldr	r2, [pc, #40]	; (8005aec <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <HAL_RCC_ClockConfig+0x1c4>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fb f9ac 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3710      	adds	r7, #16
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40023c00 	.word	0x40023c00
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	080094dc 	.word	0x080094dc
 8005af0:	20000000 	.word	0x20000000
 8005af4:	20000004 	.word	0x20000004

08005af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	2300      	movs	r3, #0
 8005b08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b0e:	4b63      	ldr	r3, [pc, #396]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d007      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0x32>
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d008      	beq.n	8005b30 <HAL_RCC_GetSysClockFreq+0x38>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	f040 80b4 	bne.w	8005c8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b24:	4b5e      	ldr	r3, [pc, #376]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b26:	60bb      	str	r3, [r7, #8]
       break;
 8005b28:	e0b3      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b2a:	4b5e      	ldr	r3, [pc, #376]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b2c:	60bb      	str	r3, [r7, #8]
      break;
 8005b2e:	e0b0      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b30:	4b5a      	ldr	r3, [pc, #360]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b3a:	4b58      	ldr	r3, [pc, #352]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d04a      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b46:	4b55      	ldr	r3, [pc, #340]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	099b      	lsrs	r3, r3, #6
 8005b4c:	f04f 0400 	mov.w	r4, #0
 8005b50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b54:	f04f 0200 	mov.w	r2, #0
 8005b58:	ea03 0501 	and.w	r5, r3, r1
 8005b5c:	ea04 0602 	and.w	r6, r4, r2
 8005b60:	4629      	mov	r1, r5
 8005b62:	4632      	mov	r2, r6
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	f04f 0400 	mov.w	r4, #0
 8005b6c:	0154      	lsls	r4, r2, #5
 8005b6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b72:	014b      	lsls	r3, r1, #5
 8005b74:	4619      	mov	r1, r3
 8005b76:	4622      	mov	r2, r4
 8005b78:	1b49      	subs	r1, r1, r5
 8005b7a:	eb62 0206 	sbc.w	r2, r2, r6
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	f04f 0400 	mov.w	r4, #0
 8005b86:	0194      	lsls	r4, r2, #6
 8005b88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b8c:	018b      	lsls	r3, r1, #6
 8005b8e:	1a5b      	subs	r3, r3, r1
 8005b90:	eb64 0402 	sbc.w	r4, r4, r2
 8005b94:	f04f 0100 	mov.w	r1, #0
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	00e2      	lsls	r2, r4, #3
 8005b9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ba2:	00d9      	lsls	r1, r3, #3
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	4614      	mov	r4, r2
 8005ba8:	195b      	adds	r3, r3, r5
 8005baa:	eb44 0406 	adc.w	r4, r4, r6
 8005bae:	f04f 0100 	mov.w	r1, #0
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	0262      	lsls	r2, r4, #9
 8005bb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005bbc:	0259      	lsls	r1, r3, #9
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f04f 0400 	mov.w	r4, #0
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4623      	mov	r3, r4
 8005bd0:	f7fa fafa 	bl	80001c8 <__aeabi_uldivmod>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e049      	b.n	8005c70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bdc:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	ea03 0501 	and.w	r5, r3, r1
 8005bf2:	ea04 0602 	and.w	r6, r4, r2
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	4632      	mov	r2, r6
 8005bfa:	f04f 0300 	mov.w	r3, #0
 8005bfe:	f04f 0400 	mov.w	r4, #0
 8005c02:	0154      	lsls	r4, r2, #5
 8005c04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c08:	014b      	lsls	r3, r1, #5
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4622      	mov	r2, r4
 8005c0e:	1b49      	subs	r1, r1, r5
 8005c10:	eb62 0206 	sbc.w	r2, r2, r6
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	0194      	lsls	r4, r2, #6
 8005c1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c22:	018b      	lsls	r3, r1, #6
 8005c24:	1a5b      	subs	r3, r3, r1
 8005c26:	eb64 0402 	sbc.w	r4, r4, r2
 8005c2a:	f04f 0100 	mov.w	r1, #0
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	00e2      	lsls	r2, r4, #3
 8005c34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c38:	00d9      	lsls	r1, r3, #3
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	195b      	adds	r3, r3, r5
 8005c40:	eb44 0406 	adc.w	r4, r4, r6
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	02a2      	lsls	r2, r4, #10
 8005c4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c52:	0299      	lsls	r1, r3, #10
 8005c54:	460b      	mov	r3, r1
 8005c56:	4614      	mov	r4, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f04f 0400 	mov.w	r4, #0
 8005c62:	461a      	mov	r2, r3
 8005c64:	4623      	mov	r3, r4
 8005c66:	f7fa faaf 	bl	80001c8 <__aeabi_uldivmod>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	460c      	mov	r4, r1
 8005c6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c88:	60bb      	str	r3, [r7, #8]
      break;
 8005c8a:	e002      	b.n	8005c92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c8e:	60bb      	str	r3, [r7, #8]
      break;
 8005c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c92:	68bb      	ldr	r3, [r7, #8]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	00f42400 	.word	0x00f42400
 8005ca4:	007a1200 	.word	0x007a1200

08005ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cac:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cae:	681b      	ldr	r3, [r3, #0]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000000 	.word	0x20000000

08005cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cc4:	f7ff fff0 	bl	8005ca8 <HAL_RCC_GetHCLKFreq>
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	0a9b      	lsrs	r3, r3, #10
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	4a03      	ldr	r2, [pc, #12]	; (8005ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cd6:	5cd3      	ldrb	r3, [r2, r3]
 8005cd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	080094ec 	.word	0x080094ec

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d035      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d10:	4b62      	ldr	r3, [pc, #392]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d16:	f7fb f8cf 	bl	8000eb8 <HAL_GetTick>
 8005d1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d1e:	f7fb f8cb 	bl	8000eb8 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0b0      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d30:	4b5b      	ldr	r3, [pc, #364]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1f0      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	019a      	lsls	r2, r3, #6
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	071b      	lsls	r3, r3, #28
 8005d48:	4955      	ldr	r1, [pc, #340]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d50:	4b52      	ldr	r3, [pc, #328]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d56:	f7fb f8af 	bl	8000eb8 <HAL_GetTick>
 8005d5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d5c:	e008      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d5e:	f7fb f8ab 	bl	8000eb8 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e090      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d70:	4b4b      	ldr	r3, [pc, #300]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8083 	beq.w	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	4b44      	ldr	r3, [pc, #272]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	4a43      	ldr	r2, [pc, #268]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6413      	str	r3, [r2, #64]	; 0x40
 8005d9a:	4b41      	ldr	r3, [pc, #260]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005da6:	4b3f      	ldr	r3, [pc, #252]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a3e      	ldr	r2, [pc, #248]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005db2:	f7fb f881 	bl	8000eb8 <HAL_GetTick>
 8005db6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005db8:	e008      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005dba:	f7fb f87d 	bl	8000eb8 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d901      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e062      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005dcc:	4b35      	ldr	r3, [pc, #212]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0f0      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd8:	4b31      	ldr	r3, [pc, #196]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02f      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d028      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e00:	4b29      	ldr	r3, [pc, #164]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e0c:	4a24      	ldr	r2, [pc, #144]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e12:	4b23      	ldr	r3, [pc, #140]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d114      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fb f84b 	bl	8000eb8 <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f7fb f847 	bl	8000eb8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e02a      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3c:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ee      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e54:	d10d      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e56:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6a:	490d      	ldr	r1, [pc, #52]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e7c:	6093      	str	r3, [r2, #8]
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8a:	4905      	ldr	r1, [pc, #20]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	42470068 	.word	0x42470068
 8005ea0:	40023800 	.word	0x40023800
 8005ea4:	40007000 	.word	0x40007000
 8005ea8:	42470e40 	.word	0x42470e40

08005eac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d13d      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005eca:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ed2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d12f      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ede:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ee0:	617b      	str	r3, [r7, #20]
          break;
 8005ee2:	e02f      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef0:	d108      	bne.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ef2:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efa:	4a18      	ldr	r2, [pc, #96]	; (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	e007      	b.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005f04:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f0c:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f12:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	099b      	lsrs	r3, r3, #6
 8005f1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f2e:	0f1b      	lsrs	r3, r3, #28
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	617b      	str	r3, [r7, #20]
          break;
 8005f3c:	e002      	b.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
          break;
 8005f42:	bf00      	nop
        }
      }
      break;
 8005f44:	bf00      	nop
    }
  }
  return frequency;
 8005f46:	697b      	ldr	r3, [r7, #20]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	371c      	adds	r7, #28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	40023800 	.word	0x40023800
 8005f58:	00bb8000 	.word	0x00bb8000
 8005f5c:	007a1200 	.word	0x007a1200
 8005f60:	00f42400 	.word	0x00f42400

08005f64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e056      	b.n	8006024 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fa fe25 	bl	8000be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	ea42 0103 	orr.w	r1, r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	f003 0104 	and.w	r1, r3, #4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006012:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800602c:	b084      	sub	sp, #16
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	f107 001c 	add.w	r0, r7, #28
 800603a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	2b01      	cmp	r3, #1
 8006042:	d122      	bne.n	800608a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800606c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d105      	bne.n	800607e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f94a 	bl	8006318 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
 8006088:	e01a      	b.n	80060c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f93e 	bl	8006318 <USB_CoreReset>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	; 0x38
 80060b2:	e005      	b.n	80060c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10b      	bne.n	80060de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f043 0206 	orr.w	r2, r3, #6
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr

080060ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f043 0201 	orr.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 0201 	bic.w	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006132:	b580      	push	{r7, lr}
 8006134:	b082      	sub	sp, #8
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	460b      	mov	r3, r1
 800613c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d106      	bne.n	800615e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e00b      	b.n	8006176 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e001      	b.n	8006176 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e003      	b.n	800617e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006176:	2032      	movs	r0, #50	; 0x32
 8006178:	f7fa feaa 	bl	8000ed0 <HAL_Delay>

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
	...

08006188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	019b      	lsls	r3, r3, #6
 800619a:	f043 0220 	orr.w	r2, r3, #32
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3301      	adds	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <USB_FlushTxFifo+0x48>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d901      	bls.n	80061b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e006      	b.n	80061c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d0f0      	beq.n	80061a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	00030d40 	.word	0x00030d40

080061d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2210      	movs	r2, #16
 80061e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a09      	ldr	r2, [pc, #36]	; (8006214 <USB_FlushRxFifo+0x40>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e006      	b.n	8006206 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b10      	cmp	r3, #16
 8006202:	d0f0      	beq.n	80061e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	00030d40 	.word	0x00030d40

08006218 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4611      	mov	r1, r2
 8006224:	461a      	mov	r2, r3
 8006226:	460b      	mov	r3, r1
 8006228:	71fb      	strb	r3, [r7, #7]
 800622a:	4613      	mov	r3, r2
 800622c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006236:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11a      	bne.n	8006274 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800623e:	88bb      	ldrh	r3, [r7, #4]
 8006240:	3303      	adds	r3, #3
 8006242:	089b      	lsrs	r3, r3, #2
 8006244:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006246:	2300      	movs	r3, #0
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e00f      	b.n	800626c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	031a      	lsls	r2, r3, #12
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	4413      	add	r3, r2
 8006254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006258:	461a      	mov	r2, r3
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3304      	adds	r3, #4
 8006264:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	3301      	adds	r3, #1
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	429a      	cmp	r2, r3
 8006272:	d3eb      	bcc.n	800624c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3724      	adds	r7, #36	; 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006282:	b480      	push	{r7}
 8006284:	b089      	sub	sp, #36	; 0x24
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	4613      	mov	r3, r2
 800628e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006298:	88fb      	ldrh	r3, [r7, #6]
 800629a:	3303      	adds	r3, #3
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80062a0:	2300      	movs	r3, #0
 80062a2:	61bb      	str	r3, [r7, #24]
 80062a4:	e00b      	b.n	80062be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	601a      	str	r2, [r3, #0]
    pDest++;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3304      	adds	r3, #4
 80062b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	3301      	adds	r3, #1
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d3ef      	bcc.n	80062a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80062c6:	69fb      	ldr	r3, [r7, #28]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3724      	adds	r7, #36	; 0x24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0301 	and.w	r3, r3, #1
}
 800630a:	4618      	mov	r0, r3
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a13      	ldr	r2, [pc, #76]	; (800637c <USB_CoreReset+0x64>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d901      	bls.n	8006336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e01b      	b.n	800636e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f043 0201 	orr.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <USB_CoreReset+0x64>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d901      	bls.n	8006360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b01      	cmp	r3, #1
 800636a:	d0f0      	beq.n	800634e <USB_CoreReset+0x36>

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	00030d40 	.word	0x00030d40

08006380 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006380:	b084      	sub	sp, #16
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	f107 001c 	add.w	r0, r7, #28
 800638e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d018      	beq.n	8006404 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d10a      	bne.n	80063ee <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063e6:	f043 0304 	orr.w	r3, r3, #4
 80063ea:	6013      	str	r3, [r2, #0]
 80063ec:	e014      	b.n	8006418 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063fc:	f023 0304 	bic.w	r3, r3, #4
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e009      	b.n	8006418 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006412:	f023 0304 	bic.w	r3, r3, #4
 8006416:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006418:	2110      	movs	r1, #16
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff feb4 	bl	8006188 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fed7 	bl	80061d4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e015      	b.n	8006458 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	461a      	mov	r2, r3
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	429a      	cmp	r2, r3
 800645e:	d3e5      	bcc.n	800642c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006460:	2101      	movs	r1, #1
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f8ac 	bl	80065c0 <USB_DriveVbus>

  HAL_Delay(200U);
 8006468:	20c8      	movs	r0, #200	; 0xc8
 800646a:	f7fa fd31 	bl	8000ed0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00b      	beq.n	80064a0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a14      	ldr	r2, [pc, #80]	; (80064e4 <USB_HostInit+0x164>)
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <USB_HostInit+0x168>)
 800649a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800649e:	e009      	b.n	80064b4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a10      	ldr	r2, [pc, #64]	; (80064ec <USB_HostInit+0x16c>)
 80064aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a10      	ldr	r2, [pc, #64]	; (80064f0 <USB_HostInit+0x170>)
 80064b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d105      	bne.n	80064c6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f043 0210 	orr.w	r2, r3, #16
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <USB_HostInit+0x174>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064de:	b004      	add	sp, #16
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	01000200 	.word	0x01000200
 80064e8:	00e00300 	.word	0x00e00300
 80064ec:	00600080 	.word	0x00600080
 80064f0:	004000e0 	.word	0x004000e0
 80064f4:	a3200008 	.word	0xa3200008

080064f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d107      	bne.n	800654a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006540:	461a      	mov	r2, r3
 8006542:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006546:	6053      	str	r3, [r2, #4]
 8006548:	e009      	b.n	800655e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d106      	bne.n	800655e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006556:	461a      	mov	r2, r3
 8006558:	f241 7370 	movw	r3, #6000	; 0x1770
 800655c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800658c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800659c:	2064      	movs	r0, #100	; 0x64
 800659e:	f7fa fc97 	bl	8000ed0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80065b0:	200a      	movs	r0, #10
 80065b2:	f7fa fc8d 	bl	8000ed0 <HAL_Delay>

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <USB_DriveVbus+0x44>
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d106      	bne.n	8006604 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006602:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d109      	bne.n	8006624 <USB_DriveVbus+0x64>
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800661e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006622:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	0c5b      	lsrs	r3, r3, #17
 8006650:	f003 0303 	and.w	r3, r3, #3
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	b29b      	uxth	r3, r3
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	461a      	mov	r2, r3
 8006692:	4603      	mov	r3, r0
 8006694:	70fb      	strb	r3, [r7, #3]
 8006696:	460b      	mov	r3, r1
 8006698:	70bb      	strb	r3, [r7, #2]
 800669a:	4613      	mov	r3, r2
 800669c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	015a      	lsls	r2, r3, #5
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b2:	461a      	mov	r2, r3
 80066b4:	f04f 33ff 	mov.w	r3, #4294967295
 80066b8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80066ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d87e      	bhi.n	80067c0 <USB_HC_Init+0x13c>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <USB_HC_Init+0x44>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	080066d9 	.word	0x080066d9
 80066cc:	08006783 	.word	0x08006783
 80066d0:	080066d9 	.word	0x080066d9
 80066d4:	08006745 	.word	0x08006745
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e4:	461a      	mov	r2, r3
 80066e6:	f240 439d 	movw	r3, #1181	; 0x49d
 80066ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80066ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da10      	bge.n	8006716 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	78fa      	ldrb	r2, [r7, #3]
 8006704:	0151      	lsls	r1, r2, #5
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	440a      	add	r2, r1
 800670a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006714:	e057      	b.n	80067c6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d051      	beq.n	80067c6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4413      	add	r3, r2
 800672a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	440a      	add	r2, r1
 8006738:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800673c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006740:	60d3      	str	r3, [r2, #12]
      break;
 8006742:	e040      	b.n	80067c6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4413      	add	r3, r2
 800674c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006750:	461a      	mov	r2, r3
 8006752:	f240 639d 	movw	r3, #1693	; 0x69d
 8006756:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006758:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800675c:	2b00      	cmp	r3, #0
 800675e:	da34      	bge.n	80067ca <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4413      	add	r3, r2
 8006768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	440a      	add	r2, r1
 8006776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800677a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006780:	e023      	b.n	80067ca <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	461a      	mov	r2, r3
 8006790:	f240 2325 	movw	r3, #549	; 0x225
 8006794:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006796:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800679a:	2b00      	cmp	r3, #0
 800679c:	da17      	bge.n	80067ce <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800679e:	78fb      	ldrb	r3, [r7, #3]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80067bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067be:	e006      	b.n	80067ce <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
      break;
 80067c4:	e004      	b.n	80067d0 <USB_HC_Init+0x14c>
      break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <USB_HC_Init+0x14c>
      break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <USB_HC_Init+0x14c>
      break;
 80067ce:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	78fb      	ldrb	r3, [r7, #3]
 80067da:	f003 030f 	and.w	r3, r3, #15
 80067de:	2101      	movs	r1, #1
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067ea:	4313      	orrs	r3, r2
 80067ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da03      	bge.n	800680a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	e001      	b.n	800680e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800680e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006812:	2b02      	cmp	r3, #2
 8006814:	d103      	bne.n	800681e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006816:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e001      	b.n	8006822 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006822:	787b      	ldrb	r3, [r7, #1]
 8006824:	059b      	lsls	r3, r3, #22
 8006826:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800682a:	78bb      	ldrb	r3, [r7, #2]
 800682c:	02db      	lsls	r3, r3, #11
 800682e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006832:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006834:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006838:	049b      	lsls	r3, r3, #18
 800683a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800683e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006842:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006846:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800684c:	78fb      	ldrb	r3, [r7, #3]
 800684e:	0159      	lsls	r1, r3, #5
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	440b      	add	r3, r1
 8006854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006858:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800685e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006864:	2b03      	cmp	r3, #3
 8006866:	d10f      	bne.n	8006888 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	440a      	add	r2, r1
 800687e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006886:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop

08006898 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08c      	sub	sp, #48	; 0x30
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d028      	beq.n	8006914 <USB_HC_StartXfer+0x7c>
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	791b      	ldrb	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d124      	bne.n	8006914 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10b      	bne.n	80068e8 <USB_HC_StartXfer+0x50>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	795b      	ldrb	r3, [r3, #5]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d107      	bne.n	80068e8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	4619      	mov	r1, r3
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fa30 	bl	8006d44 <USB_DoPing>
      return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e114      	b.n	8006b12 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d112      	bne.n	8006914 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	440a      	add	r2, r1
 8006904:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006908:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800690c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d018      	beq.n	800694e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	68ba      	ldr	r2, [r7, #8]
 8006922:	8912      	ldrh	r2, [r2, #8]
 8006924:	4413      	add	r3, r2
 8006926:	3b01      	subs	r3, #1
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	8912      	ldrh	r2, [r2, #8]
 800692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006930:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006934:	8b7b      	ldrh	r3, [r7, #26]
 8006936:	429a      	cmp	r2, r3
 8006938:	d90b      	bls.n	8006952 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800693a:	8b7b      	ldrh	r3, [r7, #26]
 800693c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800693e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	8912      	ldrh	r2, [r2, #8]
 8006944:	fb02 f203 	mul.w	r2, r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	611a      	str	r2, [r3, #16]
 800694c:	e001      	b.n	8006952 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800694e:	2301      	movs	r3, #1
 8006950:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	78db      	ldrb	r3, [r3, #3]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d006      	beq.n	8006968 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800695a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800695c:	68ba      	ldr	r2, [r7, #8]
 800695e:	8912      	ldrh	r2, [r2, #8]
 8006960:	fb02 f203 	mul.w	r2, r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006970:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006972:	04d9      	lsls	r1, r3, #19
 8006974:	4b69      	ldr	r3, [pc, #420]	; (8006b1c <USB_HC_StartXfer+0x284>)
 8006976:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006978:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	7a9b      	ldrb	r3, [r3, #10]
 800697e:	075b      	lsls	r3, r3, #29
 8006980:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006984:	69f9      	ldr	r1, [r7, #28]
 8006986:	0148      	lsls	r0, r1, #5
 8006988:	6a39      	ldr	r1, [r7, #32]
 800698a:	4401      	add	r1, r0
 800698c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006990:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006992:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006994:	79fb      	ldrb	r3, [r7, #7]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	68d9      	ldr	r1, [r3, #12]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069aa:	460a      	mov	r2, r1
 80069ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	bf0c      	ite	eq
 80069be:	2301      	moveq	r3, #1
 80069c0:	2300      	movne	r3, #0
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69fa      	ldr	r2, [r7, #28]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	7e7b      	ldrb	r3, [r7, #25]
 80069f6:	075b      	lsls	r3, r3, #29
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	0148      	lsls	r0, r1, #5
 80069fc:	6a39      	ldr	r1, [r7, #32]
 80069fe:	4401      	add	r1, r0
 8006a00:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006a04:	4313      	orrs	r3, r2
 8006a06:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a42      	ldr	r2, [pc, #264]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a18:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a1a:	4b41      	ldr	r3, [pc, #260]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a22:	4a3f      	ldr	r2, [pc, #252]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a24:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a2e:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a36:	4a3a      	ldr	r2, [pc, #232]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e005      	b.n	8006a48 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a3c:	4b38      	ldr	r3, [pc, #224]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a44:	4a36      	ldr	r2, [pc, #216]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a46:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a48:	4b35      	ldr	r3, [pc, #212]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a50:	4a33      	ldr	r2, [pc, #204]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a52:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	4b2f      	ldr	r3, [pc, #188]	; (8006b20 <USB_HC_StartXfer+0x288>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a68:	79fb      	ldrb	r3, [r7, #7]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e04f      	b.n	8006b12 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d14a      	bne.n	8006b10 <USB_HC_StartXfer+0x278>
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d046      	beq.n	8006b10 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	79db      	ldrb	r3, [r3, #7]
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d830      	bhi.n	8006aec <USB_HC_StartXfer+0x254>
 8006a8a:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <USB_HC_StartXfer+0x1f8>)
 8006a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a90:	08006aa1 	.word	0x08006aa1
 8006a94:	08006ac5 	.word	0x08006ac5
 8006a98:	08006aa1 	.word	0x08006aa1
 8006a9c:	08006ac5 	.word	0x08006ac5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	3303      	adds	r3, #3
 8006aa6:	089b      	lsrs	r3, r3, #2
 8006aa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006aaa:	8afa      	ldrh	r2, [r7, #22]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d91c      	bls.n	8006af0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	f043 0220 	orr.w	r2, r3, #32
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ac2:	e015      	b.n	8006af0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	3303      	adds	r3, #3
 8006aca:	089b      	lsrs	r3, r3, #2
 8006acc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ace:	8afa      	ldrh	r2, [r7, #22]
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d90a      	bls.n	8006af4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006aea:	e003      	b.n	8006af4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006aec:	bf00      	nop
 8006aee:	e002      	b.n	8006af6 <USB_HC_StartXfer+0x25e>
        break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <USB_HC_StartXfer+0x25e>
        break;
 8006af4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	68d9      	ldr	r1, [r3, #12]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	785a      	ldrb	r2, [r3, #1]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	b298      	uxth	r0, r3
 8006b04:	2300      	movs	r3, #0
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	4603      	mov	r3, r0
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fb84 	bl	8006218 <USB_WritePacket>
  }

  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3728      	adds	r7, #40	; 0x28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	1ff80000 	.word	0x1ff80000
 8006b20:	200000b0 	.word	0x200000b0

08006b24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	b29b      	uxth	r3, r3
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	460b      	mov	r3, r1
 8006b50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	0c9b      	lsrs	r3, r3, #18
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <USB_HC_Halt+0x3a>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d16c      	bne.n	8006c5a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b9e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d143      	bne.n	8006c34 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c0a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c18:	d81d      	bhi.n	8006c56 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c30:	d0ec      	beq.n	8006c0c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c32:	e080      	b.n	8006d36 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c54:	e06f      	b.n	8006d36 <USB_HC_Halt+0x1f0>
          break;
 8006c56:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c58:	e06d      	b.n	8006d36 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c78:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d143      	bne.n	8006d12 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ce8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf6:	d81d      	bhi.n	8006d34 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0e:	d0ec      	beq.n	8006cea <USB_HC_Halt+0x1a4>
 8006d10:	e011      	b.n	8006d36 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e000      	b.n	8006d36 <USB_HC_Halt+0x1f0>
          break;
 8006d34:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	04da      	lsls	r2, r3, #19
 8006d60:	4b15      	ldr	r3, [pc, #84]	; (8006db8 <USB_DoPing+0x74>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d8c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da2:	461a      	mov	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	1ff80000 	.word	0x1ff80000

08006dbc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff f99f 	bl	8006110 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006dd2:	2110      	movs	r1, #16
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff f9d7 	bl	8006188 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff f9fa 	bl	80061d4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	613b      	str	r3, [r7, #16]
 8006de4:	e01f      	b.n	8006e26 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e0c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	3301      	adds	r3, #1
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b0f      	cmp	r3, #15
 8006e2a:	d9dc      	bls.n	8006de6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	e034      	b.n	8006e9c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e48:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e50:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e58:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e66:	461a      	mov	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e78:	d80c      	bhi.n	8006e94 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e90:	d0ec      	beq.n	8006e6c <USB_StopHost+0xb0>
 8006e92:	e000      	b.n	8006e96 <USB_StopHost+0xda>
        break;
 8006e94:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d9c7      	bls.n	8006e32 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff f918 	bl	80060ee <USB_EnableGlobalInt>

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ec8:	b590      	push	{r4, r7, lr}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	2102      	movs	r1, #2
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc68 	bl	80077ac <USBH_FindInterface>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2bff      	cmp	r3, #255	; 0xff
 8006ee4:	d002      	beq.n	8006eec <USBH_CDC_InterfaceInit+0x24>
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d901      	bls.n	8006ef0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006eec:	2302      	movs	r3, #2
 8006eee:	e13d      	b.n	800716c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc3d 	bl	8007774 <USBH_SelectInterface>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f04:	2302      	movs	r3, #2
 8006f06:	e131      	b.n	800716c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f0e:	2050      	movs	r0, #80	; 0x50
 8006f10:	f002 fa04 	bl	800931c <malloc>
 8006f14:	4603      	mov	r3, r0
 8006f16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e11f      	b.n	800716c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f2c:	2250      	movs	r2, #80	; 0x50
 8006f2e:	2100      	movs	r1, #0
 8006f30:	68b8      	ldr	r0, [r7, #8]
 8006f32:	f002 fa03 	bl	800933c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	211a      	movs	r1, #26
 8006f3c:	fb01 f303 	mul.w	r3, r1, r3
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da15      	bge.n	8006f7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	211a      	movs	r1, #26
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	4413      	add	r3, r2
 8006f5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	211a      	movs	r1, #26
 8006f6a:	fb01 f303 	mul.w	r3, r1, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fe36 	bl	8008bf2 <USBH_AllocPipe>
 8006f86:	4603      	mov	r3, r0
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	7819      	ldrb	r1, [r3, #0]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7858      	ldrb	r0, [r3, #1]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	8952      	ldrh	r2, [r2, #10]
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	2203      	movs	r2, #3
 8006faa:	9201      	str	r2, [sp, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4623      	mov	r3, r4
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fdee 	bl	8008b94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f002 f8fb 	bl	80091bc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	2200      	movs	r2, #0
 8006fca:	210a      	movs	r1, #10
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fbed 	bl	80077ac <USBH_FindInterface>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2bff      	cmp	r3, #255	; 0xff
 8006fda:	d002      	beq.n	8006fe2 <USBH_CDC_InterfaceInit+0x11a>
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d901      	bls.n	8006fe6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e0c2      	b.n	800716c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	211a      	movs	r1, #26
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	b25b      	sxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	da16      	bge.n	800702c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	211a      	movs	r1, #26
 8007004:	fb01 f303 	mul.w	r3, r1, r3
 8007008:	4413      	add	r3, r2
 800700a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	211a      	movs	r1, #26
 800701a:	fb01 f303 	mul.w	r3, r1, r3
 800701e:	4413      	add	r3, r2
 8007020:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	835a      	strh	r2, [r3, #26]
 800702a:	e015      	b.n	8007058 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	211a      	movs	r1, #26
 8007032:	fb01 f303 	mul.w	r3, r1, r3
 8007036:	4413      	add	r3, r2
 8007038:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	211a      	movs	r1, #26
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	4413      	add	r3, r2
 800704e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	211a      	movs	r1, #26
 800705e:	fb01 f303 	mul.w	r3, r1, r3
 8007062:	4413      	add	r3, r2
 8007064:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b25b      	sxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	da16      	bge.n	800709e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	211a      	movs	r1, #26
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4413      	add	r3, r2
 800707c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007080:	781a      	ldrb	r2, [r3, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	211a      	movs	r1, #26
 800708c:	fb01 f303 	mul.w	r3, r1, r3
 8007090:	4413      	add	r3, r2
 8007092:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007096:	881a      	ldrh	r2, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	835a      	strh	r2, [r3, #26]
 800709c:	e015      	b.n	80070ca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	211a      	movs	r1, #26
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	4413      	add	r3, r2
 80070aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070ae:	781a      	ldrb	r2, [r3, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	211a      	movs	r1, #26
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	4413      	add	r3, r2
 80070c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070c4:	881a      	ldrh	r2, [r3, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	7b9b      	ldrb	r3, [r3, #14]
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 fd8e 	bl	8008bf2 <USBH_AllocPipe>
 80070d6:	4603      	mov	r3, r0
 80070d8:	461a      	mov	r2, r3
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	7bdb      	ldrb	r3, [r3, #15]
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 fd84 	bl	8008bf2 <USBH_AllocPipe>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	7b59      	ldrb	r1, [r3, #13]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	7b98      	ldrb	r0, [r3, #14]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	8b12      	ldrh	r2, [r2, #24]
 800710a:	9202      	str	r2, [sp, #8]
 800710c:	2202      	movs	r2, #2
 800710e:	9201      	str	r2, [sp, #4]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	4623      	mov	r3, r4
 8007114:	4602      	mov	r2, r0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fd3c 	bl	8008b94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	7b19      	ldrb	r1, [r3, #12]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	7bd8      	ldrb	r0, [r3, #15]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	8b52      	ldrh	r2, [r2, #26]
 8007134:	9202      	str	r2, [sp, #8]
 8007136:	2202      	movs	r2, #2
 8007138:	9201      	str	r2, [sp, #4]
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	4623      	mov	r3, r4
 800713e:	4602      	mov	r2, r0
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fd27 	bl	8008b94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	7b5b      	ldrb	r3, [r3, #13]
 8007152:	2200      	movs	r2, #0
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f002 f830 	bl	80091bc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	7b1b      	ldrb	r3, [r3, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f002 f829 	bl	80091bc <USBH_LL_SetToggle>

  return USBH_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}

08007174 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00e      	beq.n	80071ac <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fd1c 	bl	8008bd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 fd47 	bl	8008c34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	7b1b      	ldrb	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00e      	beq.n	80071d2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	7b1b      	ldrb	r3, [r3, #12]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 fd09 	bl	8008bd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	7b1b      	ldrb	r3, [r3, #12]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 fd34 	bl	8008c34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	7b5b      	ldrb	r3, [r3, #13]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00e      	beq.n	80071f8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	7b5b      	ldrb	r3, [r3, #13]
 80071de:	4619      	mov	r1, r3
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f001 fcf6 	bl	8008bd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	7b5b      	ldrb	r3, [r3, #13]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fd21 	bl	8008c34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00b      	beq.n	800721c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	4618      	mov	r0, r3
 800720e:	f002 f88d 	bl	800932c <free>
    phost->pActiveClass->pData = 0U;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007218:	2200      	movs	r2, #0
 800721a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3340      	adds	r3, #64	; 0x40
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f8b1 	bl	80073a6 <GetLineCoding>
 8007244:	4603      	mov	r3, r0
 8007246:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007254:	2102      	movs	r1, #2
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800725a:	7afb      	ldrb	r3, [r7, #11]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800726c:	2301      	movs	r3, #1
 800726e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007284:	2b04      	cmp	r3, #4
 8007286:	d877      	bhi.n	8007378 <USBH_CDC_Process+0x114>
 8007288:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <USBH_CDC_Process+0x2c>)
 800728a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728e:	bf00      	nop
 8007290:	080072a5 	.word	0x080072a5
 8007294:	080072ab 	.word	0x080072ab
 8007298:	080072db 	.word	0x080072db
 800729c:	0800734f 	.word	0x0800734f
 80072a0:	0800735d 	.word	0x0800735d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73fb      	strb	r3, [r7, #15]
      break;
 80072a8:	e06d      	b.n	8007386 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f897 	bl	80073e4 <SetLineCoding>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072c8:	e058      	b.n	800737c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d055      	beq.n	800737c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2204      	movs	r2, #4
 80072d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072d8:	e050      	b.n	800737c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	3340      	adds	r3, #64	; 0x40
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f860 	bl	80073a6 <GetLineCoding>
 80072e6:	4603      	mov	r3, r0
 80072e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d126      	bne.n	800733e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007302:	791b      	ldrb	r3, [r3, #4]
 8007304:	429a      	cmp	r2, r3
 8007306:	d13b      	bne.n	8007380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007312:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007314:	429a      	cmp	r2, r3
 8007316:	d133      	bne.n	8007380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007322:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007324:	429a      	cmp	r2, r3
 8007326:	d12b      	bne.n	8007380 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007330:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007332:	429a      	cmp	r2, r3
 8007334:	d124      	bne.n	8007380 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f95a 	bl	80075f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800733c:	e020      	b.n	8007380 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d01d      	beq.n	8007380 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2204      	movs	r2, #4
 8007348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800734c:	e018      	b.n	8007380 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f867 	bl	8007422 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f8dc 	bl	8007512 <CDC_ProcessReception>
      break;
 800735a:	e014      	b.n	8007386 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800735c:	2100      	movs	r1, #0
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 ffe5 	bl	800832e <USBH_ClrFeature>
 8007364:	4603      	mov	r3, r0
 8007366:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007376:	e005      	b.n	8007384 <USBH_CDC_Process+0x120>

    default:
      break;
 8007378:	bf00      	nop
 800737a:	e004      	b.n	8007386 <USBH_CDC_Process+0x122>
      break;
 800737c:	bf00      	nop
 800737e:	e002      	b.n	8007386 <USBH_CDC_Process+0x122>
      break;
 8007380:	bf00      	nop
 8007382:	e000      	b.n	8007386 <USBH_CDC_Process+0x122>
      break;
 8007384:	bf00      	nop

  }

  return status;
 8007386:	7bfb      	ldrb	r3, [r7, #15]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	22a1      	movs	r2, #161	; 0xa1
 80073b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2221      	movs	r2, #33	; 0x21
 80073ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2207      	movs	r2, #7
 80073cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2207      	movs	r2, #7
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f98a 	bl	80086ee <USBH_CtlReq>
 80073da:	4603      	mov	r3, r0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2221      	movs	r2, #33	; 0x21
 80073f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2207      	movs	r2, #7
 800740a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2207      	movs	r2, #7
 8007410:	4619      	mov	r1, r3
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 f96b 	bl	80086ee <USBH_CtlReq>
 8007418:	4603      	mov	r3, r0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b086      	sub	sp, #24
 8007426:	af02      	add	r7, sp, #8
 8007428:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007434:	2300      	movs	r3, #0
 8007436:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800743e:	2b01      	cmp	r3, #1
 8007440:	d002      	beq.n	8007448 <CDC_ProcessTransmission+0x26>
 8007442:	2b02      	cmp	r3, #2
 8007444:	d025      	beq.n	8007492 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007446:	e060      	b.n	800750a <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	8b12      	ldrh	r2, [r2, #24]
 8007450:	4293      	cmp	r3, r2
 8007452:	d90c      	bls.n	800746e <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	69d9      	ldr	r1, [r3, #28]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8b1a      	ldrh	r2, [r3, #24]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	7b58      	ldrb	r0, [r3, #13]
 8007460:	2301      	movs	r3, #1
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4603      	mov	r3, r0
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fb51 	bl	8008b0e <USBH_BulkSendData>
 800746c:	e00c      	b.n	8007488 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	7b58      	ldrb	r0, [r3, #13]
 800747c:	2301      	movs	r3, #1
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	4603      	mov	r3, r0
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f001 fb43 	bl	8008b0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007490:	e03b      	b.n	800750a <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	7b5b      	ldrb	r3, [r3, #13]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 fe65 	bl	8009168 <USBH_LL_GetURBState>
 800749e:	4603      	mov	r3, r0
 80074a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80074a2:	7afb      	ldrb	r3, [r7, #11]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d128      	bne.n	80074fa <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	8b12      	ldrh	r2, [r2, #24]
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d90e      	bls.n	80074d2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	8b12      	ldrh	r2, [r2, #24]
 80074bc:	1a9a      	subs	r2, r3, r2
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	8b12      	ldrh	r2, [r2, #24]
 80074ca:	441a      	add	r2, r3
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	61da      	str	r2, [r3, #28]
 80074d0:	e002      	b.n	80074d8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074e8:	e00e      	b.n	8007508 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f868 	bl	80075c8 <USBH_CDC_TransmitCallback>
      break;
 80074f8:	e006      	b.n	8007508 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80074fa:	7afb      	ldrb	r3, [r7, #11]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d103      	bne.n	8007508 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007508:	bf00      	nop
  }
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b086      	sub	sp, #24
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007524:	2300      	movs	r3, #0
 8007526:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800752e:	2b03      	cmp	r3, #3
 8007530:	d002      	beq.n	8007538 <CDC_ProcessReception+0x26>
 8007532:	2b04      	cmp	r3, #4
 8007534:	d00e      	beq.n	8007554 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007536:	e043      	b.n	80075c0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	6a19      	ldr	r1, [r3, #32]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	8b5a      	ldrh	r2, [r3, #26]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	7b1b      	ldrb	r3, [r3, #12]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fb07 	bl	8008b58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2204      	movs	r2, #4
 800754e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007552:	e035      	b.n	80075c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	7b1b      	ldrb	r3, [r3, #12]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fe04 	bl	8009168 <USBH_LL_GetURBState>
 8007560:	4603      	mov	r3, r0
 8007562:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007564:	7cfb      	ldrb	r3, [r7, #19]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d129      	bne.n	80075be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	7b1b      	ldrb	r3, [r3, #12]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 fd67 	bl	8009044 <USBH_LL_GetLastXferSize>
 8007576:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	429a      	cmp	r2, r3
 8007580:	d016      	beq.n	80075b0 <CDC_ProcessReception+0x9e>
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	8b5b      	ldrh	r3, [r3, #26]
 8007586:	461a      	mov	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	4293      	cmp	r3, r2
 800758c:	d910      	bls.n	80075b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	1ad2      	subs	r2, r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	441a      	add	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2203      	movs	r2, #3
 80075aa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80075ae:	e006      	b.n	80075be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f80f 	bl	80075dc <USBH_CDC_ReceiveCallback>
      break;
 80075be:	bf00      	nop
  }
}
 80075c0:	bf00      	nop
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007618:	2302      	movs	r3, #2
 800761a:	e029      	b.n	8007670 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	79fa      	ldrb	r2, [r7, #7]
 8007620:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f81f 	bl	8007678 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f001 fc39 	bl	8008ee0 <USBH_LL_Init>

  return USBH_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007684:	2300      	movs	r3, #0
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e009      	b.n	800769e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	33e0      	adds	r3, #224	; 0xe0
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b0e      	cmp	r3, #14
 80076a2:	d9f2      	bls.n	800768a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076a4:	2300      	movs	r3, #0
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	e009      	b.n	80076be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80076b4:	2200      	movs	r2, #0
 80076b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c4:	d3f1      	bcc.n	80076aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2240      	movs	r2, #64	; 0x40
 80076ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3714      	adds	r7, #20
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10e      	bne.n	800775c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007744:	1c59      	adds	r1, r3, #1
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	33de      	adds	r3, #222	; 0xde
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
 800775a:	e004      	b.n	8007766 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	73fb      	strb	r3, [r7, #15]
 8007760:	e001      	b.n	8007766 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007762:	2302      	movs	r3, #2
 8007764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	429a      	cmp	r2, r3
 800778e:	d204      	bcs.n	800779a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007798:	e001      	b.n	800779e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800779a:	2302      	movs	r3, #2
 800779c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	4603      	mov	r3, r0
 80077bc:	70fb      	strb	r3, [r7, #3]
 80077be:	460b      	mov	r3, r1
 80077c0:	70bb      	strb	r3, [r7, #2]
 80077c2:	4613      	mov	r3, r2
 80077c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80077d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077d6:	e025      	b.n	8007824 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	221a      	movs	r2, #26
 80077dc:	fb02 f303 	mul.w	r3, r2, r3
 80077e0:	3308      	adds	r3, #8
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4413      	add	r3, r2
 80077e6:	3302      	adds	r3, #2
 80077e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	795b      	ldrb	r3, [r3, #5]
 80077ee:	78fa      	ldrb	r2, [r7, #3]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d002      	beq.n	80077fa <USBH_FindInterface+0x4e>
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	2bff      	cmp	r3, #255	; 0xff
 80077f8:	d111      	bne.n	800781e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077fe:	78ba      	ldrb	r2, [r7, #2]
 8007800:	429a      	cmp	r2, r3
 8007802:	d002      	beq.n	800780a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007804:	78bb      	ldrb	r3, [r7, #2]
 8007806:	2bff      	cmp	r3, #255	; 0xff
 8007808:	d109      	bne.n	800781e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800780e:	787a      	ldrb	r2, [r7, #1]
 8007810:	429a      	cmp	r2, r3
 8007812:	d002      	beq.n	800781a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007814:	787b      	ldrb	r3, [r7, #1]
 8007816:	2bff      	cmp	r3, #255	; 0xff
 8007818:	d101      	bne.n	800781e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
 800781c:	e006      	b.n	800782c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	3301      	adds	r3, #1
 8007822:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d9d6      	bls.n	80077d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800782a:	23ff      	movs	r3, #255	; 0xff
}
 800782c:	4618      	mov	r0, r3
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fb89 	bl	8008f58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007846:	2101      	movs	r1, #1
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fca0 	bl	800918e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af04      	add	r7, sp, #16
 800785e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007860:	2302      	movs	r3, #2
 8007862:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007864:	2300      	movs	r3, #0
 8007866:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b01      	cmp	r3, #1
 8007872:	d102      	bne.n	800787a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b0b      	cmp	r3, #11
 8007882:	f200 81b3 	bhi.w	8007bec <USBH_Process+0x394>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <USBH_Process+0x34>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078bd 	.word	0x080078bd
 8007890:	080078ef 	.word	0x080078ef
 8007894:	08007957 	.word	0x08007957
 8007898:	08007b87 	.word	0x08007b87
 800789c:	08007bed 	.word	0x08007bed
 80078a0:	080079fb 	.word	0x080079fb
 80078a4:	08007b2d 	.word	0x08007b2d
 80078a8:	08007a31 	.word	0x08007a31
 80078ac:	08007a51 	.word	0x08007a51
 80078b0:	08007a71 	.word	0x08007a71
 80078b4:	08007a9f 	.word	0x08007a9f
 80078b8:	08007b6f 	.word	0x08007b6f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8193 	beq.w	8007bf0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80078d0:	20c8      	movs	r0, #200	; 0xc8
 80078d2:	f001 fca6 	bl	8009222 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fb99 	bl	800900e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078ec:	e180      	b.n	8007bf0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d107      	bne.n	8007908 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007906:	e182      	b.n	8007c0e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800790e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007912:	d914      	bls.n	800793e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800791a:	3301      	adds	r3, #1
 800791c:	b2da      	uxtb	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800792a:	2b03      	cmp	r3, #3
 800792c:	d903      	bls.n	8007936 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	220d      	movs	r2, #13
 8007932:	701a      	strb	r2, [r3, #0]
      break;
 8007934:	e16b      	b.n	8007c0e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
      break;
 800793c:	e167      	b.n	8007c0e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007944:	f103 020a 	add.w	r2, r3, #10
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800794e:	200a      	movs	r0, #10
 8007950:	f001 fc67 	bl	8009222 <USBH_Delay>
      break;
 8007954:	e15b      	b.n	8007c0e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007966:	2104      	movs	r1, #4
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800796c:	2064      	movs	r0, #100	; 0x64
 800796e:	f001 fc58 	bl	8009222 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fb26 	bl	8008fc4 <USBH_LL_GetSpeed>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2205      	movs	r2, #5
 8007986:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007988:	2100      	movs	r1, #0
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f931 	bl	8008bf2 <USBH_AllocPipe>
 8007990:	4603      	mov	r3, r0
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 f929 	bl	8008bf2 <USBH_AllocPipe>
 80079a0:	4603      	mov	r3, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	7919      	ldrb	r1, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80079bc:	b292      	uxth	r2, r2
 80079be:	9202      	str	r2, [sp, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	9201      	str	r2, [sp, #4]
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4603      	mov	r3, r0
 80079c8:	2280      	movs	r2, #128	; 0x80
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 f8e2 	bl	8008b94 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7959      	ldrb	r1, [r3, #5]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80079e4:	b292      	uxth	r2, r2
 80079e6:	9202      	str	r2, [sp, #8]
 80079e8:	2200      	movs	r2, #0
 80079ea:	9201      	str	r2, [sp, #4]
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	4603      	mov	r3, r0
 80079f0:	2200      	movs	r2, #0
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 f8ce 	bl	8008b94 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079f8:	e109      	b.n	8007c0e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f90c 	bl	8007c18 <USBH_HandleEnum>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 80f3 	bne.w	8007bf4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d103      	bne.n	8007a28 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2208      	movs	r2, #8
 8007a24:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a26:	e0e5      	b.n	8007bf4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2207      	movs	r2, #7
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e0e1      	b.n	8007bf4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 80de 	beq.w	8007bf8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a42:	2101      	movs	r1, #1
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2208      	movs	r2, #8
 8007a4c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007a4e:	e0d3      	b.n	8007bf8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fc20 	bl	80082a0 <USBH_SetCfg>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f040 80ca 	bne.w	8007bfc <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2209      	movs	r2, #9
 8007a6c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a6e:	e0c5      	b.n	8007bfc <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007a7e:	2101      	movs	r1, #1
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc30 	bl	80082e6 <USBH_SetFeature>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f040 80b9 	bne.w	8007c00 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	220a      	movs	r2, #10
 8007a92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a94:	e0b4      	b.n	8007c00 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220a      	movs	r2, #10
 8007a9a:	701a      	strb	r2, [r3, #0]
      break;
 8007a9c:	e0b0      	b.n	8007c00 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 80ad 	beq.w	8007c04 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	e016      	b.n	8007ae6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ab8:	7bfa      	ldrb	r2, [r7, #15]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	32de      	adds	r2, #222	; 0xde
 8007abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac2:	791a      	ldrb	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d108      	bne.n	8007ae0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ace:	7bfa      	ldrb	r2, [r7, #15]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	32de      	adds	r2, #222	; 0xde
 8007ad4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007ade:	e005      	b.n	8007aec <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	73fb      	strb	r3, [r7, #15]
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0e5      	beq.n	8007ab8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	4798      	blx	r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d109      	bne.n	8007b1c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b14:	2103      	movs	r1, #3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b1a:	e073      	b.n	8007c04 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	220d      	movs	r2, #13
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e06f      	b.n	8007c04 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	220d      	movs	r2, #13
 8007b28:	701a      	strb	r2, [r3, #0]
      break;
 8007b2a:	e06b      	b.n	8007c04 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d017      	beq.n	8007b66 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	4798      	blx	r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220b      	movs	r2, #11
 8007b52:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b54:	e058      	b.n	8007c08 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d154      	bne.n	8007c08 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	220d      	movs	r2, #13
 8007b62:	701a      	strb	r2, [r3, #0]
      break;
 8007b64:	e050      	b.n	8007c08 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	220d      	movs	r2, #13
 8007b6a:	701a      	strb	r2, [r3, #0]
      break;
 8007b6c:	e04c      	b.n	8007c08 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d049      	beq.n	8007c0c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
      }
      break;
 8007b84:	e042      	b.n	8007c0c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff fd72 	bl	8007678 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d005      	beq.n	8007bc8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bc2:	2105      	movs	r1, #5
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d107      	bne.n	8007be4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fe2b 	bl	8007838 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007be2:	e014      	b.n	8007c0e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 f9b7 	bl	8008f58 <USBH_LL_Start>
      break;
 8007bea:	e010      	b.n	8007c0e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007bec:	bf00      	nop
 8007bee:	e00e      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e00c      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007bf4:	bf00      	nop
 8007bf6:	e00a      	b.n	8007c0e <USBH_Process+0x3b6>
    break;
 8007bf8:	bf00      	nop
 8007bfa:	e008      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e006      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007c00:	bf00      	nop
 8007c02:	e004      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007c04:	bf00      	nop
 8007c06:	e002      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007c08:	bf00      	nop
 8007c0a:	e000      	b.n	8007c0e <USBH_Process+0x3b6>
      break;
 8007c0c:	bf00      	nop
  }
  return USBH_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af04      	add	r7, sp, #16
 8007c1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c20:	2301      	movs	r3, #1
 8007c22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	785b      	ldrb	r3, [r3, #1]
 8007c2c:	2b07      	cmp	r3, #7
 8007c2e:	f200 81c1 	bhi.w	8007fb4 <USBH_HandleEnum+0x39c>
 8007c32:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <USBH_HandleEnum+0x20>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c59 	.word	0x08007c59
 8007c3c:	08007d17 	.word	0x08007d17
 8007c40:	08007d81 	.word	0x08007d81
 8007c44:	08007e0f 	.word	0x08007e0f
 8007c48:	08007e79 	.word	0x08007e79
 8007c4c:	08007ee9 	.word	0x08007ee9
 8007c50:	08007f2f 	.word	0x08007f2f
 8007c54:	08007f75 	.word	0x08007f75
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007c58:	2108      	movs	r1, #8
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa50 	bl	8008100 <USBH_Get_DevDesc>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d130      	bne.n	8007ccc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7919      	ldrb	r1, [r3, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007c8e:	b292      	uxth	r2, r2
 8007c90:	9202      	str	r2, [sp, #8]
 8007c92:	2200      	movs	r2, #0
 8007c94:	9201      	str	r2, [sp, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 ff79 	bl	8008b94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7959      	ldrb	r1, [r3, #5]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007cb6:	b292      	uxth	r2, r2
 8007cb8:	9202      	str	r2, [sp, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	9201      	str	r2, [sp, #4]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 ff65 	bl	8008b94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007cca:	e175      	b.n	8007fb8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	f040 8172 	bne.w	8007fb8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cda:	3301      	adds	r3, #1
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d903      	bls.n	8007cf6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	220d      	movs	r2, #13
 8007cf2:	701a      	strb	r2, [r3, #0]
      break;
 8007cf4:	e160      	b.n	8007fb8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	795b      	ldrb	r3, [r3, #5]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ff99 	bl	8008c34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	791b      	ldrb	r3, [r3, #4]
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 ff93 	bl	8008c34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
      break;
 8007d14:	e150      	b.n	8007fb8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d16:	2112      	movs	r1, #18
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9f1 	bl	8008100 <USBH_Get_DevDesc>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d2e:	e145      	b.n	8007fbc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	f040 8142 	bne.w	8007fbc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d3e:	3301      	adds	r3, #1
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d903      	bls.n	8007d5a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	220d      	movs	r2, #13
 8007d56:	701a      	strb	r2, [r3, #0]
      break;
 8007d58:	e130      	b.n	8007fbc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 ff67 	bl	8008c34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	791b      	ldrb	r3, [r3, #4]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 ff61 	bl	8008c34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
      break;
 8007d7e:	e11d      	b.n	8007fbc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007d80:	2101      	movs	r1, #1
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa68 	bl	8008258 <USBH_SetAddress>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d132      	bne.n	8007df8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007d92:	2002      	movs	r0, #2
 8007d94:	f001 fa45 	bl	8009222 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2203      	movs	r2, #3
 8007da4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	7919      	ldrb	r1, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007dba:	b292      	uxth	r2, r2
 8007dbc:	9202      	str	r2, [sp, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	9201      	str	r2, [sp, #4]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2280      	movs	r2, #128	; 0x80
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fee3 	bl	8008b94 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7959      	ldrb	r1, [r3, #5]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007de2:	b292      	uxth	r2, r2
 8007de4:	9202      	str	r2, [sp, #8]
 8007de6:	2200      	movs	r2, #0
 8007de8:	9201      	str	r2, [sp, #4]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4603      	mov	r3, r0
 8007dee:	2200      	movs	r2, #0
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fecf 	bl	8008b94 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007df6:	e0e3      	b.n	8007fc0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	f040 80e0 	bne.w	8007fc0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	220d      	movs	r2, #13
 8007e04:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	705a      	strb	r2, [r3, #1]
      break;
 8007e0c:	e0d8      	b.n	8007fc0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e0e:	2109      	movs	r1, #9
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f99d 	bl	8008150 <USBH_Get_CfgDesc>
 8007e16:	4603      	mov	r3, r0
 8007e18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2204      	movs	r2, #4
 8007e24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e26:	e0cd      	b.n	8007fc4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e28:	7bbb      	ldrb	r3, [r7, #14]
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	f040 80ca 	bne.w	8007fc4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e36:	3301      	adds	r3, #1
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d903      	bls.n	8007e52 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220d      	movs	r2, #13
 8007e4e:	701a      	strb	r2, [r3, #0]
      break;
 8007e50:	e0b8      	b.n	8007fc4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	795b      	ldrb	r3, [r3, #5]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 feeb 	bl	8008c34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	791b      	ldrb	r3, [r3, #4]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fee5 	bl	8008c34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
      break;
 8007e76:	e0a5      	b.n	8007fc4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f965 	bl	8008150 <USBH_Get_CfgDesc>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d103      	bne.n	8007e98 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2205      	movs	r2, #5
 8007e94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e96:	e097      	b.n	8007fc8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	f040 8094 	bne.w	8007fc8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d903      	bls.n	8007ec2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	220d      	movs	r2, #13
 8007ebe:	701a      	strb	r2, [r3, #0]
      break;
 8007ec0:	e082      	b.n	8007fc8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 feb3 	bl	8008c34 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	791b      	ldrb	r3, [r3, #4]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fead 	bl	8008c34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
      break;
 8007ee6:	e06f      	b.n	8007fc8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d019      	beq.n	8007f26 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007efe:	23ff      	movs	r3, #255	; 0xff
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f949 	bl	8008198 <USBH_Get_StringDesc>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2206      	movs	r2, #6
 8007f14:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f16:	e059      	b.n	8007fcc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d156      	bne.n	8007fcc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2206      	movs	r2, #6
 8007f22:	705a      	strb	r2, [r3, #1]
      break;
 8007f24:	e052      	b.n	8007fcc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2206      	movs	r2, #6
 8007f2a:	705a      	strb	r2, [r3, #1]
      break;
 8007f2c:	e04e      	b.n	8007fcc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d019      	beq.n	8007f6c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f44:	23ff      	movs	r3, #255	; 0xff
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f926 	bl	8008198 <USBH_Get_StringDesc>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2207      	movs	r2, #7
 8007f5a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f5c:	e038      	b.n	8007fd0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d135      	bne.n	8007fd0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2207      	movs	r2, #7
 8007f68:	705a      	strb	r2, [r3, #1]
      break;
 8007f6a:	e031      	b.n	8007fd0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2207      	movs	r2, #7
 8007f70:	705a      	strb	r2, [r3, #1]
      break;
 8007f72:	e02d      	b.n	8007fd0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007f8a:	23ff      	movs	r3, #255	; 0xff
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f903 	bl	8008198 <USBH_Get_StringDesc>
 8007f92:	4603      	mov	r3, r0
 8007f94:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007fa0:	e018      	b.n	8007fd4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fa2:	7bbb      	ldrb	r3, [r7, #14]
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d115      	bne.n	8007fd4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
      break;
 8007fac:	e012      	b.n	8007fd4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb2:	e00f      	b.n	8007fd4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007fb4:	bf00      	nop
 8007fb6:	e00e      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e00c      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e00a      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e008      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fc4:	bf00      	nop
 8007fc6:	e006      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fc8:	bf00      	nop
 8007fca:	e004      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fcc:	bf00      	nop
 8007fce:	e002      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e000      	b.n	8007fd6 <USBH_HandleEnum+0x3be>
      break;
 8007fd4:	bf00      	nop
  }
  return Status;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 f804 	bl	8008022 <USBH_HandleSof>
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b0b      	cmp	r3, #11
 8008032:	d10a      	bne.n	800804a <USBH_HandleSof+0x28>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
  }
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008062:	bf00      	nop
}
 8008064:	370c      	adds	r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800806e:	b480      	push	{r7}
 8008070:	b083      	sub	sp, #12
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800807e:	bf00      	nop
}
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 ff58 	bl	8008f8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	791b      	ldrb	r3, [r3, #4]
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fda5 	bl	8008c34 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	795b      	ldrb	r3, [r3, #5]
 80080ee:	4619      	mov	r1, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 fd9f 	bl	8008c34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	b29b      	uxth	r3, r3
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4613      	mov	r3, r2
 800811a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f864 	bl	80081ee <USBH_GetDescriptor>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
 800812a:	7bfb      	ldrb	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	b292      	uxth	r2, r2
 8008140:	4619      	mov	r1, r3
 8008142:	f000 f918 	bl	8008376 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008146:	7bfb      	ldrb	r3, [r7, #15]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af02      	add	r7, sp, #8
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	331c      	adds	r3, #28
 8008160:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008162:	887b      	ldrh	r3, [r7, #2]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800816c:	2100      	movs	r1, #0
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f83d 	bl	80081ee <USBH_GetDescriptor>
 8008174:	4603      	mov	r3, r0
 8008176:	72fb      	strb	r3, [r7, #11]
 8008178:	7afb      	ldrb	r3, [r7, #11]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008184:	887a      	ldrh	r2, [r7, #2]
 8008186:	68f9      	ldr	r1, [r7, #12]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 f964 	bl	8008456 <USBH_ParseCfgDesc>
  }

  return status;
 800818e:	7afb      	ldrb	r3, [r7, #11]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	461a      	mov	r2, r3
 80081a4:	460b      	mov	r3, r1
 80081a6:	72fb      	strb	r3, [r7, #11]
 80081a8:	4613      	mov	r3, r2
 80081aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80081ac:	7afb      	ldrb	r3, [r7, #11]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80081b4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80081bc:	893b      	ldrh	r3, [r7, #8]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	460b      	mov	r3, r1
 80081c2:	2100      	movs	r1, #0
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f000 f812 	bl	80081ee <USBH_GetDescriptor>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d107      	bne.n	80081e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081da:	893a      	ldrh	r2, [r7, #8]
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fa37 	bl	8008652 <USBH_ParseStringDesc>
  }

  return status;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	460b      	mov	r3, r1
 80081fa:	72fb      	strb	r3, [r7, #11]
 80081fc:	4613      	mov	r3, r2
 80081fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d11c      	bne.n	8008242 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800820e:	b2da      	uxtb	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2206      	movs	r2, #6
 8008218:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	893a      	ldrh	r2, [r7, #8]
 800821e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008220:	893b      	ldrh	r3, [r7, #8]
 8008222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800822a:	d104      	bne.n	8008236 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f240 4209 	movw	r2, #1033	; 0x409
 8008232:	829a      	strh	r2, [r3, #20]
 8008234:	e002      	b.n	800823c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	8b3a      	ldrh	r2, [r7, #24]
 8008240:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008242:	8b3b      	ldrh	r3, [r7, #24]
 8008244:	461a      	mov	r2, r3
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fa50 	bl	80086ee <USBH_CtlReq>
 800824e:	4603      	mov	r3, r0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	789b      	ldrb	r3, [r3, #2]
 8008268:	2b01      	cmp	r3, #1
 800826a:	d10f      	bne.n	800828c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2205      	movs	r2, #5
 8008276:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	b29a      	uxth	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800828c:	2200      	movs	r2, #0
 800828e:	2100      	movs	r1, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fa2c 	bl	80086ee <USBH_CtlReq>
 8008296:	4603      	mov	r3, r0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	460b      	mov	r3, r1
 80082aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	789b      	ldrb	r3, [r3, #2]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d10e      	bne.n	80082d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2209      	movs	r2, #9
 80082be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	887a      	ldrh	r2, [r7, #2]
 80082c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082d2:	2200      	movs	r2, #0
 80082d4:	2100      	movs	r1, #0
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa09 	bl	80086ee <USBH_CtlReq>
 80082dc:	4603      	mov	r3, r0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	789b      	ldrb	r3, [r3, #2]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d10f      	bne.n	800831a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2203      	movs	r2, #3
 8008304:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008306:	78fb      	ldrb	r3, [r7, #3]
 8008308:	b29a      	uxth	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800831a:	2200      	movs	r2, #0
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9e5 	bl	80086ee <USBH_CtlReq>
 8008324:	4603      	mov	r3, r0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	789b      	ldrb	r3, [r3, #2]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d10f      	bne.n	8008362 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2202      	movs	r2, #2
 8008346:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008362:	2200      	movs	r2, #0
 8008364:	2100      	movs	r1, #0
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 f9c1 	bl	80086ee <USBH_CtlReq>
 800836c:	4603      	mov	r3, r0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008376:	b480      	push	{r7}
 8008378:	b085      	sub	sp, #20
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	4613      	mov	r3, r2
 8008382:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	785a      	ldrb	r2, [r3, #1]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	3302      	adds	r3, #2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	b29a      	uxth	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	3303      	adds	r3, #3
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	4313      	orrs	r3, r2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	791a      	ldrb	r2, [r3, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	795a      	ldrb	r2, [r3, #5]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	799a      	ldrb	r2, [r3, #6]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	79da      	ldrb	r2, [r3, #7]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80083d0:	88fb      	ldrh	r3, [r7, #6]
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d939      	bls.n	800844a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3308      	adds	r3, #8
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3309      	adds	r3, #9
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	021b      	lsls	r3, r3, #8
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	4313      	orrs	r3, r2
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	330a      	adds	r3, #10
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	b29a      	uxth	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	330b      	adds	r3, #11
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	330c      	adds	r3, #12
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	b29a      	uxth	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	330d      	adds	r3, #13
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	b29b      	uxth	r3, r3
 8008422:	4313      	orrs	r3, r2
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	7b9a      	ldrb	r2, [r3, #14]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	7bda      	ldrb	r2, [r3, #15]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	7c1a      	ldrb	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	7c5a      	ldrb	r2, [r3, #17]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	745a      	strb	r2, [r3, #17]
  }
}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b08a      	sub	sp, #40	; 0x28
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	4613      	mov	r3, r2
 8008462:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	785a      	ldrb	r2, [r3, #1]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3302      	adds	r3, #2
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b29a      	uxth	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3303      	adds	r3, #3
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b29b      	uxth	r3, r3
 800849c:	4313      	orrs	r3, r2
 800849e:	b29a      	uxth	r2, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	791a      	ldrb	r2, [r3, #4]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	795a      	ldrb	r2, [r3, #5]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	799a      	ldrb	r2, [r3, #6]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	79da      	ldrb	r2, [r3, #7]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	7a1a      	ldrb	r2, [r3, #8]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	2b09      	cmp	r3, #9
 80084d0:	d95f      	bls.n	8008592 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80084d2:	2309      	movs	r3, #9
 80084d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084da:	e051      	b.n	8008580 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80084dc:	f107 0316 	add.w	r3, r7, #22
 80084e0:	4619      	mov	r1, r3
 80084e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084e4:	f000 f8e8 	bl	80086b8 <USBH_GetNextDesc>
 80084e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	d146      	bne.n	8008580 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80084f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084f6:	221a      	movs	r2, #26
 80084f8:	fb02 f303 	mul.w	r3, r2, r3
 80084fc:	3308      	adds	r3, #8
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	4413      	add	r3, r2
 8008502:	3302      	adds	r3, #2
 8008504:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008508:	69f8      	ldr	r0, [r7, #28]
 800850a:	f000 f846 	bl	800859a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008518:	e022      	b.n	8008560 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800851a:	f107 0316 	add.w	r3, r7, #22
 800851e:	4619      	mov	r1, r3
 8008520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008522:	f000 f8c9 	bl	80086b8 <USBH_GetNextDesc>
 8008526:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b05      	cmp	r3, #5
 800852e:	d117      	bne.n	8008560 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008534:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008538:	3201      	adds	r2, #1
 800853a:	00d2      	lsls	r2, r2, #3
 800853c:	211a      	movs	r1, #26
 800853e:	fb01 f303 	mul.w	r3, r1, r3
 8008542:	4413      	add	r3, r2
 8008544:	3308      	adds	r3, #8
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	3304      	adds	r3, #4
 800854c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800854e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008550:	69b8      	ldr	r0, [r7, #24]
 8008552:	f000 f851 	bl	80085f8 <USBH_ParseEPDesc>
            ep_ix++;
 8008556:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800855a:	3301      	adds	r3, #1
 800855c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	791b      	ldrb	r3, [r3, #4]
 8008564:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008568:	429a      	cmp	r2, r3
 800856a:	d204      	bcs.n	8008576 <USBH_ParseCfgDesc+0x120>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	885a      	ldrh	r2, [r3, #2]
 8008570:	8afb      	ldrh	r3, [r7, #22]
 8008572:	429a      	cmp	r2, r3
 8008574:	d8d1      	bhi.n	800851a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800857a:	3301      	adds	r3, #1
 800857c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008584:	2b01      	cmp	r3, #1
 8008586:	d804      	bhi.n	8008592 <USBH_ParseCfgDesc+0x13c>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	885a      	ldrh	r2, [r3, #2]
 800858c:	8afb      	ldrh	r3, [r7, #22]
 800858e:	429a      	cmp	r2, r3
 8008590:	d8a4      	bhi.n	80084dc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008592:	bf00      	nop
 8008594:	3728      	adds	r7, #40	; 0x28
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	785a      	ldrb	r2, [r3, #1]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	789a      	ldrb	r2, [r3, #2]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	78da      	ldrb	r2, [r3, #3]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	791a      	ldrb	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	795a      	ldrb	r2, [r3, #5]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	799a      	ldrb	r2, [r3, #6]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	79da      	ldrb	r2, [r3, #7]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	7a1a      	ldrb	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	721a      	strb	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	781a      	ldrb	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	785a      	ldrb	r2, [r3, #1]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	789a      	ldrb	r2, [r3, #2]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	78da      	ldrb	r2, [r3, #3]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	3304      	adds	r3, #4
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	b29a      	uxth	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	3305      	adds	r3, #5
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	799a      	ldrb	r2, [r3, #6]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	719a      	strb	r2, [r3, #6]
}
 8008646:	bf00      	nop
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008652:	b480      	push	{r7}
 8008654:	b087      	sub	sp, #28
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	4613      	mov	r3, r2
 800865e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d120      	bne.n	80086ac <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	1e9a      	subs	r2, r3, #2
 8008670:	88fb      	ldrh	r3, [r7, #6]
 8008672:	4293      	cmp	r3, r2
 8008674:	bf28      	it	cs
 8008676:	4613      	movcs	r3, r2
 8008678:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3302      	adds	r3, #2
 800867e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008680:	2300      	movs	r3, #0
 8008682:	82fb      	strh	r3, [r7, #22]
 8008684:	e00b      	b.n	800869e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008686:	8afb      	ldrh	r3, [r7, #22]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	4413      	add	r3, r2
 800868c:	781a      	ldrb	r2, [r3, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	3301      	adds	r3, #1
 8008696:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008698:	8afb      	ldrh	r3, [r7, #22]
 800869a:	3302      	adds	r3, #2
 800869c:	82fb      	strh	r3, [r7, #22]
 800869e:	8afa      	ldrh	r2, [r7, #22]
 80086a0:	8abb      	ldrh	r3, [r7, #20]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d3ef      	bcc.n	8008686 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	701a      	strb	r2, [r3, #0]
  }
}
 80086ac:	bf00      	nop
 80086ae:	371c      	adds	r7, #28
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	881a      	ldrh	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	4413      	add	r3, r2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086e0:	68fb      	ldr	r3, [r7, #12]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	4613      	mov	r3, r2
 80086fa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	789b      	ldrb	r3, [r3, #2]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d002      	beq.n	800870e <USBH_CtlReq+0x20>
 8008708:	2b02      	cmp	r3, #2
 800870a:	d00f      	beq.n	800872c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800870c:	e027      	b.n	800875e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2202      	movs	r2, #2
 8008724:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
      break;
 800872a:	e018      	b.n	800875e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f81b 	bl	8008768 <USBH_HandleControl>
 8008732:	4603      	mov	r3, r0
 8008734:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <USBH_CtlReq+0x54>
 800873c:	7dfb      	ldrb	r3, [r7, #23]
 800873e:	2b03      	cmp	r3, #3
 8008740:	d106      	bne.n	8008750 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	761a      	strb	r2, [r3, #24]
      break;
 800874e:	e005      	b.n	800875c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d102      	bne.n	800875c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	709a      	strb	r2, [r3, #2]
      break;
 800875c:	bf00      	nop
  }
  return status;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	7e1b      	ldrb	r3, [r3, #24]
 800877c:	3b01      	subs	r3, #1
 800877e:	2b0a      	cmp	r3, #10
 8008780:	f200 8158 	bhi.w	8008a34 <USBH_HandleControl+0x2cc>
 8008784:	a201      	add	r2, pc, #4	; (adr r2, 800878c <USBH_HandleControl+0x24>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087b9 	.word	0x080087b9
 8008790:	080087d3 	.word	0x080087d3
 8008794:	0800883d 	.word	0x0800883d
 8008798:	08008863 	.word	0x08008863
 800879c:	0800889b 	.word	0x0800889b
 80087a0:	080088c7 	.word	0x080088c7
 80087a4:	08008919 	.word	0x08008919
 80087a8:	0800893b 	.word	0x0800893b
 80087ac:	08008977 	.word	0x08008977
 80087b0:	0800899f 	.word	0x0800899f
 80087b4:	080089dd 	.word	0x080089dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f103 0110 	add.w	r1, r3, #16
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	795b      	ldrb	r3, [r3, #5]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f945 	bl	8008a54 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	761a      	strb	r2, [r3, #24]
      break;
 80087d0:	e13b      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	795b      	ldrb	r3, [r3, #5]
 80087d6:	4619      	mov	r1, r3
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fcc5 	bl	8009168 <USBH_LL_GetURBState>
 80087de:	4603      	mov	r3, r0
 80087e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d11e      	bne.n	8008826 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	7c1b      	ldrb	r3, [r3, #16]
 80087ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8adb      	ldrh	r3, [r3, #22]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087fa:	7b7b      	ldrb	r3, [r7, #13]
 80087fc:	2b80      	cmp	r3, #128	; 0x80
 80087fe:	d103      	bne.n	8008808 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2203      	movs	r2, #3
 8008804:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008806:	e117      	b.n	8008a38 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2205      	movs	r2, #5
 800880c:	761a      	strb	r2, [r3, #24]
      break;
 800880e:	e113      	b.n	8008a38 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008810:	7b7b      	ldrb	r3, [r7, #13]
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d103      	bne.n	800881e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2209      	movs	r2, #9
 800881a:	761a      	strb	r2, [r3, #24]
      break;
 800881c:	e10c      	b.n	8008a38 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2207      	movs	r2, #7
 8008822:	761a      	strb	r2, [r3, #24]
      break;
 8008824:	e108      	b.n	8008a38 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b04      	cmp	r3, #4
 800882a:	d003      	beq.n	8008834 <USBH_HandleControl+0xcc>
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	2b02      	cmp	r3, #2
 8008830:	f040 8102 	bne.w	8008a38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	220b      	movs	r2, #11
 8008838:	761a      	strb	r2, [r3, #24]
      break;
 800883a:	e0fd      	b.n	8008a38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008842:	b29a      	uxth	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6899      	ldr	r1, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	899a      	ldrh	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	791b      	ldrb	r3, [r3, #4]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f93c 	bl	8008ad2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2204      	movs	r2, #4
 800885e:	761a      	strb	r2, [r3, #24]
      break;
 8008860:	e0f3      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	791b      	ldrb	r3, [r3, #4]
 8008866:	4619      	mov	r1, r3
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fc7d 	bl	8009168 <USBH_LL_GetURBState>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d102      	bne.n	800887e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2209      	movs	r2, #9
 800887c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800887e:	7bbb      	ldrb	r3, [r7, #14]
 8008880:	2b05      	cmp	r3, #5
 8008882:	d102      	bne.n	800888a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008884:	2303      	movs	r3, #3
 8008886:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008888:	e0d8      	b.n	8008a3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b04      	cmp	r3, #4
 800888e:	f040 80d5 	bne.w	8008a3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	220b      	movs	r2, #11
 8008896:	761a      	strb	r2, [r3, #24]
      break;
 8008898:	e0d0      	b.n	8008a3c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6899      	ldr	r1, [r3, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	899a      	ldrh	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	7958      	ldrb	r0, [r3, #5]
 80088a6:	2301      	movs	r3, #1
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	4603      	mov	r3, r0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8eb 	bl	8008a88 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2206      	movs	r2, #6
 80088c2:	761a      	strb	r2, [r3, #24]
      break;
 80088c4:	e0c1      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	795b      	ldrb	r3, [r3, #5]
 80088ca:	4619      	mov	r1, r3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fc4b 	bl	8009168 <USBH_LL_GetURBState>
 80088d2:	4603      	mov	r3, r0
 80088d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d103      	bne.n	80088e4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2207      	movs	r2, #7
 80088e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088e2:	e0ad      	b.n	8008a40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80088e4:	7bbb      	ldrb	r3, [r7, #14]
 80088e6:	2b05      	cmp	r3, #5
 80088e8:	d105      	bne.n	80088f6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	220c      	movs	r2, #12
 80088ee:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80088f0:	2303      	movs	r3, #3
 80088f2:	73fb      	strb	r3, [r7, #15]
      break;
 80088f4:	e0a4      	b.n	8008a40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80088f6:	7bbb      	ldrb	r3, [r7, #14]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d103      	bne.n	8008904 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2205      	movs	r2, #5
 8008900:	761a      	strb	r2, [r3, #24]
      break;
 8008902:	e09d      	b.n	8008a40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b04      	cmp	r3, #4
 8008908:	f040 809a 	bne.w	8008a40 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	220b      	movs	r2, #11
 8008910:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008912:	2302      	movs	r3, #2
 8008914:	73fb      	strb	r3, [r7, #15]
      break;
 8008916:	e093      	b.n	8008a40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	791b      	ldrb	r3, [r3, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	2100      	movs	r1, #0
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f8d6 	bl	8008ad2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2208      	movs	r2, #8
 8008936:	761a      	strb	r2, [r3, #24]

      break;
 8008938:	e087      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	791b      	ldrb	r3, [r3, #4]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 fc11 	bl	8009168 <USBH_LL_GetURBState>
 8008946:	4603      	mov	r3, r0
 8008948:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d105      	bne.n	800895c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	220d      	movs	r2, #13
 8008954:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800895a:	e073      	b.n	8008a44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d103      	bne.n	800896a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	220b      	movs	r2, #11
 8008966:	761a      	strb	r2, [r3, #24]
      break;
 8008968:	e06c      	b.n	8008a44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800896a:	7bbb      	ldrb	r3, [r7, #14]
 800896c:	2b05      	cmp	r3, #5
 800896e:	d169      	bne.n	8008a44 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008970:	2303      	movs	r3, #3
 8008972:	73fb      	strb	r3, [r7, #15]
      break;
 8008974:	e066      	b.n	8008a44 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	795a      	ldrb	r2, [r3, #5]
 800897a:	2301      	movs	r3, #1
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	4613      	mov	r3, r2
 8008980:	2200      	movs	r2, #0
 8008982:	2100      	movs	r1, #0
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f87f 	bl	8008a88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008990:	b29a      	uxth	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	220a      	movs	r2, #10
 800899a:	761a      	strb	r2, [r3, #24]
      break;
 800899c:	e055      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	795b      	ldrb	r3, [r3, #5]
 80089a2:	4619      	mov	r1, r3
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fbdf 	bl	8009168 <USBH_LL_GetURBState>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d105      	bne.n	80089c0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	220d      	movs	r2, #13
 80089bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089be:	e043      	b.n	8008a48 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d103      	bne.n	80089ce <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2209      	movs	r2, #9
 80089ca:	761a      	strb	r2, [r3, #24]
      break;
 80089cc:	e03c      	b.n	8008a48 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d139      	bne.n	8008a48 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	220b      	movs	r2, #11
 80089d8:	761a      	strb	r2, [r3, #24]
      break;
 80089da:	e035      	b.n	8008a48 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	7e5b      	ldrb	r3, [r3, #25]
 80089e0:	3301      	adds	r3, #1
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	765a      	strb	r2, [r3, #25]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	7e5b      	ldrb	r3, [r3, #25]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d806      	bhi.n	80089fe <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80089fc:	e025      	b.n	8008a4a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a04:	2106      	movs	r1, #6
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	795b      	ldrb	r3, [r3, #5]
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f90c 	bl	8008c34 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	791b      	ldrb	r3, [r3, #4]
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f906 	bl	8008c34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a2e:	2302      	movs	r3, #2
 8008a30:	73fb      	strb	r3, [r7, #15]
      break;
 8008a32:	e00a      	b.n	8008a4a <USBH_HandleControl+0x2e2>

    default:
      break;
 8008a34:	bf00      	nop
 8008a36:	e008      	b.n	8008a4a <USBH_HandleControl+0x2e2>
      break;
 8008a38:	bf00      	nop
 8008a3a:	e006      	b.n	8008a4a <USBH_HandleControl+0x2e2>
      break;
 8008a3c:	bf00      	nop
 8008a3e:	e004      	b.n	8008a4a <USBH_HandleControl+0x2e2>
      break;
 8008a40:	bf00      	nop
 8008a42:	e002      	b.n	8008a4a <USBH_HandleControl+0x2e2>
      break;
 8008a44:	bf00      	nop
 8008a46:	e000      	b.n	8008a4a <USBH_HandleControl+0x2e2>
      break;
 8008a48:	bf00      	nop
  }

  return status;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3710      	adds	r7, #16
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008a62:	79f9      	ldrb	r1, [r7, #7]
 8008a64:	2300      	movs	r3, #0
 8008a66:	9303      	str	r3, [sp, #12]
 8008a68:	2308      	movs	r3, #8
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	9301      	str	r3, [sp, #4]
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	2300      	movs	r3, #0
 8008a76:	2200      	movs	r2, #0
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fb44 	bl	8009106 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af04      	add	r7, sp, #16
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4611      	mov	r1, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	460b      	mov	r3, r1
 8008a98:	80fb      	strh	r3, [r7, #6]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d001      	beq.n	8008aac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008aac:	7979      	ldrb	r1, [r7, #5]
 8008aae:	7e3b      	ldrb	r3, [r7, #24]
 8008ab0:	9303      	str	r3, [sp, #12]
 8008ab2:	88fb      	ldrh	r3, [r7, #6]
 8008ab4:	9302      	str	r3, [sp, #8]
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	2301      	movs	r3, #1
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fb1f 	bl	8009106 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b088      	sub	sp, #32
 8008ad6:	af04      	add	r7, sp, #16
 8008ad8:	60f8      	str	r0, [r7, #12]
 8008ada:	60b9      	str	r1, [r7, #8]
 8008adc:	4611      	mov	r1, r2
 8008ade:	461a      	mov	r2, r3
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	80fb      	strh	r3, [r7, #6]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ae8:	7979      	ldrb	r1, [r7, #5]
 8008aea:	2300      	movs	r3, #0
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	88fb      	ldrh	r3, [r7, #6]
 8008af0:	9302      	str	r3, [sp, #8]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	2301      	movs	r3, #1
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	2300      	movs	r3, #0
 8008afc:	2201      	movs	r2, #1
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fb01 	bl	8009106 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b04:	2300      	movs	r3, #0

}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b088      	sub	sp, #32
 8008b12:	af04      	add	r7, sp, #16
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	80fb      	strh	r3, [r7, #6]
 8008b20:	4613      	mov	r3, r2
 8008b22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b32:	7979      	ldrb	r1, [r7, #5]
 8008b34:	7e3b      	ldrb	r3, [r7, #24]
 8008b36:	9303      	str	r3, [sp, #12]
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	2301      	movs	r3, #1
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2302      	movs	r3, #2
 8008b46:	2200      	movs	r2, #0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 fadc 	bl	8009106 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af04      	add	r7, sp, #16
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	4611      	mov	r1, r2
 8008b64:	461a      	mov	r2, r3
 8008b66:	460b      	mov	r3, r1
 8008b68:	80fb      	strh	r3, [r7, #6]
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b6e:	7979      	ldrb	r1, [r7, #5]
 8008b70:	2300      	movs	r3, #0
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	88fb      	ldrh	r3, [r7, #6]
 8008b76:	9302      	str	r3, [sp, #8]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2302      	movs	r3, #2
 8008b82:	2201      	movs	r2, #1
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fabe 	bl	8009106 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	70fb      	strb	r3, [r7, #3]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	70bb      	strb	r3, [r7, #2]
 8008baa:	4613      	mov	r3, r2
 8008bac:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bae:	7878      	ldrb	r0, [r7, #1]
 8008bb0:	78ba      	ldrb	r2, [r7, #2]
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	8b3b      	ldrh	r3, [r7, #24]
 8008bb6:	9302      	str	r3, [sp, #8]
 8008bb8:	7d3b      	ldrb	r3, [r7, #20]
 8008bba:	9301      	str	r3, [sp, #4]
 8008bbc:	7c3b      	ldrb	r3, [r7, #16]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa51 	bl	800906a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa70 	bl	80090c8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f836 	bl	8008c70 <USBH_GetFreePipe>
 8008c04:	4603      	mov	r3, r0
 8008c06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c08:	89fb      	ldrh	r3, [r7, #14]
 8008c0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00a      	beq.n	8008c28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c12:	78fa      	ldrb	r2, [r7, #3]
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	f003 030f 	and.w	r3, r3, #15
 8008c1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	33e0      	adds	r3, #224	; 0xe0
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	440b      	add	r3, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c28:	89fb      	ldrh	r3, [r7, #14]
 8008c2a:	b2db      	uxtb	r3, r3
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	2b0a      	cmp	r3, #10
 8008c44:	d80d      	bhi.n	8008c62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	33e0      	adds	r3, #224	; 0xe0
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	33e0      	adds	r3, #224	; 0xe0
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
 8008c80:	e00f      	b.n	8008ca2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	33e0      	adds	r3, #224	; 0xe0
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	e007      	b.n	8008cac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	2b0a      	cmp	r3, #10
 8008ca6:	d9ec      	bls.n	8008c82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	490e      	ldr	r1, [pc, #56]	; (8008cf8 <MX_USB_HOST_Init+0x40>)
 8008cc0:	480e      	ldr	r0, [pc, #56]	; (8008cfc <MX_USB_HOST_Init+0x44>)
 8008cc2:	f7fe fc9f 	bl	8007604 <USBH_Init>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ccc:	f7f7 fe9c 	bl	8000a08 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cd0:	490b      	ldr	r1, [pc, #44]	; (8008d00 <MX_USB_HOST_Init+0x48>)
 8008cd2:	480a      	ldr	r0, [pc, #40]	; (8008cfc <MX_USB_HOST_Init+0x44>)
 8008cd4:	f7fe fd24 	bl	8007720 <USBH_RegisterClass>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cde:	f7f7 fe93 	bl	8000a08 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008ce2:	4806      	ldr	r0, [pc, #24]	; (8008cfc <MX_USB_HOST_Init+0x44>)
 8008ce4:	f7fe fda8 	bl	8007838 <USBH_Start>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008cee:	f7f7 fe8b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008cf2:	bf00      	nop
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	08008d19 	.word	0x08008d19
 8008cfc:	200001b8 	.word	0x200001b8
 8008d00:	2000000c 	.word	0x2000000c

08008d04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d08:	4802      	ldr	r0, [pc, #8]	; (8008d14 <MX_USB_HOST_Process+0x10>)
 8008d0a:	f7fe fda5 	bl	8007858 <USBH_Process>
}
 8008d0e:	bf00      	nop
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	200001b8 	.word	0x200001b8

08008d18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	460b      	mov	r3, r1
 8008d22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d819      	bhi.n	8008d60 <USBH_UserProcess+0x48>
 8008d2c:	a201      	add	r2, pc, #4	; (adr r2, 8008d34 <USBH_UserProcess+0x1c>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d61 	.word	0x08008d61
 8008d38:	08008d51 	.word	0x08008d51
 8008d3c:	08008d61 	.word	0x08008d61
 8008d40:	08008d59 	.word	0x08008d59
 8008d44:	08008d49 	.word	0x08008d49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <USBH_UserProcess+0x58>)
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	701a      	strb	r2, [r3, #0]
  break;
 8008d4e:	e008      	b.n	8008d62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d50:	4b07      	ldr	r3, [pc, #28]	; (8008d70 <USBH_UserProcess+0x58>)
 8008d52:	2202      	movs	r2, #2
 8008d54:	701a      	strb	r2, [r3, #0]
  break;
 8008d56:	e004      	b.n	8008d62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <USBH_UserProcess+0x58>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	701a      	strb	r2, [r3, #0]
  break;
 8008d5e:	e000      	b.n	8008d62 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d62:	bf00      	nop
 8008d64:	370c      	adds	r7, #12
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	200000b4 	.word	0x200000b4

08008d74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d7c:	f107 0314 	add.w	r3, r7, #20
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	60da      	str	r2, [r3, #12]
 8008d8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d94:	d147      	bne.n	8008e26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d96:	2300      	movs	r3, #0
 8008d98:	613b      	str	r3, [r7, #16]
 8008d9a:	4b25      	ldr	r3, [pc, #148]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9e:	4a24      	ldr	r2, [pc, #144]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008da0:	f043 0301 	orr.w	r3, r3, #1
 8008da4:	6313      	str	r3, [r2, #48]	; 0x30
 8008da6:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	613b      	str	r3, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008db2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008db8:	2300      	movs	r3, #0
 8008dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dc0:	f107 0314 	add.w	r3, r7, #20
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	481b      	ldr	r0, [pc, #108]	; (8008e34 <HAL_HCD_MspInit+0xc0>)
 8008dc8:	f7f8 f9e6 	bl	8001198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008dcc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008dde:	230a      	movs	r3, #10
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de2:	f107 0314 	add.w	r3, r7, #20
 8008de6:	4619      	mov	r1, r3
 8008de8:	4812      	ldr	r0, [pc, #72]	; (8008e34 <HAL_HCD_MspInit+0xc0>)
 8008dea:	f7f8 f9d5 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008dee:	4b10      	ldr	r3, [pc, #64]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df2:	4a0f      	ldr	r2, [pc, #60]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	6353      	str	r3, [r2, #52]	; 0x34
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e02:	4a0b      	ldr	r2, [pc, #44]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e08:	6453      	str	r3, [r2, #68]	; 0x44
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <HAL_HCD_MspInit+0xbc>)
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e16:	2200      	movs	r2, #0
 8008e18:	2100      	movs	r1, #0
 8008e1a:	2043      	movs	r0, #67	; 0x43
 8008e1c:	f7f8 f955 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e20:	2043      	movs	r0, #67	; 0x43
 8008e22:	f7f8 f96e 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e26:	bf00      	nop
 8008e28:	3728      	adds	r7, #40	; 0x28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	40023800 	.word	0x40023800
 8008e34:	40020000 	.word	0x40020000

08008e38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff f8d9 	bl	8007ffe <USBH_LL_IncTimer>
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7ff f911 	bl	800808a <USBH_LL_Connect>
}
 8008e68:	bf00      	nop
 8008e6a:	3708      	adds	r7, #8
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7ff f91a 	bl	80080b8 <USBH_LL_Disconnect>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff f8cb 	bl	8008052 <USBH_LL_PortEnabled>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff f8cb 	bl	800806e <USBH_LL_PortDisabled>
}
 8008ed8:	bf00      	nop
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d12a      	bne.n	8008f48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008ef2:	4a18      	ldr	r2, [pc, #96]	; (8008f54 <USBH_LL_Init+0x74>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <USBH_LL_Init+0x74>)
 8008efe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f02:	4b14      	ldr	r3, [pc, #80]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f0a:	4b12      	ldr	r3, [pc, #72]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f0c:	2208      	movs	r2, #8
 8008f0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f10:	4b10      	ldr	r3, [pc, #64]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f1e:	2202      	movs	r2, #2
 8008f20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f28:	480a      	ldr	r0, [pc, #40]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f2a:	f7f8 fb03 	bl	8001534 <HAL_HCD_Init>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f34:	f7f7 fd68 	bl	8000a08 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f38:	4806      	ldr	r0, [pc, #24]	; (8008f54 <USBH_LL_Init+0x74>)
 8008f3a:	f7f8 ff07 	bl	8001d4c <HAL_HCD_GetCurrentFrame>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7ff f84c 	bl	8007fe0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	20000590 	.word	0x20000590

08008f58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7f8 fe74 	bl	8001c5c <HAL_HCD_Start>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 f95c 	bl	8009238 <USBH_Get_USB_Status>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7f8 fe7c 	bl	8001ca2 <HAL_HCD_Stop>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f000 f941 	bl	8009238 <USBH_Get_USB_Status>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7f8 fec6 	bl	8001d68 <HAL_HCD_GetCurrentSpeed>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d007      	beq.n	8008ff2 <USBH_LL_GetSpeed+0x2e>
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d302      	bcc.n	8008fec <USBH_LL_GetSpeed+0x28>
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d006      	beq.n	8008ff8 <USBH_LL_GetSpeed+0x34>
 8008fea:	e008      	b.n	8008ffe <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff0:	e008      	b.n	8009004 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff6:	e005      	b.n	8009004 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffc:	e002      	b.n	8009004 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008ffe:	2301      	movs	r3, #1
 8009000:	73fb      	strb	r3, [r7, #15]
    break;
 8009002:	bf00      	nop
  }
  return  speed;
 8009004:	7bfb      	ldrb	r3, [r7, #15]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009024:	4618      	mov	r0, r3
 8009026:	f7f8 fe59 	bl	8001cdc <HAL_HCD_ResetPort>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f901 	bl	8009238 <USBH_Get_USB_Status>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903a:	7bbb      	ldrb	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009056:	78fa      	ldrb	r2, [r7, #3]
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f7f8 fe61 	bl	8001d22 <HAL_HCD_HC_GetXferCount>
 8009060:	4603      	mov	r3, r0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800906a:	b590      	push	{r4, r7, lr}
 800906c:	b089      	sub	sp, #36	; 0x24
 800906e:	af04      	add	r7, sp, #16
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	461a      	mov	r2, r3
 8009078:	4603      	mov	r3, r0
 800907a:	70fb      	strb	r3, [r7, #3]
 800907c:	460b      	mov	r3, r1
 800907e:	70bb      	strb	r3, [r7, #2]
 8009080:	4613      	mov	r3, r2
 8009082:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009092:	787c      	ldrb	r4, [r7, #1]
 8009094:	78ba      	ldrb	r2, [r7, #2]
 8009096:	78f9      	ldrb	r1, [r7, #3]
 8009098:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4623      	mov	r3, r4
 80090aa:	f7f8 faa5 	bl	80015f8 <HAL_HCD_HC_Init>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f8bf 	bl	8009238 <USBH_Get_USB_Status>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd90      	pop	{r4, r7, pc}

080090c8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	460b      	mov	r3, r1
 80090d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090e2:	78fa      	ldrb	r2, [r7, #3]
 80090e4:	4611      	mov	r1, r2
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7f8 fb1e 	bl	8001728 <HAL_HCD_HC_Halt>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 f8a0 	bl	8009238 <USBH_Get_USB_Status>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009106:	b590      	push	{r4, r7, lr}
 8009108:	b089      	sub	sp, #36	; 0x24
 800910a:	af04      	add	r7, sp, #16
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	4608      	mov	r0, r1
 8009110:	4611      	mov	r1, r2
 8009112:	461a      	mov	r2, r3
 8009114:	4603      	mov	r3, r0
 8009116:	70fb      	strb	r3, [r7, #3]
 8009118:	460b      	mov	r3, r1
 800911a:	70bb      	strb	r3, [r7, #2]
 800911c:	4613      	mov	r3, r2
 800911e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800912e:	787c      	ldrb	r4, [r7, #1]
 8009130:	78ba      	ldrb	r2, [r7, #2]
 8009132:	78f9      	ldrb	r1, [r7, #3]
 8009134:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800913c:	9302      	str	r3, [sp, #8]
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	9301      	str	r3, [sp, #4]
 8009142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	4623      	mov	r3, r4
 800914a:	f7f8 fb11 	bl	8001770 <HAL_HCD_HC_SubmitRequest>
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	4618      	mov	r0, r3
 8009156:	f000 f86f 	bl	8009238 <USBH_Get_USB_Status>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	bd90      	pop	{r4, r7, pc}

08009168 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	460b      	mov	r3, r1
 8009172:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7f8 fdba 	bl	8001cf8 <HAL_HCD_HC_GetURBState>
 8009184:	4603      	mov	r3, r0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3708      	adds	r7, #8
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d103      	bne.n	80091ac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f872 	bl	8009290 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091ac:	20c8      	movs	r0, #200	; 0xc8
 80091ae:	f7f7 fe8f 	bl	8000ed0 <HAL_Delay>
  return USBH_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	460b      	mov	r3, r1
 80091c6:	70fb      	strb	r3, [r7, #3]
 80091c8:	4613      	mov	r3, r2
 80091ca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091d2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091d4:	78fa      	ldrb	r2, [r7, #3]
 80091d6:	68f9      	ldr	r1, [r7, #12]
 80091d8:	4613      	mov	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	440b      	add	r3, r1
 80091e2:	333b      	adds	r3, #59	; 0x3b
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	68f9      	ldr	r1, [r7, #12]
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	00db      	lsls	r3, r3, #3
 80091f6:	440b      	add	r3, r1
 80091f8:	3350      	adds	r3, #80	; 0x50
 80091fa:	78ba      	ldrb	r2, [r7, #2]
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	e009      	b.n	8009214 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	68f9      	ldr	r1, [r7, #12]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	440b      	add	r3, r1
 800920e:	3351      	adds	r3, #81	; 0x51
 8009210:	78ba      	ldrb	r2, [r7, #2]
 8009212:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7f7 fe50 	bl	8000ed0 <HAL_Delay>
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	4603      	mov	r3, r0
 8009240:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	2b03      	cmp	r3, #3
 800924a:	d817      	bhi.n	800927c <USBH_Get_USB_Status+0x44>
 800924c:	a201      	add	r2, pc, #4	; (adr r2, 8009254 <USBH_Get_USB_Status+0x1c>)
 800924e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009252:	bf00      	nop
 8009254:	08009265 	.word	0x08009265
 8009258:	0800926b 	.word	0x0800926b
 800925c:	08009271 	.word	0x08009271
 8009260:	08009277 	.word	0x08009277
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	73fb      	strb	r3, [r7, #15]
    break;
 8009268:	e00b      	b.n	8009282 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800926a:	2302      	movs	r3, #2
 800926c:	73fb      	strb	r3, [r7, #15]
    break;
 800926e:	e008      	b.n	8009282 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009270:	2301      	movs	r3, #1
 8009272:	73fb      	strb	r3, [r7, #15]
    break;
 8009274:	e005      	b.n	8009282 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009276:	2302      	movs	r3, #2
 8009278:	73fb      	strb	r3, [r7, #15]
    break;
 800927a:	e002      	b.n	8009282 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800927c:	2302      	movs	r3, #2
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	bf00      	nop
  }
  return usb_status;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80092a4:	2301      	movs	r3, #1
 80092a6:	73fb      	strb	r3, [r7, #15]
 80092a8:	e001      	b.n	80092ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	461a      	mov	r2, r3
 80092b2:	2101      	movs	r1, #1
 80092b4:	4803      	ldr	r0, [pc, #12]	; (80092c4 <MX_DriverVbusFS+0x34>)
 80092b6:	f7f8 f909 	bl	80014cc <HAL_GPIO_WritePin>
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40020800 	.word	0x40020800

080092c8 <__errno>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	; (80092d0 <__errno+0x8>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	2000002c 	.word	0x2000002c

080092d4 <__libc_init_array>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4e0d      	ldr	r6, [pc, #52]	; (800930c <__libc_init_array+0x38>)
 80092d8:	4c0d      	ldr	r4, [pc, #52]	; (8009310 <__libc_init_array+0x3c>)
 80092da:	1ba4      	subs	r4, r4, r6
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	2500      	movs	r5, #0
 80092e0:	42a5      	cmp	r5, r4
 80092e2:	d109      	bne.n	80092f8 <__libc_init_array+0x24>
 80092e4:	4e0b      	ldr	r6, [pc, #44]	; (8009314 <__libc_init_array+0x40>)
 80092e6:	4c0c      	ldr	r4, [pc, #48]	; (8009318 <__libc_init_array+0x44>)
 80092e8:	f000 f8ea 	bl	80094c0 <_init>
 80092ec:	1ba4      	subs	r4, r4, r6
 80092ee:	10a4      	asrs	r4, r4, #2
 80092f0:	2500      	movs	r5, #0
 80092f2:	42a5      	cmp	r5, r4
 80092f4:	d105      	bne.n	8009302 <__libc_init_array+0x2e>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092fc:	4798      	blx	r3
 80092fe:	3501      	adds	r5, #1
 8009300:	e7ee      	b.n	80092e0 <__libc_init_array+0xc>
 8009302:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009306:	4798      	blx	r3
 8009308:	3501      	adds	r5, #1
 800930a:	e7f2      	b.n	80092f2 <__libc_init_array+0x1e>
 800930c:	080094fc 	.word	0x080094fc
 8009310:	080094fc 	.word	0x080094fc
 8009314:	080094fc 	.word	0x080094fc
 8009318:	08009500 	.word	0x08009500

0800931c <malloc>:
 800931c:	4b02      	ldr	r3, [pc, #8]	; (8009328 <malloc+0xc>)
 800931e:	4601      	mov	r1, r0
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f000 b861 	b.w	80093e8 <_malloc_r>
 8009326:	bf00      	nop
 8009328:	2000002c 	.word	0x2000002c

0800932c <free>:
 800932c:	4b02      	ldr	r3, [pc, #8]	; (8009338 <free+0xc>)
 800932e:	4601      	mov	r1, r0
 8009330:	6818      	ldr	r0, [r3, #0]
 8009332:	f000 b80b 	b.w	800934c <_free_r>
 8009336:	bf00      	nop
 8009338:	2000002c 	.word	0x2000002c

0800933c <memset>:
 800933c:	4402      	add	r2, r0
 800933e:	4603      	mov	r3, r0
 8009340:	4293      	cmp	r3, r2
 8009342:	d100      	bne.n	8009346 <memset+0xa>
 8009344:	4770      	bx	lr
 8009346:	f803 1b01 	strb.w	r1, [r3], #1
 800934a:	e7f9      	b.n	8009340 <memset+0x4>

0800934c <_free_r>:
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4605      	mov	r5, r0
 8009350:	2900      	cmp	r1, #0
 8009352:	d045      	beq.n	80093e0 <_free_r+0x94>
 8009354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009358:	1f0c      	subs	r4, r1, #4
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfb8      	it	lt
 800935e:	18e4      	addlt	r4, r4, r3
 8009360:	f000 f8ac 	bl	80094bc <__malloc_lock>
 8009364:	4a1f      	ldr	r2, [pc, #124]	; (80093e4 <_free_r+0x98>)
 8009366:	6813      	ldr	r3, [r2, #0]
 8009368:	4610      	mov	r0, r2
 800936a:	b933      	cbnz	r3, 800937a <_free_r+0x2e>
 800936c:	6063      	str	r3, [r4, #4]
 800936e:	6014      	str	r4, [r2, #0]
 8009370:	4628      	mov	r0, r5
 8009372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009376:	f000 b8a2 	b.w	80094be <__malloc_unlock>
 800937a:	42a3      	cmp	r3, r4
 800937c:	d90c      	bls.n	8009398 <_free_r+0x4c>
 800937e:	6821      	ldr	r1, [r4, #0]
 8009380:	1862      	adds	r2, r4, r1
 8009382:	4293      	cmp	r3, r2
 8009384:	bf04      	itt	eq
 8009386:	681a      	ldreq	r2, [r3, #0]
 8009388:	685b      	ldreq	r3, [r3, #4]
 800938a:	6063      	str	r3, [r4, #4]
 800938c:	bf04      	itt	eq
 800938e:	1852      	addeq	r2, r2, r1
 8009390:	6022      	streq	r2, [r4, #0]
 8009392:	6004      	str	r4, [r0, #0]
 8009394:	e7ec      	b.n	8009370 <_free_r+0x24>
 8009396:	4613      	mov	r3, r2
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	b10a      	cbz	r2, 80093a0 <_free_r+0x54>
 800939c:	42a2      	cmp	r2, r4
 800939e:	d9fa      	bls.n	8009396 <_free_r+0x4a>
 80093a0:	6819      	ldr	r1, [r3, #0]
 80093a2:	1858      	adds	r0, r3, r1
 80093a4:	42a0      	cmp	r0, r4
 80093a6:	d10b      	bne.n	80093c0 <_free_r+0x74>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	4401      	add	r1, r0
 80093ac:	1858      	adds	r0, r3, r1
 80093ae:	4282      	cmp	r2, r0
 80093b0:	6019      	str	r1, [r3, #0]
 80093b2:	d1dd      	bne.n	8009370 <_free_r+0x24>
 80093b4:	6810      	ldr	r0, [r2, #0]
 80093b6:	6852      	ldr	r2, [r2, #4]
 80093b8:	605a      	str	r2, [r3, #4]
 80093ba:	4401      	add	r1, r0
 80093bc:	6019      	str	r1, [r3, #0]
 80093be:	e7d7      	b.n	8009370 <_free_r+0x24>
 80093c0:	d902      	bls.n	80093c8 <_free_r+0x7c>
 80093c2:	230c      	movs	r3, #12
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	e7d3      	b.n	8009370 <_free_r+0x24>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	1821      	adds	r1, r4, r0
 80093cc:	428a      	cmp	r2, r1
 80093ce:	bf04      	itt	eq
 80093d0:	6811      	ldreq	r1, [r2, #0]
 80093d2:	6852      	ldreq	r2, [r2, #4]
 80093d4:	6062      	str	r2, [r4, #4]
 80093d6:	bf04      	itt	eq
 80093d8:	1809      	addeq	r1, r1, r0
 80093da:	6021      	streq	r1, [r4, #0]
 80093dc:	605c      	str	r4, [r3, #4]
 80093de:	e7c7      	b.n	8009370 <_free_r+0x24>
 80093e0:	bd38      	pop	{r3, r4, r5, pc}
 80093e2:	bf00      	nop
 80093e4:	200000b8 	.word	0x200000b8

080093e8 <_malloc_r>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	1ccd      	adds	r5, r1, #3
 80093ec:	f025 0503 	bic.w	r5, r5, #3
 80093f0:	3508      	adds	r5, #8
 80093f2:	2d0c      	cmp	r5, #12
 80093f4:	bf38      	it	cc
 80093f6:	250c      	movcc	r5, #12
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	4606      	mov	r6, r0
 80093fc:	db01      	blt.n	8009402 <_malloc_r+0x1a>
 80093fe:	42a9      	cmp	r1, r5
 8009400:	d903      	bls.n	800940a <_malloc_r+0x22>
 8009402:	230c      	movs	r3, #12
 8009404:	6033      	str	r3, [r6, #0]
 8009406:	2000      	movs	r0, #0
 8009408:	bd70      	pop	{r4, r5, r6, pc}
 800940a:	f000 f857 	bl	80094bc <__malloc_lock>
 800940e:	4a21      	ldr	r2, [pc, #132]	; (8009494 <_malloc_r+0xac>)
 8009410:	6814      	ldr	r4, [r2, #0]
 8009412:	4621      	mov	r1, r4
 8009414:	b991      	cbnz	r1, 800943c <_malloc_r+0x54>
 8009416:	4c20      	ldr	r4, [pc, #128]	; (8009498 <_malloc_r+0xb0>)
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	b91b      	cbnz	r3, 8009424 <_malloc_r+0x3c>
 800941c:	4630      	mov	r0, r6
 800941e:	f000 f83d 	bl	800949c <_sbrk_r>
 8009422:	6020      	str	r0, [r4, #0]
 8009424:	4629      	mov	r1, r5
 8009426:	4630      	mov	r0, r6
 8009428:	f000 f838 	bl	800949c <_sbrk_r>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d124      	bne.n	800947a <_malloc_r+0x92>
 8009430:	230c      	movs	r3, #12
 8009432:	6033      	str	r3, [r6, #0]
 8009434:	4630      	mov	r0, r6
 8009436:	f000 f842 	bl	80094be <__malloc_unlock>
 800943a:	e7e4      	b.n	8009406 <_malloc_r+0x1e>
 800943c:	680b      	ldr	r3, [r1, #0]
 800943e:	1b5b      	subs	r3, r3, r5
 8009440:	d418      	bmi.n	8009474 <_malloc_r+0x8c>
 8009442:	2b0b      	cmp	r3, #11
 8009444:	d90f      	bls.n	8009466 <_malloc_r+0x7e>
 8009446:	600b      	str	r3, [r1, #0]
 8009448:	50cd      	str	r5, [r1, r3]
 800944a:	18cc      	adds	r4, r1, r3
 800944c:	4630      	mov	r0, r6
 800944e:	f000 f836 	bl	80094be <__malloc_unlock>
 8009452:	f104 000b 	add.w	r0, r4, #11
 8009456:	1d23      	adds	r3, r4, #4
 8009458:	f020 0007 	bic.w	r0, r0, #7
 800945c:	1ac3      	subs	r3, r0, r3
 800945e:	d0d3      	beq.n	8009408 <_malloc_r+0x20>
 8009460:	425a      	negs	r2, r3
 8009462:	50e2      	str	r2, [r4, r3]
 8009464:	e7d0      	b.n	8009408 <_malloc_r+0x20>
 8009466:	428c      	cmp	r4, r1
 8009468:	684b      	ldr	r3, [r1, #4]
 800946a:	bf16      	itet	ne
 800946c:	6063      	strne	r3, [r4, #4]
 800946e:	6013      	streq	r3, [r2, #0]
 8009470:	460c      	movne	r4, r1
 8009472:	e7eb      	b.n	800944c <_malloc_r+0x64>
 8009474:	460c      	mov	r4, r1
 8009476:	6849      	ldr	r1, [r1, #4]
 8009478:	e7cc      	b.n	8009414 <_malloc_r+0x2c>
 800947a:	1cc4      	adds	r4, r0, #3
 800947c:	f024 0403 	bic.w	r4, r4, #3
 8009480:	42a0      	cmp	r0, r4
 8009482:	d005      	beq.n	8009490 <_malloc_r+0xa8>
 8009484:	1a21      	subs	r1, r4, r0
 8009486:	4630      	mov	r0, r6
 8009488:	f000 f808 	bl	800949c <_sbrk_r>
 800948c:	3001      	adds	r0, #1
 800948e:	d0cf      	beq.n	8009430 <_malloc_r+0x48>
 8009490:	6025      	str	r5, [r4, #0]
 8009492:	e7db      	b.n	800944c <_malloc_r+0x64>
 8009494:	200000b8 	.word	0x200000b8
 8009498:	200000bc 	.word	0x200000bc

0800949c <_sbrk_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4c06      	ldr	r4, [pc, #24]	; (80094b8 <_sbrk_r+0x1c>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4605      	mov	r5, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	f7f7 fc2a 	bl	8000d00 <_sbrk>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_sbrk_r+0x1a>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_sbrk_r+0x1a>
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000854 	.word	0x20000854

080094bc <__malloc_lock>:
 80094bc:	4770      	bx	lr

080094be <__malloc_unlock>:
 80094be:	4770      	bx	lr

080094c0 <_init>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr

080094cc <_fini>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr
