
STM32F407-I2C_slave_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000957c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009720  08009720  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009720  08009720  00019720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009728  08009728  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009728  08009728  00019728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d0  20000090  080097c0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  080097c0  00020860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019863  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037cf  00000000  00000000  00039923  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  0003e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ab1  00000000  00000000  0003f328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a35  00000000  00000000  00062dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb168  00000000  00000000  0007480e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f976  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  0013f9f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080096ec 	.word	0x080096ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080096ec 	.word	0x080096ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_I2C_AddrCallback>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <HAL_I2C_AddrCallback+0x24>)
 80004de:	f001 f844 	bl	800156a <HAL_GPIO_TogglePin>
	if(TransferDirection==1) //master read
	{
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &i2c_send_slave, 1);
	}
	*/
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	//HAL_I2C_EnableListen_IT(&hi2c1);


	if(buffer[0] == 0x10){
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b10      	cmp	r3, #16
 80004fe:	d10e      	bne.n	800051e <HAL_I2C_SlaveRxCpltCallback+0x2e>
		//CS high
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	481f      	ldr	r0, [pc, #124]	; (8000584 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 8000506:	f001 f830 	bl	800156a <HAL_GPIO_TogglePin>

		// Issue new receive interrupt
		if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 800050a:	2201      	movs	r2, #1
 800050c:	491c      	ldr	r1, [pc, #112]	; (8000580 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 800050e:	481e      	ldr	r0, [pc, #120]	; (8000588 <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8000510:	f002 fee0 	bl	80032d4 <HAL_I2C_Slave_Receive_IT>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d02d      	beq.n	8000576 <HAL_I2C_SlaveRxCpltCallback+0x86>
			 asm("bkpt 255");
 800051a:	beff      	bkpt	0x00ff
		testval++;
		uint8_t buf[2] = {testval,testval};
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &buf, 2);
		asm("nop");
	}
}
 800051c:	e02b      	b.n	8000576 <HAL_I2C_SlaveRxCpltCallback+0x86>
	else if(buffer[0] == 0x30){
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b30      	cmp	r3, #48	; 0x30
 8000524:	d10e      	bne.n	8000544 <HAL_I2C_SlaveRxCpltCallback+0x54>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052a:	4816      	ldr	r0, [pc, #88]	; (8000584 <HAL_I2C_SlaveRxCpltCallback+0x94>)
 800052c:	f001 f81d 	bl	800156a <HAL_GPIO_TogglePin>
		if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 8000530:	2201      	movs	r2, #1
 8000532:	4913      	ldr	r1, [pc, #76]	; (8000580 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8000534:	4814      	ldr	r0, [pc, #80]	; (8000588 <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8000536:	f002 fecd 	bl	80032d4 <HAL_I2C_Slave_Receive_IT>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01a      	beq.n	8000576 <HAL_I2C_SlaveRxCpltCallback+0x86>
			 asm("bkpt 255");
 8000540:	beff      	bkpt	0x00ff
}
 8000542:	e018      	b.n	8000576 <HAL_I2C_SlaveRxCpltCallback+0x86>
	else if(buffer[0] == 0x33){
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <HAL_I2C_SlaveRxCpltCallback+0x90>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b33      	cmp	r3, #51	; 0x33
 800054a:	d114      	bne.n	8000576 <HAL_I2C_SlaveRxCpltCallback+0x86>
		asm("nop");
 800054c:	bf00      	nop
		testval++;
 800054e:	4b0f      	ldr	r3, [pc, #60]	; (800058c <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b0d      	ldr	r3, [pc, #52]	; (800058c <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 8000558:	701a      	strb	r2, [r3, #0]
		uint8_t buf[2] = {testval,testval};
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	733b      	strb	r3, [r7, #12]
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_I2C_SlaveRxCpltCallback+0x9c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &buf, 2);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2202      	movs	r2, #2
 800056c:	4619      	mov	r1, r3
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <HAL_I2C_SlaveRxCpltCallback+0x98>)
 8000570:	f002 fe40 	bl	80031f4 <HAL_I2C_Slave_Transmit_IT>
		asm("nop");
 8000574:	bf00      	nop
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000118 	.word	0x20000118
 8000584:	40020c00 	.word	0x40020c00
 8000588:	200000c4 	.word	0x200000c4
 800058c:	200000ac 	.word	0x200000ac

08000590 <HAL_I2C_SlaveTxCpltCallback>:



void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	//HAL_I2C_EnableListen_IT(&hi2c1);
	asm("nop");
 8000598:	bf00      	nop
	if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 800059a:	2201      	movs	r2, #1
 800059c:	4905      	ldr	r1, [pc, #20]	; (80005b4 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 80005a0:	f002 fe98 	bl	80032d4 <HAL_I2C_Slave_Receive_IT>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d000      	beq.n	80005ac <HAL_I2C_SlaveTxCpltCallback+0x1c>
	  	asm("bkpt 255");
 80005aa:	beff      	bkpt	0x00ff
	  }

}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000118 	.word	0x20000118
 80005b8:	200000c4 	.word	0x200000c4

080005bc <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // Restart
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f002 fef5 	bl	80033b4 <HAL_I2C_EnableListen_IT>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b082      	sub	sp, #8
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f003 f966 	bl	80038ac <HAL_I2C_GetError>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d000      	beq.n	80005e8 <HAL_I2C_ErrorCallback+0x16>
		asm("nop");
 80005e6:	bf00      	nop
	}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc30 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f828 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f93c 	bl	8000878 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000600:	f000 f8a6 	bl	8000750 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000604:	f000 f8d2 	bl	80007ac <MX_I2S3_Init>
  MX_SPI1_Init();
 8000608:	f000 f900 	bl	800080c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800060c:	f008 fc6a 	bl	8008ee4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0x50>)
 8000618:	f000 ff8e 	bl	8001538 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <main+0x50>)
 8000624:	f000 ff88 	bl	8001538 <HAL_GPIO_WritePin>
  //HAL_I2C_EnableListen_IT(&hi2c1);

  if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 8000628:	2201      	movs	r2, #1
 800062a:	4906      	ldr	r1, [pc, #24]	; (8000644 <main+0x54>)
 800062c:	4806      	ldr	r0, [pc, #24]	; (8000648 <main+0x58>)
 800062e:	f002 fe51 	bl	80032d4 <HAL_I2C_Slave_Receive_IT>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d000      	beq.n	800063a <main+0x4a>
  	asm("bkpt 255");
 8000638:	beff      	bkpt	0x00ff
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800063a:	f008 fc79 	bl	8008f30 <MX_USB_HOST_Process>
 800063e:	e7fc      	b.n	800063a <main+0x4a>
 8000640:	40020c00 	.word	0x40020c00
 8000644:	20000118 	.word	0x20000118
 8000648:	200000c4 	.word	0x200000c4

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b098      	sub	sp, #96	; 0x60
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000656:	2230      	movs	r2, #48	; 0x30
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f008 ff84 	bl	8009568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <SystemClock_Config+0xfc>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	4a30      	ldr	r2, [pc, #192]	; (8000748 <SystemClock_Config+0xfc>)
 8000688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068c:	6413      	str	r3, [r2, #64]	; 0x40
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <SystemClock_Config+0xfc>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b2b      	ldr	r3, [pc, #172]	; (800074c <SystemClock_Config+0x100>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <SystemClock_Config+0x100>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0x100>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b6:	2301      	movs	r3, #1
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ca:	2308      	movs	r3, #8
 80006cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006d8:	2307      	movs	r3, #7
 80006da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e0:	4618      	mov	r0, r3
 80006e2:	f004 ffc9 	bl	8005678 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006ec:	f000 f9c2 	bl	8000a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fa22 	bl	8005b58 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071a:	f000 f9ab 	bl	8000a74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800071e:	2301      	movs	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000722:	23c0      	movs	r3, #192	; 0xc0
 8000724:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fbf0 	bl	8005f14 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800073a:	f000 f99b 	bl	8000a74 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3760      	adds	r7, #96	; 0x60
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_I2C1_Init+0x54>)
 8000758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_I2C1_Init+0x50>)
 800075c:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <MX_I2C1_Init+0x58>)
 800075e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 64;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000768:	2240      	movs	r2, #64	; 0x40
 800076a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_I2C1_Init+0x50>)
 800076e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000772:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_I2C1_Init+0x50>)
 800078e:	f002 fbf9 	bl	8002f84 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f96c 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200000c4 	.word	0x200000c4
 80007a4:	40005400 	.word	0x40005400
 80007a8:	000186a0 	.word	0x000186a0

080007ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_I2S3_Init+0x54>)
 80007b2:	4a14      	ldr	r2, [pc, #80]	; (8000804 <MX_I2S3_Init+0x58>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2S3_Init+0x54>)
 80007b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_I2S3_Init+0x54>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_I2S3_Init+0x54>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_I2S3_Init+0x54>)
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_I2S3_Init+0x54>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <MX_I2S3_Init+0x5c>)
 80007d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_I2S3_Init+0x54>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_I2S3_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2S3_Init+0x54>)
 80007ec:	f004 faa4 	bl	8004d38 <HAL_I2S_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f6:	f000 f93d 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000174 	.word	0x20000174
 8000804:	40003c00 	.word	0x40003c00
 8000808:	00017700 	.word	0x00017700

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_SPI1_Init+0x64>)
 8000812:	4a18      	ldr	r2, [pc, #96]	; (8000874 <MX_SPI1_Init+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <MX_SPI1_Init+0x64>)
 8000818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_SPI1_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_SPI1_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_SPI1_Init+0x64>)
 8000838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800083c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_SPI1_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_SPI1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_SPI1_Init+0x64>)
 8000858:	220a      	movs	r2, #10
 800085a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_SPI1_Init+0x64>)
 800085e:	f005 fc97 	bl	8006190 <HAL_SPI_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000868:	f000 f904 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2000011c 	.word	0x2000011c
 8000874:	40013000 	.word	0x40013000

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08c      	sub	sp, #48	; 0x30
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
 8000892:	4b71      	ldr	r3, [pc, #452]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a70      	ldr	r2, [pc, #448]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	4b6a      	ldr	r3, [pc, #424]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a69      	ldr	r2, [pc, #420]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b67      	ldr	r3, [pc, #412]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	4b63      	ldr	r3, [pc, #396]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a62      	ldr	r2, [pc, #392]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b60      	ldr	r3, [pc, #384]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	4b5c      	ldr	r3, [pc, #368]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a5b      	ldr	r2, [pc, #364]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b59      	ldr	r3, [pc, #356]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	4b55      	ldr	r3, [pc, #340]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a54      	ldr	r2, [pc, #336]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a4d      	ldr	r2, [pc, #308]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4b      	ldr	r3, [pc, #300]	; (8000a58 <MX_GPIO_Init+0x1e0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2108      	movs	r1, #8
 800093a:	4848      	ldr	r0, [pc, #288]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 800093c:	f000 fdfc 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	4846      	ldr	r0, [pc, #280]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 8000946:	f000 fdf7 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000950:	4844      	ldr	r0, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 8000952:	f000 fdf1 	bl	8001538 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	483b      	ldr	r0, [pc, #236]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 800096e:	f000 fc49 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4835      	ldr	r0, [pc, #212]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 800098a:	f000 fc3b 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800098e:	2308      	movs	r3, #8
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099e:	2305      	movs	r3, #5
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482d      	ldr	r0, [pc, #180]	; (8000a60 <MX_GPIO_Init+0x1e8>)
 80009aa:	f000 fc2b 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x1f0>)
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	482a      	ldr	r0, [pc, #168]	; (8000a6c <MX_GPIO_Init+0x1f4>)
 80009c2:	f000 fc1f 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009c6:	2304      	movs	r3, #4
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4825      	ldr	r0, [pc, #148]	; (8000a70 <MX_GPIO_Init+0x1f8>)
 80009da:	f000 fc13 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f0:	2305      	movs	r3, #5
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	481d      	ldr	r0, [pc, #116]	; (8000a70 <MX_GPIO_Init+0x1f8>)
 80009fc:	f000 fc02 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a00:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a04:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 8000a1a:	f000 fbf3 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_GPIO_Init+0x1ec>)
 8000a32:	f000 fbe7 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_GPIO_Init+0x1f0>)
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0x1e4>)
 8000a4a:	f000 fbdb 	bl	8001204 <HAL_GPIO_Init>

}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	; 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	10120000 	.word	0x10120000
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <Error_Handler+0x6>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	; 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f000 fb30 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <HAL_I2C_MspInit+0xa4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d13b      	bne.n	8000b66 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000af8:	f043 0302 	orr.w	r3, r3, #2
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b0a:	23c0      	movs	r3, #192	; 0xc0
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b0e:	2312      	movs	r3, #18
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b1a:	2304      	movs	r3, #4
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <HAL_I2C_MspInit+0xac>)
 8000b26:	f000 fb6d 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_I2C_MspInit+0xa8>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201f      	movs	r0, #31
 8000b4c:	f000 faf3 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b50:	201f      	movs	r0, #31
 8000b52:	f000 fb0c 	bl	800116e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2020      	movs	r0, #32
 8000b5c:	f000 faeb 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b60:	2020      	movs	r0, #32
 8000b62:	f000 fb04 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3728      	adds	r7, #40	; 0x28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_I2S_MspInit+0xc0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d14a      	bne.n	8000c34 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_I2S_MspInit+0xc4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf2:	2310      	movs	r3, #16
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c02:	2306      	movs	r3, #6
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_I2S_MspInit+0xc8>)
 8000c0e:	f000 faf9 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c12:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c24:	2306      	movs	r3, #6
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_I2S_MspInit+0xcc>)
 8000c30:	f000 fae8 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_SPI_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12b      	bne.n	8000cc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_SPI_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca6:	23e0      	movs	r3, #224	; 0xe0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000cc2:	f000 fa9f 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f8e8 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <I2C1_EV_IRQHandler+0x10>)
 8000d36:	f002 fb73 	bl	8003420 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000c4 	.word	0x200000c4

08000d44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <I2C1_ER_IRQHandler+0x10>)
 8000d4a:	f002 fcd6 	bl	80036fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000c4 	.word	0x200000c4

08000d58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <OTG_FS_IRQHandler+0x10>)
 8000d5e:	f000 feaf 	bl	8001ac0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000598 	.word	0x20000598

08000d6c <_sbrk>:
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
 8000d9c:	f008 fbaa 	bl	80094f4 <__errno>
 8000da0:	4602      	mov	r2, r0
 8000da2:	230c      	movs	r3, #12
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20020000 	.word	0x20020000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	200000b0 	.word	0x200000b0
 8000dd4:	20000860 	.word	0x20000860

08000dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SystemInit+0x28>)
 8000dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000de2:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SystemInit+0x28>)
 8000de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SystemInit+0x28>)
 8000dee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000df2:	609a      	str	r2, [r3, #8]
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x14>
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e003      	b.n	8000e14 <LoopCopyDataInit>

08000e0c <CopyDataInit>:
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x18>)
 8000e0e:	585b      	ldr	r3, [r3, r1]
 8000e10:	5043      	str	r3, [r0, r1]
 8000e12:	3104      	adds	r1, #4

08000e14 <LoopCopyDataInit>:
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopFillZerobss+0x1c>)
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x20>)
 8000e18:	1842      	adds	r2, r0, r1
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d3f6      	bcc.n	8000e0c <CopyDataInit>
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x24>)
 8000e20:	e002      	b.n	8000e28 <LoopFillZerobss>

08000e22 <FillZerobss>:
 8000e22:	2300      	movs	r3, #0
 8000e24:	f842 3b04 	str.w	r3, [r2], #4

08000e28 <LoopFillZerobss>:
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <LoopFillZerobss+0x28>)
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3f9      	bcc.n	8000e22 <FillZerobss>
 8000e2e:	f7ff ffd3 	bl	8000dd8 <SystemInit>
 8000e32:	f008 fb65 	bl	8009500 <__libc_init_array>
 8000e36:	f7ff fbdb 	bl	80005f0 <main>
 8000e3a:	4770      	bx	lr
 8000e3c:	20020000 	.word	0x20020000
 8000e40:	08009730 	.word	0x08009730
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000090 	.word	0x20000090
 8000e4c:	20000090 	.word	0x20000090
 8000e50:	20000860 	.word	0x20000860

08000e54 <ADC_IRQHandler>:
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f94d 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f808 	bl	8000e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff fdf6 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x54>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_InitTick+0x58>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f965 	bl	800118a <HAL_SYSTICK_Config>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00e      	b.n	8000ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d80a      	bhi.n	8000ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f92d 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000000 	.word	0x20000000
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000004 	.word	0x20000004

08000efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x20>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x24>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <HAL_IncTick+0x24>)
 8000f0e:	6013      	str	r3, [r2, #0]
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	200001bc 	.word	0x200001bc

08000f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <HAL_GetTick+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	200001bc 	.word	0x200001bc

08000f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff ffee 	bl	8000f24 <HAL_GetTick>
 8000f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f54:	d005      	beq.n	8000f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_Delay+0x40>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f62:	bf00      	nop
 8000f64:	f7ff ffde 	bl	8000f24 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d8f7      	bhi.n	8000f64 <HAL_Delay+0x28>
  {
  }
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000008 	.word	0x20000008

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	db0b      	blt.n	800100e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 021f 	and.w	r2, r3, #31
 8000ffc:	4907      	ldr	r1, [pc, #28]	; (800101c <__NVIC_EnableIRQ+0x38>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	095b      	lsrs	r3, r3, #5
 8001004:	2001      	movs	r0, #1
 8001006:	fa00 f202 	lsl.w	r2, r0, r2
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff29 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff3e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff31 	bl	8000fe4 <__NVIC_EnableIRQ>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffa2 	bl	80010dc <SysTick_Config>
 8001198:	4603      	mov	r3, r0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d004      	beq.n	80011c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2280      	movs	r2, #128	; 0x80
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e00c      	b.n	80011da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2205      	movs	r2, #5
 80011c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0201 	bic.w	r2, r2, #1
 80011d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f4:	b2db      	uxtb	r3, r3
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e16b      	b.n	80014f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 815a 	bne.w	80014f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d00b      	beq.n	800125e <HAL_GPIO_Init+0x5a>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001252:	2b11      	cmp	r3, #17
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b12      	cmp	r3, #18
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0xfc>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b12      	cmp	r3, #18
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80b4 	beq.w	80014f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_GPIO_Init+0x308>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_GPIO_Init+0x308>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_GPIO_Init+0x308>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <HAL_GPIO_Init+0x30c>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_GPIO_Init+0x310>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x226>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x314>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x318>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_GPIO_Init+0x31c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	; (8001524 <HAL_GPIO_Init+0x320>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_GPIO_Init+0x324>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	; (800152c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4a      	ldr	r2, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x20a>
 800140a:	2307      	movs	r3, #7
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x228>
 800140e:	2308      	movs	r3, #8
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x228>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4934      	ldr	r1, [pc, #208]	; (8001510 <HAL_GPIO_Init+0x30c>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <HAL_GPIO_Init+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800146e:	4a31      	ldr	r2, [pc, #196]	; (8001534 <HAL_GPIO_Init+0x330>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001474:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x330>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001498:	4a26      	ldr	r2, [pc, #152]	; (8001534 <HAL_GPIO_Init+0x330>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800149e:	4b25      	ldr	r3, [pc, #148]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c2:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014ec:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_GPIO_Init+0x330>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae90 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	3724      	adds	r7, #36	; 0x24
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40023800 	.word	0x40023800
 8001510:	40013800 	.word	0x40013800
 8001514:	40020000 	.word	0x40020000
 8001518:	40020400 	.word	0x40020400
 800151c:	40020800 	.word	0x40020800
 8001520:	40020c00 	.word	0x40020c00
 8001524:	40021000 	.word	0x40021000
 8001528:	40021400 	.word	0x40021400
 800152c:	40021800 	.word	0x40021800
 8001530:	40021c00 	.word	0x40021c00
 8001534:	40013c00 	.word	0x40013c00

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695a      	ldr	r2, [r3, #20]
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	401a      	ands	r2, r3
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	429a      	cmp	r2, r3
 8001582:	d104      	bne.n	800158e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	041a      	lsls	r2, r3, #16
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800158c:	e002      	b.n	8001594 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b08f      	sub	sp, #60	; 0x3c
 80015a4:	af0a      	add	r7, sp, #40	; 0x28
 80015a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e054      	b.n	800165c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d106      	bne.n	80015d2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f007 fce7 	bl	8008fa0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fea3 	bl	800633c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	687e      	ldr	r6, [r7, #4]
 80015fe:	466d      	mov	r5, sp
 8001600:	f106 0410 	add.w	r4, r6, #16
 8001604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800160a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800160c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001610:	e885 0003 	stmia.w	r5, {r0, r1}
 8001614:	1d33      	adds	r3, r6, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	6838      	ldr	r0, [r7, #0]
 800161a:	f004 fe1d 	bl	8006258 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2101      	movs	r1, #1
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fe9a 	bl	800635e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	687e      	ldr	r6, [r7, #4]
 8001632:	466d      	mov	r5, sp
 8001634:	f106 0410 	add.w	r4, r6, #16
 8001638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800163c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800163e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001640:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001644:	e885 0003 	stmia.w	r5, {r0, r1}
 8001648:	1d33      	adds	r3, r6, #4
 800164a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800164c:	6838      	ldr	r0, [r7, #0]
 800164e:	f004 ffad 	bl	80065ac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001664 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af04      	add	r7, sp, #16
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	70fb      	strb	r3, [r7, #3]
 8001676:	460b      	mov	r3, r1
 8001678:	70bb      	strb	r3, [r7, #2]
 800167a:	4613      	mov	r3, r2
 800167c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001684:	2b01      	cmp	r3, #1
 8001686:	d101      	bne.n	800168c <HAL_HCD_HC_Init+0x28>
 8001688:	2302      	movs	r3, #2
 800168a:	e07f      	b.n	800178c <HAL_HCD_HC_Init+0x128>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001694:	78fa      	ldrb	r2, [r7, #3]
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	440b      	add	r3, r1
 80016a2:	333d      	adds	r3, #61	; 0x3d
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	3338      	adds	r3, #56	; 0x38
 80016b8:	787a      	ldrb	r2, [r7, #1]
 80016ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3340      	adds	r3, #64	; 0x40
 80016cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ce:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	440b      	add	r3, r1
 80016de:	3339      	adds	r3, #57	; 0x39
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016e4:	78fa      	ldrb	r2, [r7, #3]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	333f      	adds	r3, #63	; 0x3f
 80016f4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	78bb      	ldrb	r3, [r7, #2]
 80016fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001702:	b2d8      	uxtb	r0, r3
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	333a      	adds	r3, #58	; 0x3a
 8001712:	4602      	mov	r2, r0
 8001714:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001716:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800171a:	2b00      	cmp	r3, #0
 800171c:	da0a      	bge.n	8001734 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	333b      	adds	r3, #59	; 0x3b
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e009      	b.n	8001748 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	333b      	adds	r3, #59	; 0x3b
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	333c      	adds	r3, #60	; 0x3c
 8001758:	f897 2020 	ldrb.w	r2, [r7, #32]
 800175c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	787c      	ldrb	r4, [r7, #1]
 8001764:	78ba      	ldrb	r2, [r7, #2]
 8001766:	78f9      	ldrb	r1, [r7, #3]
 8001768:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	4623      	mov	r3, r4
 800177a:	f005 f899 	bl	80068b0 <USB_HC_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_HCD_HC_Halt+0x1e>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e00f      	b.n	80017d2 <HAL_HCD_HC_Halt+0x3e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 fad5 	bl	8006d72 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	4608      	mov	r0, r1
 80017e6:	4611      	mov	r1, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4603      	mov	r3, r0
 80017ec:	70fb      	strb	r3, [r7, #3]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70bb      	strb	r3, [r7, #2]
 80017f2:	4613      	mov	r3, r2
 80017f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	333b      	adds	r3, #59	; 0x3b
 8001806:	78ba      	ldrb	r2, [r7, #2]
 8001808:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	333f      	adds	r3, #63	; 0x3f
 800181a:	787a      	ldrb	r2, [r7, #1]
 800181c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800181e:	7c3b      	ldrb	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d114      	bne.n	800184e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3342      	adds	r3, #66	; 0x42
 8001834:	2203      	movs	r2, #3
 8001836:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	333d      	adds	r3, #61	; 0x3d
 8001848:	7f3a      	ldrb	r2, [r7, #28]
 800184a:	701a      	strb	r2, [r3, #0]
 800184c:	e009      	b.n	8001862 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	440b      	add	r3, r1
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2202      	movs	r2, #2
 8001860:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001862:	787b      	ldrb	r3, [r7, #1]
 8001864:	2b03      	cmp	r3, #3
 8001866:	f200 80d6 	bhi.w	8001a16 <HAL_HCD_HC_SubmitRequest+0x23a>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <HAL_HCD_HC_SubmitRequest+0x94>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001881 	.word	0x08001881
 8001874:	08001a01 	.word	0x08001a01
 8001878:	080018ed 	.word	0x080018ed
 800187c:	08001977 	.word	0x08001977
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001880:	7c3b      	ldrb	r3, [r7, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	f040 80c9 	bne.w	8001a1a <HAL_HCD_HC_SubmitRequest+0x23e>
 8001888:	78bb      	ldrb	r3, [r7, #2]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 80c5 	bne.w	8001a1a <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001890:	8b3b      	ldrh	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d109      	bne.n	80018aa <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	440b      	add	r3, r1
 80018a4:	3351      	adds	r3, #81	; 0x51
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018aa:	78fa      	ldrb	r2, [r7, #3]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	440b      	add	r3, r1
 80018b8:	3351      	adds	r3, #81	; 0x51
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d10a      	bne.n	80018d6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018c0:	78fa      	ldrb	r2, [r7, #3]
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	3342      	adds	r3, #66	; 0x42
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018d4:	e0a1      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d6:	78fa      	ldrb	r2, [r7, #3]
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3342      	adds	r3, #66	; 0x42
 80018e6:	2202      	movs	r2, #2
 80018e8:	701a      	strb	r2, [r3, #0]
      break;
 80018ea:	e096      	b.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d120      	bne.n	8001934 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f2:	78fa      	ldrb	r2, [r7, #3]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	440b      	add	r3, r1
 8001900:	3351      	adds	r3, #81	; 0x51
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10a      	bne.n	800191e <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	3342      	adds	r3, #66	; 0x42
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800191c:	e07e      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191e:	78fa      	ldrb	r2, [r7, #3]
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e073      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001934:	78fa      	ldrb	r2, [r7, #3]
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	440b      	add	r3, r1
 8001942:	3350      	adds	r3, #80	; 0x50
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194a:	78fa      	ldrb	r2, [r7, #3]
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	440b      	add	r3, r1
 8001958:	3342      	adds	r3, #66	; 0x42
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
      break;
 800195e:	e05d      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001960:	78fa      	ldrb	r2, [r7, #3]
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3342      	adds	r3, #66	; 0x42
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e052      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001976:	78bb      	ldrb	r3, [r7, #2]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d120      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	3351      	adds	r3, #81	; 0x51
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	3342      	adds	r3, #66	; 0x42
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019a6:	e039      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3342      	adds	r3, #66	; 0x42
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
      break;
 80019bc:	e02e      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	440b      	add	r3, r1
 80019cc:	3350      	adds	r3, #80	; 0x50
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10a      	bne.n	80019ea <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	3342      	adds	r3, #66	; 0x42
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
      break;
 80019e8:	e018      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	3342      	adds	r3, #66	; 0x42
 80019fa:	2202      	movs	r2, #2
 80019fc:	701a      	strb	r2, [r3, #0]
      break;
 80019fe:	e00d      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3342      	adds	r3, #66	; 0x42
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
      break;
 8001a14:	e002      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a16:	bf00      	nop
 8001a18:	e000      	b.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a1a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	3344      	adds	r3, #68	; 0x44
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	8b39      	ldrh	r1, [r7, #24]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	4403      	add	r3, r0
 8001a40:	3348      	adds	r3, #72	; 0x48
 8001a42:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	335c      	adds	r3, #92	; 0x5c
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	334c      	adds	r3, #76	; 0x4c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3339      	adds	r3, #57	; 0x39
 8001a7c:	78fa      	ldrb	r2, [r7, #3]
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	335d      	adds	r3, #93	; 0x5d
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	3338      	adds	r3, #56	; 0x38
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	18d1      	adds	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f005 f808 	bl	8006ac4 <USB_HC_StartXfer>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop

08001ac0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f004 fd25 	bl	8006526 <USB_GetMode>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 80ef 	bne.w	8001cc2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 fd09 	bl	8006500 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80e5 	beq.w	8001cc0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 fd00 	bl	8006500 <USB_ReadInterrupts>
 8001b00:	4603      	mov	r3, r0
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b0a:	d104      	bne.n	8001b16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fcf0 	bl	8006500 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2a:	d104      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 fce0 	bl	8006500 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 fcd0 	bl	8006500 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fcc2 	bl	8006500 <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b86:	d115      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f007 fa7a 	bl	800909c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2101      	movs	r1, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 fdb8 	bl	8006724 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 fca1 	bl	8006500 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc8:	d102      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f001 f966 	bl	8002e9c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 fc93 	bl	8006500 <USB_ReadInterrupts>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d106      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f007 fa3d 	bl	8009064 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f004 fc82 	bl	8006500 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c06:	d138      	bne.n	8001c7a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 f89f 	bl	8006d50 <USB_HC_ReadInterrupt>
 8001c12:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	e025      	b.n	8001c66 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	fa22 f303 	lsr.w	r3, r2, r3
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d018      	beq.n	8001c60 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	015a      	lsls	r2, r3, #5
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c44:	d106      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8cf 	bl	8001df0 <HCD_HC_IN_IRQHandler>
 8001c52:	e005      	b.n	8001c60 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fcfd 	bl	800265a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3d4      	bcc.n	8001c1a <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 fc3e 	bl	8006500 <USB_ReadInterrupts>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b10      	cmp	r3, #16
 8001c8c:	d101      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x1d2>
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <HAL_HCD_IRQHandler+0x1d4>
 8001c92:	2300      	movs	r3, #0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d014      	beq.n	8001cc2 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0210 	bic.w	r2, r2, #16
 8001ca6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 f84b 	bl	8002d44 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0210 	orr.w	r2, r2, #16
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	e000      	b.n	8001cc2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001cc0:	bf00      	nop
    }
  }
}
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_HCD_Start+0x16>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e013      	b.n	8001d06 <HAL_HCD_Start+0x3e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 fb15 	bl	800631a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fd78 	bl	80067ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_HCD_Stop+0x16>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00d      	b.n	8001d40 <HAL_HCD_Stop+0x32>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f005 f959 	bl	8006fe8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fd1f 	bl	8006798 <USB_ResetPort>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	335c      	adds	r3, #92	; 0x5c
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	334c      	adds	r3, #76	; 0x4c
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f004 fd61 	bl	800688c <USB_GetCurrentFrame>
 8001dca:	4603      	mov	r3, r0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fd3c 	bl	800685e <USB_GetHostSpeed>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	015a      	lsls	r2, r3, #5
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d119      	bne.n	8001e54 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2304      	movs	r3, #4
 8001e30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	0151      	lsls	r1, r2, #5
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	440a      	add	r2, r1
 8001e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	60d3      	str	r3, [r2, #12]
 8001e52:	e0ce      	b.n	8001ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d12c      	bne.n	8001ec6 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	440b      	add	r3, r1
 8001e8e:	335d      	adds	r3, #93	; 0x5d
 8001e90:	2207      	movs	r2, #7
 8001e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	0151      	lsls	r1, r2, #5
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	440a      	add	r2, r1
 8001eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eae:	f043 0302 	orr.w	r3, r3, #2
 8001eb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 ff57 	bl	8006d72 <USB_HC_Halt>
 8001ec4:	e095      	b.n	8001ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b20      	cmp	r3, #32
 8001eda:	d109      	bne.n	8001ef0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2320      	movs	r3, #32
 8001eec:	6093      	str	r3, [r2, #8]
 8001eee:	e080      	b.n	8001ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d134      	bne.n	8001f70 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	0151      	lsls	r1, r2, #5
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	440a      	add	r2, r1
 8001f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	335d      	adds	r3, #93	; 0x5d
 8001f36:	2205      	movs	r2, #5
 8001f38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	461a      	mov	r2, r3
 8001f48:	2310      	movs	r3, #16
 8001f4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f004 ff02 	bl	8006d72 <USB_HC_Halt>
 8001f6e:	e040      	b.n	8001ff2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d134      	bne.n	8001ff2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	0151      	lsls	r1, r2, #5
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	440a      	add	r2, r1
 8001f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 fedd 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	335d      	adds	r3, #93	; 0x5d
 8001fda:	2208      	movs	r2, #8
 8001fdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002008:	d122      	bne.n	8002050 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	0151      	lsls	r1, r2, #5
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	440a      	add	r2, r1
 8002020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f004 fe9c 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	461a      	mov	r2, r3
 8002048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800204c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800204e:	e300      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 80fd 	bne.w	8002262 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	440b      	add	r3, r1
 800207e:	3348      	adds	r3, #72	; 0x48
 8002080:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	0159      	lsls	r1, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	440b      	add	r3, r1
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002094:	1ad1      	subs	r1, r2, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4403      	add	r3, r0
 80020a4:	334c      	adds	r3, #76	; 0x4c
 80020a6:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	440b      	add	r3, r1
 80020b6:	335d      	adds	r3, #93	; 0x5d
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	3358      	adds	r3, #88	; 0x58
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	461a      	mov	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	333f      	adds	r3, #63	; 0x3f
 8002108:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800210a:	2b02      	cmp	r3, #2
 800210c:	d121      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	0151      	lsls	r1, r2, #5
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	440a      	add	r2, r1
 8002124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	4611      	mov	r1, r2
 8002138:	4618      	mov	r0, r3
 800213a:	f004 fe1a 	bl	8006d72 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2310      	movs	r3, #16
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e070      	b.n	8002234 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d12a      	bne.n	80021be <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	0151      	lsls	r1, r2, #5
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	440a      	add	r2, r1
 800217e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002182:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002186:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	4601      	mov	r1, r0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f006 ff7e 	bl	80090b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021bc:	e03a      	b.n	8002234 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	333f      	adds	r3, #63	; 0x3f
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d12f      	bne.n	8002234 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	335c      	adds	r3, #92	; 0x5c
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	440b      	add	r3, r1
 80021f6:	3350      	adds	r3, #80	; 0x50
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2d8      	uxtb	r0, r3
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3350      	adds	r3, #80	; 0x50
 8002210:	4602      	mov	r2, r0
 8002212:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	335c      	adds	r3, #92	; 0x5c
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	4601      	mov	r1, r0
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 ff42 	bl	80090b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3350      	adds	r3, #80	; 0x50
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2d8      	uxtb	r0, r3
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3350      	adds	r3, #80	; 0x50
 800225c:	4602      	mov	r2, r0
 800225e:	701a      	strb	r2, [r3, #0]
}
 8002260:	e1f7      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b02      	cmp	r3, #2
 8002276:	f040 811a 	bne.w	80024ae <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	0151      	lsls	r1, r2, #5
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	440a      	add	r2, r1
 8002290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002294:	f023 0302 	bic.w	r3, r3, #2
 8002298:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	440b      	add	r3, r1
 80022a8:	335d      	adds	r3, #93	; 0x5d
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d10a      	bne.n	80022c6 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	335c      	adds	r3, #92	; 0x5c
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e0d9      	b.n	800247a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	335d      	adds	r3, #93	; 0x5d
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d10a      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	2205      	movs	r2, #5
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e0c3      	b.n	800247a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	335d      	adds	r3, #93	; 0x5d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d00a      	beq.n	800231e <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	335d      	adds	r3, #93	; 0x5d
 8002318:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800231a:	2b08      	cmp	r3, #8
 800231c:	d156      	bne.n	80023cc <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	3358      	adds	r3, #88	; 0x58
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c59      	adds	r1, r3, #1
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4403      	add	r3, r0
 8002340:	3358      	adds	r3, #88	; 0x58
 8002342:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3358      	adds	r3, #88	; 0x58
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d914      	bls.n	8002384 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3358      	adds	r3, #88	; 0x58
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	440b      	add	r3, r1
 800237c:	335c      	adds	r3, #92	; 0x5c
 800237e:	2204      	movs	r2, #4
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e009      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	335c      	adds	r3, #92	; 0x5c
 8002394:	2202      	movs	r2, #2
 8002396:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e056      	b.n	800247a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	440b      	add	r3, r1
 80023da:	335d      	adds	r3, #93	; 0x5d
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d123      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	2202      	movs	r2, #2
 80023f4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800240c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002414:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	015a      	lsls	r2, r3, #5
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4413      	add	r3, r2
 800241e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e027      	b.n	800247a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	335d      	adds	r3, #93	; 0x5d
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d11c      	bne.n	800247a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	440b      	add	r3, r1
 800244e:	3358      	adds	r3, #88	; 0x58
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1c59      	adds	r1, r3, #1
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4403      	add	r3, r0
 8002462:	3358      	adds	r3, #88	; 0x58
 8002464:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	440b      	add	r3, r1
 8002474:	335c      	adds	r3, #92	; 0x5c
 8002476:	2204      	movs	r2, #4
 8002478:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	015a      	lsls	r2, r3, #5
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	4413      	add	r3, r2
 8002482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002486:	461a      	mov	r2, r3
 8002488:	2302      	movs	r3, #2
 800248a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	b2d8      	uxtb	r0, r3
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	335c      	adds	r3, #92	; 0x5c
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	4601      	mov	r1, r0
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f006 fe06 	bl	80090b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024ac:	e0d1      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d13e      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	0151      	lsls	r1, r2, #5
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	440a      	add	r2, r1
 80024da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	4613      	mov	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4413      	add	r3, r2
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	3358      	adds	r3, #88	; 0x58
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	1c59      	adds	r1, r3, #1
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4403      	add	r3, r0
 8002506:	3358      	adds	r3, #88	; 0x58
 8002508:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	335d      	adds	r3, #93	; 0x5d
 800251a:	2206      	movs	r2, #6
 800251c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f004 fc22 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	461a      	mov	r2, r3
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	6093      	str	r3, [r2, #8]
}
 8002540:	e087      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	015a      	lsls	r2, r3, #5
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	d17c      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	440b      	add	r3, r1
 8002566:	333f      	adds	r3, #63	; 0x3f
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d122      	bne.n	80025b4 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	440b      	add	r3, r1
 800257c:	3358      	adds	r3, #88	; 0x58
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f004 fbe0 	bl	8006d72 <USB_HC_Halt>
 80025b2:	e045      	b.n	8002640 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	440b      	add	r3, r1
 80025d8:	333f      	adds	r3, #63	; 0x3f
 80025da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d12f      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	3358      	adds	r3, #88	; 0x58
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d121      	bne.n	8002640 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	335d      	adds	r3, #93	; 0x5d
 800260c:	2203      	movs	r2, #3
 800260e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	0151      	lsls	r1, r2, #5
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	440a      	add	r2, r1
 8002626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262a:	f043 0302 	orr.w	r3, r3, #2
 800262e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f004 fb99 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2310      	movs	r3, #16
 8002650:	6093      	str	r3, [r2, #8]
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b04      	cmp	r3, #4
 8002688:	d119      	bne.n	80026be <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	461a      	mov	r2, r3
 8002698:	2304      	movs	r3, #4
 800269a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026bc:	e33e      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d141      	bne.n	8002758 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	333d      	adds	r3, #61	; 0x3d
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f040 831f 	bne.w	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	333d      	adds	r3, #61	; 0x3d
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	335c      	adds	r3, #92	; 0x5c
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	0151      	lsls	r1, r2, #5
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	440a      	add	r2, r1
 800273c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f004 fb0e 	bl	8006d72 <USB_HC_Halt>
}
 8002756:	e2f1      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d13f      	bne.n	80027ee <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	335d      	adds	r3, #93	; 0x5d
 800277e:	2204      	movs	r2, #4
 8002780:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	440b      	add	r3, r1
 8002790:	333d      	adds	r3, #61	; 0x3d
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	3358      	adds	r3, #88	; 0x58
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	0151      	lsls	r1, r2, #5
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	440a      	add	r2, r1
 80027c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f004 facc 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	2340      	movs	r3, #64	; 0x40
 80027ea:	6093      	str	r3, [r2, #8]
}
 80027ec:	e2a6      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002804:	d122      	bne.n	800284c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	440a      	add	r2, r1
 800281c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f004 fa9e 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	6093      	str	r3, [r2, #8]
}
 800284a:	e277      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d135      	bne.n	80028ce <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	440b      	add	r3, r1
 8002870:	3358      	adds	r3, #88	; 0x58
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	015a      	lsls	r2, r3, #5
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4413      	add	r3, r2
 800287e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	0151      	lsls	r1, r2, #5
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	440a      	add	r2, r1
 800288c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f004 fa66 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	2301      	movs	r3, #1
 80028b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	335d      	adds	r3, #93	; 0x5d
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
}
 80028cc:	e236      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d12b      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2308      	movs	r3, #8
 80028f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	0151      	lsls	r1, r2, #5
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	440a      	add	r2, r1
 800290c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fa26 	bl	8006d72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	335d      	adds	r3, #93	; 0x5d
 8002936:	2205      	movs	r2, #5
 8002938:	701a      	strb	r2, [r3, #0]
}
 800293a:	e1ff      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	2b10      	cmp	r3, #16
 8002950:	d155      	bne.n	80029fe <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3358      	adds	r3, #88	; 0x58
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335d      	adds	r3, #93	; 0x5d
 8002976:	2203      	movs	r2, #3
 8002978:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	333d      	adds	r3, #61	; 0x3d
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d114      	bne.n	80029ba <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	440b      	add	r3, r1
 800299e:	333c      	adds	r3, #60	; 0x3c
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	333d      	adds	r3, #61	; 0x3d
 80029b6:	2201      	movs	r2, #1
 80029b8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	0151      	lsls	r1, r2, #5
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	440a      	add	r2, r1
 80029d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 f9c4 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	2310      	movs	r3, #16
 80029fa:	6093      	str	r3, [r2, #8]
}
 80029fc:	e19e      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d12b      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 f997 	bl	8006d72 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	335d      	adds	r3, #93	; 0x5d
 8002a54:	2206      	movs	r2, #6
 8002a56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2380      	movs	r3, #128	; 0x80
 8002a68:	6093      	str	r3, [r2, #8]
}
 8002a6a:	e167      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d135      	bne.n	8002af0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9e:	f043 0302 	orr.w	r3, r3, #2
 8002aa2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 f95f 	bl	8006d72 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	335d      	adds	r3, #93	; 0x5d
 8002aea:	2208      	movs	r2, #8
 8002aec:	701a      	strb	r2, [r3, #0]
}
 8002aee:	e125      	b.n	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f040 811a 	bne.w	8002d3c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	0151      	lsls	r1, r2, #5
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	440a      	add	r2, r1
 8002b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b22:	f023 0302 	bic.w	r3, r3, #2
 8002b26:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	335d      	adds	r3, #93	; 0x5d
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d137      	bne.n	8002bae <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	335c      	adds	r3, #92	; 0x5c
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	333f      	adds	r3, #63	; 0x3f
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d00b      	beq.n	8002b80 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	333f      	adds	r3, #63	; 0x3f
 8002b78:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	f040 80c5 	bne.w	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3351      	adds	r3, #81	; 0x51
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2d8      	uxtb	r0, r3
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3351      	adds	r3, #81	; 0x51
 8002ba8:	4602      	mov	r2, r0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e0ad      	b.n	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	440b      	add	r3, r1
 8002bbc:	335d      	adds	r3, #93	; 0x5d
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d10a      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e097      	b.n	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	335d      	adds	r3, #93	; 0x5d
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d10a      	bne.n	8002c06 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e081      	b.n	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	335d      	adds	r3, #93	; 0x5d
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d10a      	bne.n	8002c32 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e06b      	b.n	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335d      	adds	r3, #93	; 0x5d
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d00a      	beq.n	8002c5e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	335d      	adds	r3, #93	; 0x5d
 8002c58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d155      	bne.n	8002d0a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3358      	adds	r3, #88	; 0x58
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	1c59      	adds	r1, r3, #1
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4613      	mov	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4413      	add	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4403      	add	r3, r0
 8002c80:	3358      	adds	r3, #88	; 0x58
 8002c82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	440b      	add	r3, r1
 8002c92:	3358      	adds	r3, #88	; 0x58
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d914      	bls.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3358      	adds	r3, #88	; 0x58
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	335c      	adds	r3, #92	; 0x5c
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e009      	b.n	8002cd8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cee:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	2302      	movs	r3, #2
 8002d1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	b2d8      	uxtb	r0, r3
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	440b      	add	r3, r1
 8002d2e:	335c      	adds	r3, #92	; 0x5c
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	4601      	mov	r1, r0
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f006 f9be 	bl	80090b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d3c:	bf00      	nop
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	0c5b      	lsrs	r3, r3, #17
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d78:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d003      	beq.n	8002d88 <HCD_RXQLVL_IRQHandler+0x44>
 8002d80:	2b05      	cmp	r3, #5
 8002d82:	f000 8082 	beq.w	8002e8a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d86:	e083      	b.n	8002e90 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d07f      	beq.n	8002e8e <HCD_RXQLVL_IRQHandler+0x14a>
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	3344      	adds	r3, #68	; 0x44
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d074      	beq.n	8002e8e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	3344      	adds	r3, #68	; 0x44
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	b292      	uxth	r2, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	f003 fb75 	bl	80064ae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3344      	adds	r3, #68	; 0x44
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	18d1      	adds	r1, r2, r3
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	4403      	add	r3, r0
 8002de8:	3344      	adds	r3, #68	; 0x44
 8002dea:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	334c      	adds	r3, #76	; 0x4c
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	18d1      	adds	r1, r2, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4403      	add	r3, r0
 8002e10:	334c      	adds	r3, #76	; 0x4c
 8002e12:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d031      	beq.n	8002e8e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e48:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3350      	adds	r3, #80	; 0x50
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	f083 0301 	eor.w	r3, r3, #1
 8002e72:	b2d8      	uxtb	r0, r3
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3350      	adds	r3, #80	; 0x50
 8002e84:	4602      	mov	r2, r0
 8002e86:	701a      	strb	r2, [r3, #0]
      break;
 8002e88:	e001      	b.n	8002e8e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e8e:	bf00      	nop
  }
}
 8002e90:	bf00      	nop
 8002e92:	3728      	adds	r7, #40	; 0x28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	1ff80000 	.word	0x1ff80000

08002e9c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ec8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d10b      	bne.n	8002eec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 f8ce 	bl	8009080 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d132      	bne.n	8002f5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 0308 	orr.w	r3, r3, #8
 8002efc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d126      	bne.n	8002f56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d113      	bne.n	8002f38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f1a:	d106      	bne.n	8002f2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2102      	movs	r1, #2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 fbfe 	bl	8006724 <USB_InitFSLSPClkSel>
 8002f28:	e011      	b.n	8002f4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fbf7 	bl	8006724 <USB_InitFSLSPClkSel>
 8002f36:	e00a      	b.n	8002f4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f46:	461a      	mov	r2, r3
 8002f48:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f006 f8c0 	bl	80090d4 <HAL_HCD_PortEnabled_Callback>
 8002f54:	e002      	b.n	8002f5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f006 f8ca 	bl	80090f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d103      	bne.n	8002f6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f043 0320 	orr.w	r3, r3, #32
 8002f6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6013      	str	r3, [r2, #0]
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e11f      	b.n	80031d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fd8e 	bl	8000acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2224      	movs	r2, #36	; 0x24
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fe8:	f002 ff80 	bl	8005eec <HAL_RCC_GetPCLK1Freq>
 8002fec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4a7b      	ldr	r2, [pc, #492]	; (80031e0 <HAL_I2C_Init+0x25c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d807      	bhi.n	8003008 <HAL_I2C_Init+0x84>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4a7a      	ldr	r2, [pc, #488]	; (80031e4 <HAL_I2C_Init+0x260>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bf94      	ite	ls
 8003000:	2301      	movls	r3, #1
 8003002:	2300      	movhi	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e006      	b.n	8003016 <HAL_I2C_Init+0x92>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a77      	ldr	r2, [pc, #476]	; (80031e8 <HAL_I2C_Init+0x264>)
 800300c:	4293      	cmp	r3, r2
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e0db      	b.n	80031d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a72      	ldr	r2, [pc, #456]	; (80031ec <HAL_I2C_Init+0x268>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	0c9b      	lsrs	r3, r3, #18
 8003028:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a64      	ldr	r2, [pc, #400]	; (80031e0 <HAL_I2C_Init+0x25c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d802      	bhi.n	8003058 <HAL_I2C_Init+0xd4>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3301      	adds	r3, #1
 8003056:	e009      	b.n	800306c <HAL_I2C_Init+0xe8>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_I2C_Init+0x26c>)
 8003064:	fba2 2303 	umull	r2, r3, r2, r3
 8003068:	099b      	lsrs	r3, r3, #6
 800306a:	3301      	adds	r3, #1
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800307e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4956      	ldr	r1, [pc, #344]	; (80031e0 <HAL_I2C_Init+0x25c>)
 8003088:	428b      	cmp	r3, r1
 800308a:	d80d      	bhi.n	80030a8 <HAL_I2C_Init+0x124>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1e59      	subs	r1, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fbb1 f3f3 	udiv	r3, r1, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	bf38      	it	cc
 80030a4:	2304      	movcc	r3, #4
 80030a6:	e04f      	b.n	8003148 <HAL_I2C_Init+0x1c4>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_I2C_Init+0x150>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1e58      	subs	r0, r3, #1
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	e012      	b.n	80030fa <HAL_I2C_Init+0x176>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6859      	ldr	r1, [r3, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	0099      	lsls	r1, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Init+0x17e>
 80030fe:	2301      	movs	r3, #1
 8003100:	e022      	b.n	8003148 <HAL_I2C_Init+0x1c4>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10e      	bne.n	8003128 <HAL_I2C_Init+0x1a4>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1e58      	subs	r0, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	fbb0 f3f3 	udiv	r3, r0, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Init+0x1c4>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e58      	subs	r0, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6859      	ldr	r1, [r3, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	0099      	lsls	r1, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	fbb0 f3f3 	udiv	r3, r0, r3
 800313e:	3301      	adds	r3, #1
 8003140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	6809      	ldr	r1, [r1, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6911      	ldr	r1, [r2, #16]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	430b      	orrs	r3, r1
 800318a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	000186a0 	.word	0x000186a0
 80031e4:	001e847f 	.word	0x001e847f
 80031e8:	003d08ff 	.word	0x003d08ff
 80031ec:	431bde83 	.word	0x431bde83
 80031f0:	10624dd3 	.word	0x10624dd3

080031f4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d158      	bne.n	80032c0 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <HAL_I2C_Slave_Transmit_IT+0x26>
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e051      	b.n	80032c2 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_I2C_Slave_Transmit_IT+0x38>
 8003228:	2302      	movs	r3, #2
 800322a:	e04a      	b.n	80032c2 <HAL_I2C_Slave_Transmit_IT+0xce>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b01      	cmp	r3, #1
 8003240:	d007      	beq.n	8003252 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003260:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2221      	movs	r2, #33	; 0x21
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	88fa      	ldrh	r2, [r7, #6]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a2:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80032ba:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	ffff0000 	.word	0xffff0000

080032d4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	4613      	mov	r3, r2
 80032e0:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d158      	bne.n	80033a0 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <HAL_I2C_Slave_Receive_IT+0x26>
 80032f4:	88fb      	ldrh	r3, [r7, #6]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e051      	b.n	80033a2 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d101      	bne.n	800330c <HAL_I2C_Slave_Receive_IT+0x38>
 8003308:	2302      	movs	r3, #2
 800330a:	e04a      	b.n	80033a2 <HAL_I2C_Slave_Receive_IT+0xce>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b01      	cmp	r3, #1
 8003320:	d007      	beq.n	8003332 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003340:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2222      	movs	r2, #34	; 0x22
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	88fa      	ldrh	r2, [r7, #6]
 8003362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800339a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80033a0:	2302      	movs	r3, #2
  }
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	ffff0000 	.word	0xffff0000

080033b4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d124      	bne.n	8003412 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2228      	movs	r2, #40	; 0x28
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d007      	beq.n	80033ee <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0201 	orr.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033fc:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800340c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e000      	b.n	8003414 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003412:	2302      	movs	r3, #2
  }
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003440:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b10      	cmp	r3, #16
 800344e:	d003      	beq.n	8003458 <HAL_I2C_EV_IRQHandler+0x38>
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	f040 80bd 	bne.w	80035d2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10d      	bne.n	800348e <HAL_I2C_EV_IRQHandler+0x6e>
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003478:	d003      	beq.n	8003482 <HAL_I2C_EV_IRQHandler+0x62>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003480:	d101      	bne.n	8003486 <HAL_I2C_EV_IRQHandler+0x66>
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_I2C_EV_IRQHandler+0x68>
 8003486:	2300      	movs	r3, #0
 8003488:	2b01      	cmp	r3, #1
 800348a:	f000 812e 	beq.w	80036ea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00c      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x92>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	0a5b      	lsrs	r3, r3, #9
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d006      	beq.n	80034b2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f001 fc2b 	bl	8004d00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fd38 	bl	8003f20 <I2C_Master_SB>
 80034b0:	e08e      	b.n	80035d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_I2C_EV_IRQHandler+0xb2>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	0a5b      	lsrs	r3, r3, #9
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fdae 	bl	800402c <I2C_Master_ADD10>
 80034d0:	e07e      	b.n	80035d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0xd2>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	0a5b      	lsrs	r3, r3, #9
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 fdc8 	bl	8004080 <I2C_Master_ADDR>
 80034f0:	e06e      	b.n	80035d0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d037      	beq.n	800356e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800350c:	f000 80ef 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	09db      	lsrs	r3, r3, #7
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00f      	beq.n	800353c <HAL_I2C_EV_IRQHandler+0x11c>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	0a9b      	lsrs	r3, r3, #10
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_I2C_EV_IRQHandler+0x11c>
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d103      	bne.n	800353c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9c5 	bl	80038c4 <I2C_MasterTransmit_TXE>
 800353a:	e049      	b.n	80035d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80d2 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0a5b      	lsrs	r3, r3, #9
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80cb 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003558:	7bfb      	ldrb	r3, [r7, #15]
 800355a:	2b10      	cmp	r3, #16
 800355c:	d103      	bne.n	8003566 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa4c 	bl	80039fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003564:	e0c3      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fab0 	bl	8003acc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356c:	e0bf      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800357c:	f000 80b7 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	099b      	lsrs	r3, r3, #6
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00f      	beq.n	80035ac <HAL_I2C_EV_IRQHandler+0x18c>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	0a9b      	lsrs	r3, r3, #10
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_I2C_EV_IRQHandler+0x18c>
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb20 	bl	8003bea <I2C_MasterReceive_RXNE>
 80035aa:	e011      	b.n	80035d0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 809a 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	0a5b      	lsrs	r3, r3, #9
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 8093 	beq.w	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 fbbf 	bl	8003d4c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035ce:	e08e      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
 80035d0:	e08d      	b.n	80036ee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	e007      	b.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x206>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	0a5b      	lsrs	r3, r3, #9
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 ff7d 	bl	800451e <I2C_Slave_ADDR>
 8003624:	e066      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d009      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x226>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	0a5b      	lsrs	r3, r3, #9
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 ffb2 	bl	80045a8 <I2C_Slave_STOPF>
 8003644:	e056      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003646:	7bbb      	ldrb	r3, [r7, #14]
 8003648:	2b21      	cmp	r3, #33	; 0x21
 800364a:	d002      	beq.n	8003652 <HAL_I2C_EV_IRQHandler+0x232>
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	2b29      	cmp	r3, #41	; 0x29
 8003650:	d125      	bne.n	800369e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	09db      	lsrs	r3, r3, #7
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00f      	beq.n	800367e <HAL_I2C_EV_IRQHandler+0x25e>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	0a9b      	lsrs	r3, r3, #10
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_I2C_EV_IRQHandler+0x25e>
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fe93 	bl	80043a2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800367c:	e039      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	089b      	lsrs	r3, r3, #2
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d033      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	0a5b      	lsrs	r3, r3, #9
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02d      	beq.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fec0 	bl	800441c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800369c:	e029      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	099b      	lsrs	r3, r3, #6
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00f      	beq.n	80036ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	0a9b      	lsrs	r3, r3, #10
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fecb 	bl	800445e <I2C_SlaveReceive_RXNE>
 80036c8:	e014      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	0a5b      	lsrs	r3, r3, #9
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fef9 	bl	80044da <I2C_SlaveReceive_BTF>
 80036e8:	e004      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003712:	2300      	movs	r3, #0
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800371c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0x4e>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003746:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_I2C_ER_IRQHandler+0x78>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003770:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	0a9b      	lsrs	r3, r3, #10
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d03f      	beq.n	80037fe <HAL_I2C_ER_IRQHandler+0x104>
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0a1b      	lsrs	r3, r3, #8
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d039      	beq.n	80037fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800378a:	7efb      	ldrb	r3, [r7, #27]
 800378c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80037a4:	7ebb      	ldrb	r3, [r7, #26]
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d112      	bne.n	80037d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10f      	bne.n	80037d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80037b0:	7cfb      	ldrb	r3, [r7, #19]
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d008      	beq.n	80037c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80037b6:	7cfb      	ldrb	r3, [r7, #19]
 80037b8:	2b29      	cmp	r3, #41	; 0x29
 80037ba:	d005      	beq.n	80037c8 <HAL_I2C_ER_IRQHandler+0xce>
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b28      	cmp	r3, #40	; 0x28
 80037c0:	d106      	bne.n	80037d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b21      	cmp	r3, #33	; 0x21
 80037c6:	d103      	bne.n	80037d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f001 f81d 	bl	8004808 <I2C_Slave_AF>
 80037ce:	e016      	b.n	80037fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80037e2:	7efb      	ldrb	r3, [r7, #27]
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d002      	beq.n	80037ee <HAL_I2C_ER_IRQHandler+0xf4>
 80037e8:	7efb      	ldrb	r3, [r7, #27]
 80037ea:	2b40      	cmp	r3, #64	; 0x40
 80037ec:	d107      	bne.n	80037fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	0adb      	lsrs	r3, r3, #11
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00e      	beq.n	8003828 <HAL_I2C_ER_IRQHandler+0x12e>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f043 0308 	orr.w	r3, r3, #8
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003826:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	d008      	beq.n	8003840 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f001 f854 	bl	80048e8 <I2C_ITError>
  }
}
 8003840:	bf00      	nop
 8003842:	3728      	adds	r7, #40	; 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d150      	bne.n	800398c <I2C_MasterTransmit_TXE+0xc8>
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	2b21      	cmp	r3, #33	; 0x21
 80038ee:	d14d      	bne.n	800398c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d01d      	beq.n	8003932 <I2C_MasterTransmit_TXE+0x6e>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d01a      	beq.n	8003932 <I2C_MasterTransmit_TXE+0x6e>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003902:	d016      	beq.n	8003932 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003912:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2211      	movs	r2, #17
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ff8c 	bl	8003848 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003930:	e060      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003940:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003950:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b40      	cmp	r3, #64	; 0x40
 800396a:	d107      	bne.n	800397c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff7b 	bl	8003870 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800397a:	e03b      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff ff5f 	bl	8003848 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800398a:	e033      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b21      	cmp	r3, #33	; 0x21
 8003990:	d005      	beq.n	800399e <I2C_MasterTransmit_TXE+0xda>
 8003992:	7bbb      	ldrb	r3, [r7, #14]
 8003994:	2b40      	cmp	r3, #64	; 0x40
 8003996:	d12d      	bne.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b22      	cmp	r3, #34	; 0x22
 800399c:	d12a      	bne.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80039b8:	e01c      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d103      	bne.n	80039ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f880 	bl	8003acc <I2C_MemoryTransmit_TXE_BTF>
}
 80039cc:	e012      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	781a      	ldrb	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039f2:	e7ff      	b.n	80039f4 <I2C_MasterTransmit_TXE+0x130>
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b21      	cmp	r3, #33	; 0x21
 8003a14:	d156      	bne.n	8003ac4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d012      	beq.n	8003a46 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003a44:	e03e      	b.n	8003ac4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d01d      	beq.n	8003a88 <I2C_MasterTransmit_BTF+0x8c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d01a      	beq.n	8003a88 <I2C_MasterTransmit_BTF+0x8c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a58:	d016      	beq.n	8003a88 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a68:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2211      	movs	r2, #17
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff fee1 	bl	8003848 <HAL_I2C_MasterTxCpltCallback>
}
 8003a86:	e01d      	b.n	8003ac4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a96:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fec2 	bl	8003848 <HAL_I2C_MasterTxCpltCallback>
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ada:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11d      	bne.n	8003b20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10b      	bne.n	8003b04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003b02:	e06e      	b.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	121b      	asrs	r3, r3, #8
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b1e:	e060      	b.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d10b      	bne.n	8003b40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b3e:	e050      	b.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d14c      	bne.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b22      	cmp	r3, #34	; 0x22
 8003b4c:	d108      	bne.n	8003b60 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5c:	601a      	str	r2, [r3, #0]
}
 8003b5e:	e040      	b.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	2b21      	cmp	r3, #33	; 0x21
 8003b6e:	d112      	bne.n	8003b96 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b94:	e025      	b.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d120      	bne.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	2b21      	cmp	r3, #33	; 0x21
 8003ba4:	d11d      	bne.n	8003be2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bc4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fe47 	bl	8003870 <HAL_I2C_MemTxCpltCallback>
}
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b22      	cmp	r3, #34	; 0x22
 8003bfc:	f040 80a2 	bne.w	8003d44 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d921      	bls.n	8003c52 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	f040 8082 	bne.w	8003d44 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003c50:	e078      	b.n	8003d44 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d074      	beq.n	8003d44 <I2C_MasterReceive_RXNE+0x15a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <I2C_MasterReceive_RXNE+0x7c>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d16e      	bne.n	8003d44 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f818 	bl	8004c9c <I2C_WaitOnSTOPRequestThroughIT>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d142      	bne.n	8003cf8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b40      	cmp	r3, #64	; 0x40
 8003cca:	d10a      	bne.n	8003ce2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fdd2 	bl	8003884 <HAL_I2C_MemRxCpltCallback>
}
 8003ce0:	e030      	b.n	8003d44 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2212      	movs	r2, #18
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fdb3 	bl	800385c <HAL_I2C_MasterRxCpltCallback>
}
 8003cf6:	e025      	b.n	8003d44 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d06:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fc fc47 	bl	80005d2 <HAL_I2C_ErrorCallback>
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d11b      	bne.n	8003d9c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d72:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d9a:	e0bd      	b.n	8003f18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d129      	bne.n	8003dfa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d00a      	beq.n	8003dd2 <I2C_MasterReceive_BTF+0x86>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d007      	beq.n	8003dd2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003df8:	e08e      	b.n	8003f18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d176      	bne.n	8003ef2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d002      	beq.n	8003e10 <I2C_MasterReceive_BTF+0xc4>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b10      	cmp	r3, #16
 8003e0e:	d108      	bne.n	8003e22 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e019      	b.n	8003e56 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d002      	beq.n	8003e2e <I2C_MasterReceive_BTF+0xe2>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d108      	bne.n	8003e40 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e00a      	b.n	8003e56 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d007      	beq.n	8003e56 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691a      	ldr	r2, [r3, #16]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d10a      	bne.n	8003edc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fcd5 	bl	8003884 <HAL_I2C_MemRxCpltCallback>
}
 8003eda:	e01d      	b.n	8003f18 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2212      	movs	r2, #18
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7ff fcb6 	bl	800385c <HAL_I2C_MasterRxCpltCallback>
}
 8003ef0:	e012      	b.n	8003f18 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f18:	bf00      	nop
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b40      	cmp	r3, #64	; 0x40
 8003f32:	d117      	bne.n	8003f64 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f4c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f4e:	e067      	b.n	8004020 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	611a      	str	r2, [r3, #16]
}
 8003f62:	e05d      	b.n	8004020 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f6c:	d133      	bne.n	8003fd6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b21      	cmp	r3, #33	; 0x21
 8003f78:	d109      	bne.n	8003f8e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f8a:	611a      	str	r2, [r3, #16]
 8003f8c:	e008      	b.n	8003fa0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <I2C_Master_SB+0x92>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d032      	beq.n	8004020 <I2C_Master_SB+0x100>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d02d      	beq.n	8004020 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd2:	605a      	str	r2, [r3, #4]
}
 8003fd4:	e024      	b.n	8004020 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10e      	bne.n	8003ffc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	11db      	asrs	r3, r3, #7
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0306 	and.w	r3, r3, #6
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f063 030f 	orn	r3, r3, #15
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]
}
 8003ffa:	e011      	b.n	8004020 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	2b01      	cmp	r3, #1
 8004002:	d10d      	bne.n	8004020 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	b29b      	uxth	r3, r3
 800400a:	11db      	asrs	r3, r3, #7
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f003 0306 	and.w	r3, r3, #6
 8004012:	b2db      	uxtb	r3, r3
 8004014:	f063 030e 	orn	r3, r3, #14
 8004018:	b2da      	uxtb	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	611a      	str	r2, [r3, #16]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	b2da      	uxtb	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <I2C_Master_ADD10+0x24>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	2b00      	cmp	r3, #0
 800404e:	d011      	beq.n	8004074 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <I2C_Master_ADD10+0x38>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004072:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004080:	b480      	push	{r7}
 8004082:	b091      	sub	sp, #68	; 0x44
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800408e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b22      	cmp	r3, #34	; 0x22
 80040a8:	f040 8169 	bne.w	800437e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10f      	bne.n	80040d4 <I2C_Master_ADDR+0x54>
 80040b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040b8:	2b40      	cmp	r3, #64	; 0x40
 80040ba:	d10b      	bne.n	80040d4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	633b      	str	r3, [r7, #48]	; 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	e160      	b.n	8004396 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11d      	bne.n	8004118 <I2C_Master_ADDR+0x98>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040e4:	d118      	bne.n	8004118 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e6:	2300      	movs	r3, #0
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	651a      	str	r2, [r3, #80]	; 0x50
 8004116:	e13e      	b.n	8004396 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004122:	2300      	movs	r3, #0
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	62bb      	str	r3, [r7, #40]	; 0x28
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	e115      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	f040 808a 	bne.w	800426a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415c:	d137      	bne.n	80041ce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417c:	d113      	bne.n	80041a6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	; 0x24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a4:	e0e7      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	623b      	str	r3, [r7, #32]
 80041ba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e0d3      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d02e      	beq.n	8004232 <I2C_Master_ADDR+0x1b2>
 80041d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d02b      	beq.n	8004232 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041dc:	2b12      	cmp	r3, #18
 80041de:	d102      	bne.n	80041e6 <I2C_Master_ADDR+0x166>
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d125      	bne.n	8004232 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d00e      	beq.n	800420a <I2C_Master_ADDR+0x18a>
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d00b      	beq.n	800420a <I2C_Master_ADDR+0x18a>
 80041f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d008      	beq.n	800420a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	e007      	b.n	800421a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004218:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	e0a1      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004240:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e085      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d14d      	bne.n	8004310 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	2b04      	cmp	r3, #4
 8004278:	d016      	beq.n	80042a8 <I2C_Master_ADDR+0x228>
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	2b02      	cmp	r3, #2
 800427e:	d013      	beq.n	80042a8 <I2C_Master_ADDR+0x228>
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	2b10      	cmp	r3, #16
 8004284:	d010      	beq.n	80042a8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	e007      	b.n	80042b8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c6:	d117      	bne.n	80042f8 <I2C_Master_ADDR+0x278>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ce:	d00b      	beq.n	80042e8 <I2C_Master_ADDR+0x268>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d008      	beq.n	80042e8 <I2C_Master_ADDR+0x268>
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d005      	beq.n	80042e8 <I2C_Master_ADDR+0x268>
 80042dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d002      	beq.n	80042e8 <I2C_Master_ADDR+0x268>
 80042e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d107      	bne.n	80042f8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042f6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	e032      	b.n	8004376 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800431e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432e:	d117      	bne.n	8004360 <I2C_Master_ADDR+0x2e0>
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004336:	d00b      	beq.n	8004350 <I2C_Master_ADDR+0x2d0>
 8004338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433a:	2b01      	cmp	r3, #1
 800433c:	d008      	beq.n	8004350 <I2C_Master_ADDR+0x2d0>
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b08      	cmp	r3, #8
 8004342:	d005      	beq.n	8004350 <I2C_Master_ADDR+0x2d0>
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b10      	cmp	r3, #16
 8004348:	d002      	beq.n	8004350 <I2C_Master_ADDR+0x2d0>
 800434a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434c:	2b20      	cmp	r3, #32
 800434e:	d107      	bne.n	8004360 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800435e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800437c:	e00b      	b.n	8004396 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
}
 8004394:	e7ff      	b.n	8004396 <I2C_Master_ADDR+0x316>
 8004396:	bf00      	nop
 8004398:	3744      	adds	r7, #68	; 0x44
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d02b      	beq.n	8004414 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29a      	uxth	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d114      	bne.n	8004414 <I2C_SlaveTransmit_TXE+0x72>
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b29      	cmp	r3, #41	; 0x29
 80043ee:	d111      	bne.n	8004414 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2221      	movs	r2, #33	; 0x21
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2228      	movs	r2, #40	; 0x28
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fc f8be 	bl	8000590 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	3b01      	subs	r3, #1
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b084      	sub	sp, #16
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02c      	beq.n	80044d2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d114      	bne.n	80044d2 <I2C_SlaveReceive_RXNE+0x74>
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	2b2a      	cmp	r3, #42	; 0x2a
 80044ac:	d111      	bne.n	80044d2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2222      	movs	r2, #34	; 0x22
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2228      	movs	r2, #40	; 0x28
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7fc f80f 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d012      	beq.n	8004512 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691a      	ldr	r2, [r3, #16]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004538:	2b28      	cmp	r3, #40	; 0x28
 800453a:	d127      	bne.n	800458c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004558:	2301      	movs	r3, #1
 800455a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	09db      	lsrs	r3, r3, #7
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	81bb      	strh	r3, [r7, #12]
 800456e:	e002      	b.n	8004576 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800457e:	89ba      	ldrh	r2, [r7, #12]
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7fb ff9f 	bl	80004c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800458a:	e008      	b.n	800459e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0202 	mvn.w	r2, #2
 8004594:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045c8:	2300      	movs	r3, #0
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004604:	d172      	bne.n	80046ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	2b22      	cmp	r3, #34	; 0x22
 800460a:	d002      	beq.n	8004612 <I2C_Slave_STOPF+0x6a>
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b2a      	cmp	r3, #42	; 0x2a
 8004610:	d135      	bne.n	800467e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004644:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fdcb 	bl	80011e6 <HAL_DMA_GetState>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d049      	beq.n	80046ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	4a69      	ldr	r2, [pc, #420]	; (8004800 <I2C_Slave_STOPF+0x258>)
 800465c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fd9d 	bl	80011a2 <HAL_DMA_Abort_IT>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d03d      	beq.n	80046ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004678:	4610      	mov	r0, r2
 800467a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800467c:	e035      	b.n	80046ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f043 0204 	orr.w	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fc fd95 	bl	80011e6 <HAL_DMA_GetState>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d014      	beq.n	80046ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c6:	4a4e      	ldr	r2, [pc, #312]	; (8004800 <I2C_Slave_STOPF+0x258>)
 80046c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fc fd67 	bl	80011a2 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d008      	beq.n	80046ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
 80046e8:	e000      	b.n	80046ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03e      	beq.n	8004774 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d112      	bne.n	800472a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d112      	bne.n	800475e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8b3 	bl	80048e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004782:	e039      	b.n	80047f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b2a      	cmp	r3, #42	; 0x2a
 8004788:	d109      	bne.n	800479e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2228      	movs	r2, #40	; 0x28
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7fb fea9 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b28      	cmp	r3, #40	; 0x28
 80047a8:	d111      	bne.n	80047ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a15      	ldr	r2, [pc, #84]	; (8004804 <I2C_Slave_STOPF+0x25c>)
 80047ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fb fef8 	bl	80005bc <HAL_I2C_ListenCpltCallback>
}
 80047cc:	e014      	b.n	80047f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	d002      	beq.n	80047dc <I2C_Slave_STOPF+0x234>
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b22      	cmp	r3, #34	; 0x22
 80047da:	d10d      	bne.n	80047f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fb fe7c 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08004b4d 	.word	0x08004b4d
 8004804:	ffff0000 	.word	0xffff0000

08004808 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d002      	beq.n	800482a <I2C_Slave_AF+0x22>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b20      	cmp	r3, #32
 8004828:	d129      	bne.n	800487e <I2C_Slave_AF+0x76>
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	2b28      	cmp	r3, #40	; 0x28
 800482e:	d126      	bne.n	800487e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a2c      	ldr	r2, [pc, #176]	; (80048e4 <I2C_Slave_AF+0xdc>)
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004844:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800484e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fb fea0 	bl	80005bc <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800487c:	e02e      	b.n	80048dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b21      	cmp	r3, #33	; 0x21
 8004882:	d126      	bne.n	80048d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <I2C_Slave_AF+0xdc>)
 8004888:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2221      	movs	r2, #33	; 0x21
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fb fe60 	bl	8000590 <HAL_I2C_SlaveTxCpltCallback>
}
 80048d0:	e004      	b.n	80048dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048da:	615a      	str	r2, [r3, #20]
}
 80048dc:	bf00      	nop
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004900:	7bbb      	ldrb	r3, [r7, #14]
 8004902:	2b10      	cmp	r3, #16
 8004904:	d002      	beq.n	800490c <I2C_ITError+0x24>
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b40      	cmp	r3, #64	; 0x40
 800490a:	d10a      	bne.n	8004922 <I2C_ITError+0x3a>
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b22      	cmp	r3, #34	; 0x22
 8004910:	d107      	bne.n	8004922 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004920:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004928:	2b28      	cmp	r3, #40	; 0x28
 800492a:	d107      	bne.n	800493c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2228      	movs	r2, #40	; 0x28
 8004936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800493a:	e015      	b.n	8004968 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800494a:	d00a      	beq.n	8004962 <I2C_ITError+0x7a>
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d007      	beq.n	8004962 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d162      	bne.n	8004a3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004986:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d020      	beq.n	80049d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	4a6a      	ldr	r2, [pc, #424]	; (8004b44 <I2C_ITError+0x25c>)
 800499c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc fbfd 	bl	80011a2 <HAL_DMA_Abort_IT>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8089 	beq.w	8004ac2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0201 	bic.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049d2:	4610      	mov	r0, r2
 80049d4:	4798      	blx	r3
 80049d6:	e074      	b.n	8004ac2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	4a59      	ldr	r2, [pc, #356]	; (8004b44 <I2C_ITError+0x25c>)
 80049de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fc fbdc 	bl	80011a2 <HAL_DMA_Abort_IT>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d068      	beq.n	8004ac2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d10b      	bne.n	8004a16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a38:	4610      	mov	r0, r2
 8004a3a:	4798      	blx	r3
 8004a3c:	e041      	b.n	8004ac2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b60      	cmp	r3, #96	; 0x60
 8004a48:	d125      	bne.n	8004a96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d10b      	bne.n	8004a7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0201 	bic.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fe ff02 	bl	8003898 <HAL_I2C_AbortCpltCallback>
 8004a94:	e015      	b.n	8004ac2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d10b      	bne.n	8004abc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fb fd88 	bl	80005d2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10e      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d113      	bne.n	8004b3c <I2C_ITError+0x254>
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b28      	cmp	r3, #40	; 0x28
 8004b18:	d110      	bne.n	8004b3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <I2C_ITError+0x260>)
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fb fd40 	bl	80005bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08004b4d 	.word	0x08004b4d
 8004b48:	ffff0000 	.word	0xffff0000

08004b4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b66:	4b4b      	ldr	r3, [pc, #300]	; (8004c94 <I2C_DMAAbort+0x148>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	08db      	lsrs	r3, r3, #3
 8004b6c:	4a4a      	ldr	r2, [pc, #296]	; (8004c98 <I2C_DMAAbort+0x14c>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0a1a      	lsrs	r2, r3, #8
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	00da      	lsls	r2, r3, #3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004b92:	e00a      	b.n	8004baa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba8:	d0ea      	beq.n	8004b80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	2200      	movs	r2, #0
 8004bee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b60      	cmp	r3, #96	; 0x60
 8004c1a:	d10e      	bne.n	8004c3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c32:	6978      	ldr	r0, [r7, #20]
 8004c34:	f7fe fe30 	bl	8003898 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c38:	e027      	b.n	8004c8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c40:	2b28      	cmp	r3, #40	; 0x28
 8004c42:	d117      	bne.n	8004c74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2200      	movs	r2, #0
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2228      	movs	r2, #40	; 0x28
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c72:	e007      	b.n	8004c84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7fb fca4 	bl	80005d2 <HAL_I2C_ErrorCallback>
}
 8004c8a:	bf00      	nop
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000000 	.word	0x20000000
 8004c98:	14f8b589 	.word	0x14f8b589

08004c9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	08db      	lsrs	r3, r3, #3
 8004cae:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	0a1a      	lsrs	r2, r3, #8
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f043 0220 	orr.w	r2, r3, #32
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e008      	b.n	8004cec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce8:	d0e9      	beq.n	8004cbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	14f8b589 	.word	0x14f8b589

08004d00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d10:	d103      	bne.n	8004d1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d18:	e007      	b.n	8004d2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d22:	d102      	bne.n	8004d2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2208      	movs	r2, #8
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e128      	b.n	8004f9c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a90      	ldr	r2, [pc, #576]	; (8004fa4 <HAL_I2S_Init+0x26c>)
 8004d62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fb ff09 	bl	8000b7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2202      	movs	r2, #2
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	6812      	ldr	r2, [r2, #0]
 8004d7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d80:	f023 030f 	bic.w	r3, r3, #15
 8004d84:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d060      	beq.n	8004e58 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004d9e:	2310      	movs	r3, #16
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e001      	b.n	8004da8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004da4:	2320      	movs	r3, #32
 8004da6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d802      	bhi.n	8004db6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004db6:	2001      	movs	r0, #1
 8004db8:	f001 f98e 	bl	80060d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dbc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc6:	d125      	bne.n	8004e14 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dda:	4613      	mov	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	3305      	adds	r3, #5
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e01f      	b.n	8004e32 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	3305      	adds	r3, #5
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	e00e      	b.n	8004e32 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	3305      	adds	r3, #5
 8004e30:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4a5c      	ldr	r2, [pc, #368]	; (8004fa8 <HAL_I2S_Init+0x270>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	08db      	lsrs	r3, r3, #3
 8004e3c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	085b      	lsrs	r3, r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	021b      	lsls	r3, r3, #8
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e003      	b.n	8004e60 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d902      	bls.n	8004e6c <HAL_I2S_Init+0x134>
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	2bff      	cmp	r3, #255	; 0xff
 8004e6a:	d907      	bls.n	8004e7c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e08f      	b.n	8004f9c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	ea42 0103 	orr.w	r1, r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e9a:	f023 030f 	bic.w	r3, r3, #15
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6851      	ldr	r1, [r2, #4]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	68d2      	ldr	r2, [r2, #12]
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6992      	ldr	r2, [r2, #24]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ebe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d161      	bne.n	8004f8c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a38      	ldr	r2, [pc, #224]	; (8004fac <HAL_I2S_Init+0x274>)
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a37      	ldr	r2, [pc, #220]	; (8004fb0 <HAL_I2S_Init+0x278>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d101      	bne.n	8004edc <HAL_I2S_Init+0x1a4>
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_I2S_Init+0x27c>)
 8004eda:	e001      	b.n	8004ee0 <HAL_I2S_Init+0x1a8>
 8004edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6812      	ldr	r2, [r2, #0]
 8004ee6:	4932      	ldr	r1, [pc, #200]	; (8004fb0 <HAL_I2S_Init+0x278>)
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	d101      	bne.n	8004ef0 <HAL_I2S_Init+0x1b8>
 8004eec:	4a31      	ldr	r2, [pc, #196]	; (8004fb4 <HAL_I2S_Init+0x27c>)
 8004eee:	e001      	b.n	8004ef4 <HAL_I2S_Init+0x1bc>
 8004ef0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004ef4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ef8:	f023 030f 	bic.w	r3, r3, #15
 8004efc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2b      	ldr	r2, [pc, #172]	; (8004fb0 <HAL_I2S_Init+0x278>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d101      	bne.n	8004f0c <HAL_I2S_Init+0x1d4>
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <HAL_I2S_Init+0x27c>)
 8004f0a:	e001      	b.n	8004f10 <HAL_I2S_Init+0x1d8>
 8004f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f10:	2202      	movs	r2, #2
 8004f12:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <HAL_I2S_Init+0x278>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2S_Init+0x1ea>
 8004f1e:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_I2S_Init+0x27c>)
 8004f20:	e001      	b.n	8004f26 <HAL_I2S_Init+0x1ee>
 8004f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f32:	d003      	beq.n	8004f3c <HAL_I2S_Init+0x204>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	e001      	b.n	8004f48 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f44:	2300      	movs	r3, #0
 8004f46:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	b299      	uxth	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004f5e:	4303      	orrs	r3, r0
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	430b      	orrs	r3, r1
 8004f64:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004f66:	4313      	orrs	r3, r2
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	897b      	ldrh	r3, [r7, #10]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f74:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a0d      	ldr	r2, [pc, #52]	; (8004fb0 <HAL_I2S_Init+0x278>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2S_Init+0x24c>
 8004f80:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_I2S_Init+0x27c>)
 8004f82:	e001      	b.n	8004f88 <HAL_I2S_Init+0x250>
 8004f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f88:	897a      	ldrh	r2, [r7, #10]
 8004f8a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	080050af 	.word	0x080050af
 8004fa8:	cccccccd 	.word	0xcccccccd
 8004fac:	080051c5 	.word	0x080051c5
 8004fb0:	40003800 	.word	0x40003800
 8004fb4:	40003400 	.word	0x40003400

08004fb8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c9a      	adds	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10e      	bne.n	8005048 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005038:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ffb8 	bl	8004fb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68da      	ldr	r2, [r3, #12]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	b292      	uxth	r2, r2
 8005064:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	1c9a      	adds	r2, r3, #2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005082:	b29b      	uxth	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10e      	bne.n	80050a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005096:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff93 	bl	8004fcc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d13a      	bne.n	8005140 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d109      	bne.n	80050e8 <I2S_IRQHandler+0x3a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d102      	bne.n	80050e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff ffb4 	bl	8005050 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ee:	2b40      	cmp	r3, #64	; 0x40
 80050f0:	d126      	bne.n	8005140 <I2S_IRQHandler+0x92>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d11f      	bne.n	8005140 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800510e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005110:	2300      	movs	r3, #0
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0202 	orr.w	r2, r3, #2
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ff50 	bl	8004fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b03      	cmp	r3, #3
 800514a:	d136      	bne.n	80051ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d109      	bne.n	800516a <I2S_IRQHandler+0xbc>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d102      	bne.n	800516a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ff45 	bl	8004ff4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d122      	bne.n	80051ba <I2S_IRQHandler+0x10c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0320 	and.w	r3, r3, #32
 800517e:	2b20      	cmp	r3, #32
 8005180:	d11b      	bne.n	80051ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005190:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ac:	f043 0204 	orr.w	r2, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ff13 	bl	8004fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4aa2      	ldr	r2, [pc, #648]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80051de:	4ba2      	ldr	r3, [pc, #648]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051e0:	e001      	b.n	80051e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80051e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a9b      	ldr	r2, [pc, #620]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d101      	bne.n	8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80051fc:	4b9a      	ldr	r3, [pc, #616]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051fe:	e001      	b.n	8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d004      	beq.n	800521c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	f040 8099 	bne.w	800534e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d107      	bne.n	8005236 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f925 	bl	8005480 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9c8 	bl	80055e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d13a      	bne.n	80052d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	d035      	beq.n	80052d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7e      	ldr	r2, [pc, #504]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800526e:	4b7e      	ldr	r3, [pc, #504]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005270:	e001      	b.n	8005276 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4979      	ldr	r1, [pc, #484]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800527e:	428b      	cmp	r3, r1
 8005280:	d101      	bne.n	8005286 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005282:	4b79      	ldr	r3, [pc, #484]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005284:	e001      	b.n	800528a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800528e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800529e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f043 0202 	orr.w	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff fe88 	bl	8004fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	f040 80be 	bne.w	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80b8 	beq.w	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a59      	ldr	r2, [pc, #356]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005302:	4b59      	ldr	r3, [pc, #356]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005304:	e001      	b.n	800530a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4954      	ldr	r1, [pc, #336]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005312:	428b      	cmp	r3, r1
 8005314:	d101      	bne.n	800531a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005316:	4b54      	ldr	r3, [pc, #336]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005318:	e001      	b.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800531a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800531e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005322:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f043 0204 	orr.w	r2, r3, #4
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fe4a 	bl	8004fe0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800534c:	e084      	b.n	8005458 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d107      	bne.n	8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8be 	bl	80054e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d107      	bne.n	8005382 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f8fd 	bl	800557c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b40      	cmp	r3, #64	; 0x40
 800538a:	d12f      	bne.n	80053ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02a      	beq.n	80053ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a2e      	ldr	r2, [pc, #184]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053b0:	4b2d      	ldr	r3, [pc, #180]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053b2:	e001      	b.n	80053b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4929      	ldr	r1, [pc, #164]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053c0:	428b      	cmp	r3, r1
 80053c2:	d101      	bne.n	80053c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053c6:	e001      	b.n	80053cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80053c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f043 0202 	orr.w	r2, r3, #2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff fdfa 	bl	8004fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d131      	bne.n	800545a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d02c      	beq.n	800545a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a17      	ldr	r2, [pc, #92]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d101      	bne.n	800540e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800540a:	4b17      	ldr	r3, [pc, #92]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800540c:	e001      	b.n	8005412 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800540e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4912      	ldr	r1, [pc, #72]	; (8005464 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800541a:	428b      	cmp	r3, r1
 800541c:	d101      	bne.n	8005422 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800541e:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005420:	e001      	b.n	8005426 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005422:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005426:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800542a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800543a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005448:	f043 0204 	orr.w	r2, r3, #4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fdc5 	bl	8004fe0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005456:	e000      	b.n	800545a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005458:	bf00      	nop
}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40003800 	.word	0x40003800
 8005468:	40003400 	.word	0x40003400

0800546c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548c:	1c99      	adds	r1, r3, #2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6251      	str	r1, [r2, #36]	; 0x24
 8005492:	881a      	ldrh	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d113      	bne.n	80054da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff ffc9 	bl	800546c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c99      	adds	r1, r3, #2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6251      	str	r1, [r2, #36]	; 0x24
 80054f6:	8819      	ldrh	r1, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <I2SEx_TxISR_I2SExt+0x90>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d101      	bne.n	8005506 <I2SEx_TxISR_I2SExt+0x22>
 8005502:	4b1d      	ldr	r3, [pc, #116]	; (8005578 <I2SEx_TxISR_I2SExt+0x94>)
 8005504:	e001      	b.n	800550a <I2SEx_TxISR_I2SExt+0x26>
 8005506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550a:	460a      	mov	r2, r1
 800550c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d121      	bne.n	800556a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a12      	ldr	r2, [pc, #72]	; (8005574 <I2SEx_TxISR_I2SExt+0x90>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d101      	bne.n	8005534 <I2SEx_TxISR_I2SExt+0x50>
 8005530:	4b11      	ldr	r3, [pc, #68]	; (8005578 <I2SEx_TxISR_I2SExt+0x94>)
 8005532:	e001      	b.n	8005538 <I2SEx_TxISR_I2SExt+0x54>
 8005534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	490d      	ldr	r1, [pc, #52]	; (8005574 <I2SEx_TxISR_I2SExt+0x90>)
 8005540:	428b      	cmp	r3, r1
 8005542:	d101      	bne.n	8005548 <I2SEx_TxISR_I2SExt+0x64>
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <I2SEx_TxISR_I2SExt+0x94>)
 8005546:	e001      	b.n	800554c <I2SEx_TxISR_I2SExt+0x68>
 8005548:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800554c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005550:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff81 	bl	800546c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	40003800 	.word	0x40003800
 8005578:	40003400 	.word	0x40003400

0800557c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68d8      	ldr	r0, [r3, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	1c99      	adds	r1, r3, #2
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005594:	b282      	uxth	r2, r0
 8005596:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d113      	bne.n	80055d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff ff4a 	bl	800546c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a20      	ldr	r2, [pc, #128]	; (8005670 <I2SEx_RxISR_I2SExt+0x90>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d101      	bne.n	80055f6 <I2SEx_RxISR_I2SExt+0x16>
 80055f2:	4b20      	ldr	r3, [pc, #128]	; (8005674 <I2SEx_RxISR_I2SExt+0x94>)
 80055f4:	e001      	b.n	80055fa <I2SEx_RxISR_I2SExt+0x1a>
 80055f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055fa:	68d8      	ldr	r0, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	1c99      	adds	r1, r3, #2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005606:	b282      	uxth	r2, r0
 8005608:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800560e:	b29b      	uxth	r3, r3
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d121      	bne.n	8005666 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a12      	ldr	r2, [pc, #72]	; (8005670 <I2SEx_RxISR_I2SExt+0x90>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <I2SEx_RxISR_I2SExt+0x50>
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <I2SEx_RxISR_I2SExt+0x94>)
 800562e:	e001      	b.n	8005634 <I2SEx_RxISR_I2SExt+0x54>
 8005630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	490d      	ldr	r1, [pc, #52]	; (8005670 <I2SEx_RxISR_I2SExt+0x90>)
 800563c:	428b      	cmp	r3, r1
 800563e:	d101      	bne.n	8005644 <I2SEx_RxISR_I2SExt+0x64>
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <I2SEx_RxISR_I2SExt+0x94>)
 8005642:	e001      	b.n	8005648 <I2SEx_RxISR_I2SExt+0x68>
 8005644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005648:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800564c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d106      	bne.n	8005666 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff ff03 	bl	800546c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40003800 	.word	0x40003800
 8005674:	40003400 	.word	0x40003400

08005678 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e25b      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d075      	beq.n	8005782 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005696:	4ba3      	ldr	r3, [pc, #652]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 030c 	and.w	r3, r3, #12
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d00c      	beq.n	80056bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056a2:	4ba0      	ldr	r3, [pc, #640]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d112      	bne.n	80056d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ae:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ba:	d10b      	bne.n	80056d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056bc:	4b99      	ldr	r3, [pc, #612]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d05b      	beq.n	8005780 <HAL_RCC_OscConfig+0x108>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d157      	bne.n	8005780 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e236      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	d106      	bne.n	80056ec <HAL_RCC_OscConfig+0x74>
 80056de:	4b91      	ldr	r3, [pc, #580]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a90      	ldr	r2, [pc, #576]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e01d      	b.n	8005728 <HAL_RCC_OscConfig+0xb0>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCC_OscConfig+0x98>
 80056f6:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a8a      	ldr	r2, [pc, #552]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b88      	ldr	r3, [pc, #544]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a87      	ldr	r2, [pc, #540]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e00b      	b.n	8005728 <HAL_RCC_OscConfig+0xb0>
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a83      	ldr	r2, [pc, #524]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4b81      	ldr	r3, [pc, #516]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a80      	ldr	r2, [pc, #512]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d013      	beq.n	8005758 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fb fbf8 	bl	8000f24 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005738:	f7fb fbf4 	bl	8000f24 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e1fb      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	4b76      	ldr	r3, [pc, #472]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0xc0>
 8005756:	e014      	b.n	8005782 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005758:	f7fb fbe4 	bl	8000f24 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005760:	f7fb fbe0 	bl	8000f24 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e1e7      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005772:	4b6c      	ldr	r3, [pc, #432]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0xe8>
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d063      	beq.n	8005856 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800578e:	4b65      	ldr	r3, [pc, #404]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00b      	beq.n	80057b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800579a:	4b62      	ldr	r3, [pc, #392]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d11c      	bne.n	80057e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057a6:	4b5f      	ldr	r3, [pc, #380]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d116      	bne.n	80057e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057b2:	4b5c      	ldr	r3, [pc, #368]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d005      	beq.n	80057ca <HAL_RCC_OscConfig+0x152>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d001      	beq.n	80057ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e1bb      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ca:	4b56      	ldr	r3, [pc, #344]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4952      	ldr	r1, [pc, #328]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057de:	e03a      	b.n	8005856 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d020      	beq.n	800582a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057e8:	4b4f      	ldr	r3, [pc, #316]	; (8005928 <HAL_RCC_OscConfig+0x2b0>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ee:	f7fb fb99 	bl	8000f24 <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057f6:	f7fb fb95 	bl	8000f24 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e19c      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005808:	4b46      	ldr	r3, [pc, #280]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	4b43      	ldr	r3, [pc, #268]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4940      	ldr	r1, [pc, #256]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 8005824:	4313      	orrs	r3, r2
 8005826:	600b      	str	r3, [r1, #0]
 8005828:	e015      	b.n	8005856 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800582a:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <HAL_RCC_OscConfig+0x2b0>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fb fb78 	bl	8000f24 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005838:	f7fb fb74 	bl	8000f24 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e17b      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d030      	beq.n	80058c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d016      	beq.n	8005898 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800586a:	4b30      	ldr	r3, [pc, #192]	; (800592c <HAL_RCC_OscConfig+0x2b4>)
 800586c:	2201      	movs	r2, #1
 800586e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005870:	f7fb fb58 	bl	8000f24 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005878:	f7fb fb54 	bl	8000f24 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e15b      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800588a:	4b26      	ldr	r3, [pc, #152]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0f0      	beq.n	8005878 <HAL_RCC_OscConfig+0x200>
 8005896:	e015      	b.n	80058c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005898:	4b24      	ldr	r3, [pc, #144]	; (800592c <HAL_RCC_OscConfig+0x2b4>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800589e:	f7fb fb41 	bl	8000f24 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a6:	f7fb fb3d 	bl	8000f24 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e144      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058b8:	4b1a      	ldr	r3, [pc, #104]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80058ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f0      	bne.n	80058a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80a0 	beq.w	8005a12 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d2:	2300      	movs	r3, #0
 80058d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d6:	4b13      	ldr	r3, [pc, #76]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10f      	bne.n	8005902 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a0e      	ldr	r2, [pc, #56]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b0c      	ldr	r3, [pc, #48]	; (8005924 <HAL_RCC_OscConfig+0x2ac>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fe:	2301      	movs	r3, #1
 8005900:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_RCC_OscConfig+0x2b8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590a:	2b00      	cmp	r3, #0
 800590c:	d121      	bne.n	8005952 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800590e:	4b08      	ldr	r3, [pc, #32]	; (8005930 <HAL_RCC_OscConfig+0x2b8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a07      	ldr	r2, [pc, #28]	; (8005930 <HAL_RCC_OscConfig+0x2b8>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800591a:	f7fb fb03 	bl	8000f24 <HAL_GetTick>
 800591e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005920:	e011      	b.n	8005946 <HAL_RCC_OscConfig+0x2ce>
 8005922:	bf00      	nop
 8005924:	40023800 	.word	0x40023800
 8005928:	42470000 	.word	0x42470000
 800592c:	42470e80 	.word	0x42470e80
 8005930:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005934:	f7fb faf6 	bl	8000f24 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	2b02      	cmp	r3, #2
 8005940:	d901      	bls.n	8005946 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e0fd      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005946:	4b81      	ldr	r3, [pc, #516]	; (8005b4c <HAL_RCC_OscConfig+0x4d4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d0f0      	beq.n	8005934 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d106      	bne.n	8005968 <HAL_RCC_OscConfig+0x2f0>
 800595a:	4b7d      	ldr	r3, [pc, #500]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	4a7c      	ldr	r2, [pc, #496]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	6713      	str	r3, [r2, #112]	; 0x70
 8005966:	e01c      	b.n	80059a2 <HAL_RCC_OscConfig+0x32a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b05      	cmp	r3, #5
 800596e:	d10c      	bne.n	800598a <HAL_RCC_OscConfig+0x312>
 8005970:	4b77      	ldr	r3, [pc, #476]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a76      	ldr	r2, [pc, #472]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005976:	f043 0304 	orr.w	r3, r3, #4
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	4b74      	ldr	r3, [pc, #464]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 800597e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005980:	4a73      	ldr	r2, [pc, #460]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	6713      	str	r3, [r2, #112]	; 0x70
 8005988:	e00b      	b.n	80059a2 <HAL_RCC_OscConfig+0x32a>
 800598a:	4b71      	ldr	r3, [pc, #452]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a70      	ldr	r2, [pc, #448]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
 8005996:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	4a6d      	ldr	r2, [pc, #436]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 800599c:	f023 0304 	bic.w	r3, r3, #4
 80059a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d015      	beq.n	80059d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fb fabb 	bl	8000f24 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059b2:	f7fb fab7 	bl	8000f24 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e0bc      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0ee      	beq.n	80059b2 <HAL_RCC_OscConfig+0x33a>
 80059d4:	e014      	b.n	8005a00 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059d6:	f7fb faa5 	bl	8000f24 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fb faa1 	bl	8000f24 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e0a6      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059f4:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 80059f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1ee      	bne.n	80059de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d105      	bne.n	8005a12 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a06:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	4a51      	ldr	r2, [pc, #324]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005a0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8092 	beq.w	8005b40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a1c:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 030c 	and.w	r3, r3, #12
 8005a24:	2b08      	cmp	r3, #8
 8005a26:	d05c      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d141      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a30:	4b48      	ldr	r3, [pc, #288]	; (8005b54 <HAL_RCC_OscConfig+0x4dc>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a36:	f7fb fa75 	bl	8000f24 <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a3e:	f7fb fa71 	bl	8000f24 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e078      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a50:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	019b      	lsls	r3, r3, #6
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	3b01      	subs	r3, #1
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	4933      	ldr	r1, [pc, #204]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a86:	4b33      	ldr	r3, [pc, #204]	; (8005b54 <HAL_RCC_OscConfig+0x4dc>)
 8005a88:	2201      	movs	r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a8c:	f7fb fa4a 	bl	8000f24 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fb fa46 	bl	8000f24 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e04d      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x41c>
 8005ab2:	e045      	b.n	8005b40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b27      	ldr	r3, [pc, #156]	; (8005b54 <HAL_RCC_OscConfig+0x4dc>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fb fa33 	bl	8000f24 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7fb fa2f 	bl	8000f24 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e036      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x44a>
 8005ae0:	e02e      	b.n	8005b40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e029      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005aee:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_RCC_OscConfig+0x4d8>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d11c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d115      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b16:	4013      	ands	r3, r2
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d10d      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d106      	bne.n	8005b3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40007000 	.word	0x40007000
 8005b50:	40023800 	.word	0x40023800
 8005b54:	42470060 	.word	0x42470060

08005b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0cc      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b68      	ldr	r3, [pc, #416]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d90c      	bls.n	8005b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b65      	ldr	r3, [pc, #404]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b82:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d001      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0b8      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d020      	beq.n	8005be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d005      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bac:	4b59      	ldr	r3, [pc, #356]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4a58      	ldr	r2, [pc, #352]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005bb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bc4:	4b53      	ldr	r3, [pc, #332]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bd0:	4b50      	ldr	r3, [pc, #320]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	494d      	ldr	r1, [pc, #308]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d044      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf6:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d119      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e07f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d003      	beq.n	8005c16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d107      	bne.n	8005c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c16:	4b3f      	ldr	r3, [pc, #252]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e06f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e067      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c36:	4b37      	ldr	r3, [pc, #220]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f023 0203 	bic.w	r2, r3, #3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	4934      	ldr	r1, [pc, #208]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c48:	f7fb f96c 	bl	8000f24 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c4e:	e00a      	b.n	8005c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c50:	f7fb f968 	bl	8000f24 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e04f      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 020c 	and.w	r2, r3, #12
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d1eb      	bne.n	8005c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c78:	4b25      	ldr	r3, [pc, #148]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 030f 	and.w	r3, r3, #15
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d20c      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8e:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <HAL_RCC_ClockConfig+0x1b8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d001      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e032      	b.n	8005d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4916      	ldr	r1, [pc, #88]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	00db      	lsls	r3, r3, #3
 8005cd8:	490e      	ldr	r1, [pc, #56]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cde:	f000 f821 	bl	8005d24 <HAL_RCC_GetSysClockFreq>
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	4a0a      	ldr	r2, [pc, #40]	; (8005d18 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf0:	5cd3      	ldrb	r3, [r2, r3]
 8005cf2:	fa21 f303 	lsr.w	r3, r1, r3
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fb f8cc 	bl	8000e9c <HAL_InitTick>

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023c00 	.word	0x40023c00
 8005d14:	40023800 	.word	0x40023800
 8005d18:	08009708 	.word	0x08009708
 8005d1c:	20000000 	.word	0x20000000
 8005d20:	20000004 	.word	0x20000004

08005d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	2300      	movs	r3, #0
 8005d34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d3a:	4b63      	ldr	r3, [pc, #396]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d007      	beq.n	8005d56 <HAL_RCC_GetSysClockFreq+0x32>
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d008      	beq.n	8005d5c <HAL_RCC_GetSysClockFreq+0x38>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f040 80b4 	bne.w	8005eb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d52:	60bb      	str	r3, [r7, #8]
       break;
 8005d54:	e0b3      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d56:	4b5e      	ldr	r3, [pc, #376]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005d58:	60bb      	str	r3, [r7, #8]
      break;
 8005d5a:	e0b0      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d66:	4b58      	ldr	r3, [pc, #352]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d04a      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d72:	4b55      	ldr	r3, [pc, #340]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	099b      	lsrs	r3, r3, #6
 8005d78:	f04f 0400 	mov.w	r4, #0
 8005d7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	ea03 0501 	and.w	r5, r3, r1
 8005d88:	ea04 0602 	and.w	r6, r4, r2
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	4632      	mov	r2, r6
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	f04f 0400 	mov.w	r4, #0
 8005d98:	0154      	lsls	r4, r2, #5
 8005d9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005d9e:	014b      	lsls	r3, r1, #5
 8005da0:	4619      	mov	r1, r3
 8005da2:	4622      	mov	r2, r4
 8005da4:	1b49      	subs	r1, r1, r5
 8005da6:	eb62 0206 	sbc.w	r2, r2, r6
 8005daa:	f04f 0300 	mov.w	r3, #0
 8005dae:	f04f 0400 	mov.w	r4, #0
 8005db2:	0194      	lsls	r4, r2, #6
 8005db4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005db8:	018b      	lsls	r3, r1, #6
 8005dba:	1a5b      	subs	r3, r3, r1
 8005dbc:	eb64 0402 	sbc.w	r4, r4, r2
 8005dc0:	f04f 0100 	mov.w	r1, #0
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	00e2      	lsls	r2, r4, #3
 8005dca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005dce:	00d9      	lsls	r1, r3, #3
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4614      	mov	r4, r2
 8005dd4:	195b      	adds	r3, r3, r5
 8005dd6:	eb44 0406 	adc.w	r4, r4, r6
 8005dda:	f04f 0100 	mov.w	r1, #0
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	0262      	lsls	r2, r4, #9
 8005de4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005de8:	0259      	lsls	r1, r3, #9
 8005dea:	460b      	mov	r3, r1
 8005dec:	4614      	mov	r4, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	4621      	mov	r1, r4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f04f 0400 	mov.w	r4, #0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4623      	mov	r3, r4
 8005dfc:	f7fa f9e4 	bl	80001c8 <__aeabi_uldivmod>
 8005e00:	4603      	mov	r3, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e049      	b.n	8005e9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e08:	4b2f      	ldr	r3, [pc, #188]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	099b      	lsrs	r3, r3, #6
 8005e0e:	f04f 0400 	mov.w	r4, #0
 8005e12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	ea03 0501 	and.w	r5, r3, r1
 8005e1e:	ea04 0602 	and.w	r6, r4, r2
 8005e22:	4629      	mov	r1, r5
 8005e24:	4632      	mov	r2, r6
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	f04f 0400 	mov.w	r4, #0
 8005e2e:	0154      	lsls	r4, r2, #5
 8005e30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e34:	014b      	lsls	r3, r1, #5
 8005e36:	4619      	mov	r1, r3
 8005e38:	4622      	mov	r2, r4
 8005e3a:	1b49      	subs	r1, r1, r5
 8005e3c:	eb62 0206 	sbc.w	r2, r2, r6
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	f04f 0400 	mov.w	r4, #0
 8005e48:	0194      	lsls	r4, r2, #6
 8005e4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e4e:	018b      	lsls	r3, r1, #6
 8005e50:	1a5b      	subs	r3, r3, r1
 8005e52:	eb64 0402 	sbc.w	r4, r4, r2
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	00e2      	lsls	r2, r4, #3
 8005e60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005e64:	00d9      	lsls	r1, r3, #3
 8005e66:	460b      	mov	r3, r1
 8005e68:	4614      	mov	r4, r2
 8005e6a:	195b      	adds	r3, r3, r5
 8005e6c:	eb44 0406 	adc.w	r4, r4, r6
 8005e70:	f04f 0100 	mov.w	r1, #0
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	02a2      	lsls	r2, r4, #10
 8005e7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005e7e:	0299      	lsls	r1, r3, #10
 8005e80:	460b      	mov	r3, r1
 8005e82:	4614      	mov	r4, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	4621      	mov	r1, r4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4623      	mov	r3, r4
 8005e92:	f7fa f999 	bl	80001c8 <__aeabi_uldivmod>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	60bb      	str	r3, [r7, #8]
      break;
 8005eb6:	e002      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005eba:	60bb      	str	r3, [r7, #8]
      break;
 8005ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	00f42400 	.word	0x00f42400
 8005ed0:	007a1200 	.word	0x007a1200

08005ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ed8:	4b03      	ldr	r3, [pc, #12]	; (8005ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eda:	681b      	ldr	r3, [r3, #0]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000000 	.word	0x20000000

08005eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ef0:	f7ff fff0 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	0a9b      	lsrs	r3, r3, #10
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	4a03      	ldr	r2, [pc, #12]	; (8005f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f02:	5cd3      	ldrb	r3, [r2, r3]
 8005f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	08009718 	.word	0x08009718

08005f14 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d105      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d035      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f3c:	4b62      	ldr	r3, [pc, #392]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f42:	f7fa ffef 	bl	8000f24 <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f4a:	f7fa ffeb 	bl	8000f24 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e0b0      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f5c:	4b5b      	ldr	r3, [pc, #364]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1f0      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	019a      	lsls	r2, r3, #6
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	071b      	lsls	r3, r3, #28
 8005f74:	4955      	ldr	r1, [pc, #340]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f7c:	4b52      	ldr	r3, [pc, #328]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f82:	f7fa ffcf 	bl	8000f24 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f8a:	f7fa ffcb 	bl	8000f24 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e090      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f9c:	4b4b      	ldr	r3, [pc, #300]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8083 	beq.w	80060bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	4b44      	ldr	r3, [pc, #272]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	4a43      	ldr	r2, [pc, #268]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005fc6:	4b41      	ldr	r3, [pc, #260]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005fd2:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3e      	ldr	r2, [pc, #248]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fdc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fde:	f7fa ffa1 	bl	8000f24 <HAL_GetTick>
 8005fe2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005fe6:	f7fa ff9d 	bl	8000f24 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e062      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ff8:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0f0      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006004:	4b31      	ldr	r3, [pc, #196]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006008:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800600c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02f      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	429a      	cmp	r2, r3
 8006020:	d028      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800602c:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006032:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006038:	4a24      	ldr	r2, [pc, #144]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800603e:	4b23      	ldr	r3, [pc, #140]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b01      	cmp	r3, #1
 8006048:	d114      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800604a:	f7fa ff6b 	bl	8000f24 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006050:	e00a      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fa ff67 	bl	8000f24 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e02a      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	4b18      	ldr	r3, [pc, #96]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ee      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006080:	d10d      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006096:	490d      	ldr	r1, [pc, #52]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006098:	4313      	orrs	r3, r2
 800609a:	608b      	str	r3, [r1, #8]
 800609c:	e005      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	4a0a      	ldr	r2, [pc, #40]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80060a8:	6093      	str	r3, [r2, #8]
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b6:	4905      	ldr	r1, [pc, #20]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	42470068 	.word	0x42470068
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40007000 	.word	0x40007000
 80060d4:	42470e40 	.word	0x42470e40

080060d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d13d      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80060f6:	4b22      	ldr	r3, [pc, #136]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060fe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006106:	2b01      	cmp	r3, #1
 8006108:	d12f      	bne.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800610a:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800610c:	617b      	str	r3, [r7, #20]
          break;
 800610e:	e02f      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800611c:	d108      	bne.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	e007      	b.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006130:	4b13      	ldr	r3, [pc, #76]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006140:	4b0f      	ldr	r3, [pc, #60]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006142:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615a:	0f1b      	lsrs	r3, r3, #28
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	fbb2 f3f3 	udiv	r3, r2, r3
 8006166:	617b      	str	r3, [r7, #20]
          break;
 8006168:	e002      	b.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
          break;
 800616e:	bf00      	nop
        }
      }
      break;
 8006170:	bf00      	nop
    }
  }
  return frequency;
 8006172:	697b      	ldr	r3, [r7, #20]
}
 8006174:	4618      	mov	r0, r3
 8006176:	371c      	adds	r7, #28
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	40023800 	.word	0x40023800
 8006184:	00bb8000 	.word	0x00bb8000
 8006188:	007a1200 	.word	0x007a1200
 800618c:	00f42400 	.word	0x00f42400

08006190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e056      	b.n	8006250 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7fa fd45 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	ea42 0103 	orr.w	r1, r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	0c1b      	lsrs	r3, r3, #16
 8006220:	f003 0104 	and.w	r1, r3, #4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006258:	b084      	sub	sp, #16
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	f107 001c 	add.w	r0, r7, #28
 8006266:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	2b01      	cmp	r3, #1
 800626e:	d122      	bne.n	80062b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629a:	2b01      	cmp	r3, #1
 800629c:	d105      	bne.n	80062aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f94a 	bl	8006544 <USB_CoreReset>
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]
 80062b4:	e01a      	b.n	80062ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f93e 	bl	8006544 <USB_CoreReset>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	639a      	str	r2, [r3, #56]	; 0x38
 80062de:	e005      	b.n	80062ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d10b      	bne.n	800630a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f043 0206 	orr.w	r2, r3, #6
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800630a:	7bfb      	ldrb	r3, [r7, #15]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006316:	b004      	add	sp, #16
 8006318:	4770      	bx	lr

0800631a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f043 0201 	orr.w	r2, r3, #1
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 0201 	bic.w	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d106      	bne.n	800638a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60da      	str	r2, [r3, #12]
 8006388:	e00b      	b.n	80063a2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60da      	str	r2, [r3, #12]
 800639c:	e001      	b.n	80063a2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e003      	b.n	80063aa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80063a2:	2032      	movs	r0, #50	; 0x32
 80063a4:	f7fa fdca 	bl	8000f3c <HAL_Delay>

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	019b      	lsls	r3, r3, #6
 80063c6:	f043 0220 	orr.w	r2, r3, #32
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	3301      	adds	r3, #1
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <USB_FlushTxFifo+0x48>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d901      	bls.n	80063e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d0f0      	beq.n	80063ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	00030d40 	.word	0x00030d40

08006400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2210      	movs	r2, #16
 8006410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3301      	adds	r3, #1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4a09      	ldr	r2, [pc, #36]	; (8006440 <USB_FlushRxFifo+0x40>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d901      	bls.n	8006424 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e006      	b.n	8006432 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d0f0      	beq.n	8006412 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	00030d40 	.word	0x00030d40

08006444 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	4611      	mov	r1, r2
 8006450:	461a      	mov	r2, r3
 8006452:	460b      	mov	r3, r1
 8006454:	71fb      	strb	r3, [r7, #7]
 8006456:	4613      	mov	r3, r2
 8006458:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11a      	bne.n	80064a0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	3303      	adds	r3, #3
 800646e:	089b      	lsrs	r3, r3, #2
 8006470:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
 8006476:	e00f      	b.n	8006498 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	031a      	lsls	r2, r3, #12
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	4413      	add	r3, r2
 8006480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006484:	461a      	mov	r2, r3
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	3304      	adds	r3, #4
 8006490:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	3301      	adds	r3, #1
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	429a      	cmp	r2, r3
 800649e:	d3eb      	bcc.n	8006478 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	; 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b089      	sub	sp, #36	; 0x24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	4613      	mov	r3, r2
 80064ba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	3303      	adds	r3, #3
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
 80064d0:	e00b      	b.n	80064ea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	601a      	str	r2, [r3, #0]
    pDest++;
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	3304      	adds	r3, #4
 80064e2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	3301      	adds	r3, #1
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3ef      	bcc.n	80064d2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80064f2:	69fb      	ldr	r3, [r7, #28]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3724      	adds	r7, #36	; 0x24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4013      	ands	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006518:	68fb      	ldr	r3, [r7, #12]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3714      	adds	r7, #20
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f003 0301 	and.w	r3, r3, #1
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a13      	ldr	r2, [pc, #76]	; (80065a8 <USB_CoreReset+0x64>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e01b      	b.n	800659a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	daf2      	bge.n	8006550 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800656a:	2300      	movs	r3, #0
 800656c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f043 0201 	orr.w	r2, r3, #1
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <USB_CoreReset+0x64>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d901      	bls.n	800658c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e006      	b.n	800659a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b01      	cmp	r3, #1
 8006596:	d0f0      	beq.n	800657a <USB_CoreReset+0x36>

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	00030d40 	.word	0x00030d40

080065ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065ac:	b084      	sub	sp, #16
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	f107 001c 	add.w	r0, r7, #28
 80065ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065c8:	461a      	mov	r2, r3
 80065ca:	2300      	movs	r3, #0
 80065cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2b01      	cmp	r3, #1
 8006602:	d10a      	bne.n	800661a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006612:	f043 0304 	orr.w	r3, r3, #4
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e014      	b.n	8006644 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006628:	f023 0304 	bic.w	r3, r3, #4
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e009      	b.n	8006644 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006644:	2110      	movs	r1, #16
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff feb4 	bl	80063b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fed7 	bl	8006400 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	e015      	b.n	8006684 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4413      	add	r3, r2
 8006660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006664:	461a      	mov	r2, r3
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4413      	add	r3, r2
 8006674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3e5      	bcc.n	8006658 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800668c:	2101      	movs	r1, #1
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8ac 	bl	80067ec <USB_DriveVbus>

  HAL_Delay(200U);
 8006694:	20c8      	movs	r0, #200	; 0xc8
 8006696:	f7fa fc51 	bl	8000f3c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f04f 32ff 	mov.w	r2, #4294967295
 80066a6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <USB_HostInit+0x164>)
 80066c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <USB_HostInit+0x168>)
 80066c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80066ca:	e009      	b.n	80066e0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2280      	movs	r2, #128	; 0x80
 80066d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a10      	ldr	r2, [pc, #64]	; (8006718 <USB_HostInit+0x16c>)
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a10      	ldr	r2, [pc, #64]	; (800671c <USB_HostInit+0x170>)
 80066dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d105      	bne.n	80066f2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f043 0210 	orr.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <USB_HostInit+0x174>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800670a:	b004      	add	sp, #16
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	01000200 	.word	0x01000200
 8006714:	00e00300 	.word	0x00e00300
 8006718:	00600080 	.word	0x00600080
 800671c:	004000e0 	.word	0x004000e0
 8006720:	a3200008 	.word	0xa3200008

08006724 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006742:	f023 0303 	bic.w	r3, r3, #3
 8006746:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800675c:	4313      	orrs	r3, r2
 800675e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800676c:	461a      	mov	r2, r3
 800676e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006772:	6053      	str	r3, [r2, #4]
 8006774:	e009      	b.n	800678a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006776:	78fb      	ldrb	r3, [r7, #3]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d106      	bne.n	800678a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006782:	461a      	mov	r2, r3
 8006784:	f241 7370 	movw	r3, #6000	; 0x1770
 8006788:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067c8:	2064      	movs	r0, #100	; 0x64
 80067ca:	f7fa fbb7 	bl	8000f3c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	68fa      	ldr	r2, [r7, #12]
 80067d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067dc:	200a      	movs	r0, #10
 80067de:	f7fa fbad 	bl	8000f3c <HAL_Delay>

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	460b      	mov	r3, r1
 80067f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006810:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <USB_DriveVbus+0x44>
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d106      	bne.n	8006830 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800682a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800682e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683a:	d109      	bne.n	8006850 <USB_DriveVbus+0x64>
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800684a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800684e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	0c5b      	lsrs	r3, r3, #17
 800687c:	f003 0303 	and.w	r3, r3, #3
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	b29b      	uxth	r3, r3
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	4608      	mov	r0, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	461a      	mov	r2, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	70fb      	strb	r3, [r7, #3]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70bb      	strb	r3, [r7, #2]
 80068c6:	4613      	mov	r3, r2
 80068c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068de:	461a      	mov	r2, r3
 80068e0:	f04f 33ff 	mov.w	r3, #4294967295
 80068e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d87e      	bhi.n	80069ec <USB_HC_Init+0x13c>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <USB_HC_Init+0x44>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006905 	.word	0x08006905
 80068f8:	080069af 	.word	0x080069af
 80068fc:	08006905 	.word	0x08006905
 8006900:	08006971 	.word	0x08006971
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	461a      	mov	r2, r3
 8006912:	f240 439d 	movw	r3, #1181	; 0x49d
 8006916:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006918:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800691c:	2b00      	cmp	r3, #0
 800691e:	da10      	bge.n	8006942 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006920:	78fb      	ldrb	r3, [r7, #3]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	78fa      	ldrb	r2, [r7, #3]
 8006930:	0151      	lsls	r1, r2, #5
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	440a      	add	r2, r1
 8006936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800693a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800693e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006940:	e057      	b.n	80069f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694a:	2b00      	cmp	r3, #0
 800694c:	d051      	beq.n	80069f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4413      	add	r3, r2
 8006956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	78fa      	ldrb	r2, [r7, #3]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	440a      	add	r2, r1
 8006964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006968:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800696c:	60d3      	str	r3, [r2, #12]
      break;
 800696e:	e040      	b.n	80069f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4413      	add	r3, r2
 8006978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800697c:	461a      	mov	r2, r3
 800697e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006982:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006984:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	da34      	bge.n	80069f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	78fa      	ldrb	r2, [r7, #3]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80069ac:	e023      	b.n	80069f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069ae:	78fb      	ldrb	r3, [r7, #3]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ba:	461a      	mov	r2, r3
 80069bc:	f240 2325 	movw	r3, #549	; 0x225
 80069c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	da17      	bge.n	80069fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	78fa      	ldrb	r2, [r7, #3]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80069e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069ea:	e006      	b.n	80069fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
      break;
 80069f0:	e004      	b.n	80069fc <USB_HC_Init+0x14c>
      break;
 80069f2:	bf00      	nop
 80069f4:	e002      	b.n	80069fc <USB_HC_Init+0x14c>
      break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <USB_HC_Init+0x14c>
      break;
 80069fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a16:	4313      	orrs	r3, r2
 8006a18:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a26:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da03      	bge.n	8006a36 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	e001      	b.n	8006a3a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006a3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d103      	bne.n	8006a4a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e001      	b.n	8006a4e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a4e:	787b      	ldrb	r3, [r7, #1]
 8006a50:	059b      	lsls	r3, r3, #22
 8006a52:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a56:	78bb      	ldrb	r3, [r7, #2]
 8006a58:	02db      	lsls	r3, r3, #11
 8006a5a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a5e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a64:	049b      	lsls	r3, r3, #18
 8006a66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a6a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a72:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	0159      	lsls	r1, r3, #5
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	440b      	add	r3, r1
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a84:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a8a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d10f      	bne.n	8006ab4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop

08006ac4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	; 0x30
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d028      	beq.n	8006b40 <USB_HC_StartXfer+0x7c>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	791b      	ldrb	r3, [r3, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d124      	bne.n	8006b40 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006af6:	79fb      	ldrb	r3, [r7, #7]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <USB_HC_StartXfer+0x50>
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	795b      	ldrb	r3, [r3, #5]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 fa30 	bl	8006f70 <USB_DoPing>
      return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e114      	b.n	8006d3e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d112      	bne.n	8006b40 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b34:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006b38:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d018      	beq.n	8006b7a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	8912      	ldrh	r2, [r2, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	3b01      	subs	r3, #1
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	8912      	ldrh	r2, [r2, #8]
 8006b58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006b5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006b60:	8b7b      	ldrh	r3, [r7, #26]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d90b      	bls.n	8006b7e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006b66:	8b7b      	ldrh	r3, [r7, #26]
 8006b68:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	8912      	ldrh	r2, [r2, #8]
 8006b70:	fb02 f203 	mul.w	r2, r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	611a      	str	r2, [r3, #16]
 8006b78:	e001      	b.n	8006b7e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	78db      	ldrb	r3, [r3, #3]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d006      	beq.n	8006b94 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006b86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	8912      	ldrh	r2, [r2, #8]
 8006b8c:	fb02 f203 	mul.w	r2, r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b9e:	04d9      	lsls	r1, r3, #19
 8006ba0:	4b69      	ldr	r3, [pc, #420]	; (8006d48 <USB_HC_StartXfer+0x284>)
 8006ba2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ba4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	7a9b      	ldrb	r3, [r3, #10]
 8006baa:	075b      	lsls	r3, r3, #29
 8006bac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bb0:	69f9      	ldr	r1, [r7, #28]
 8006bb2:	0148      	lsls	r0, r1, #5
 8006bb4:	6a39      	ldr	r1, [r7, #32]
 8006bb6:	4401      	add	r1, r0
 8006bb8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bbc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bbe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	68d9      	ldr	r1, [r3, #12]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006bda:	6a3b      	ldr	r3, [r7, #32]
 8006bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	0151      	lsls	r1, r2, #5
 8006c04:	6a3a      	ldr	r2, [r7, #32]
 8006c06:	440a      	add	r2, r1
 8006c08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c10:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	7e7b      	ldrb	r3, [r7, #25]
 8006c22:	075b      	lsls	r3, r3, #29
 8006c24:	69f9      	ldr	r1, [r7, #28]
 8006c26:	0148      	lsls	r0, r1, #5
 8006c28:	6a39      	ldr	r1, [r7, #32]
 8006c2a:	4401      	add	r1, r0
 8006c2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a42      	ldr	r2, [pc, #264]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c44:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c46:	4b41      	ldr	r3, [pc, #260]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c4e:	4a3f      	ldr	r2, [pc, #252]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c50:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	78db      	ldrb	r3, [r3, #3]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d006      	beq.n	8006c68 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c5a:	4b3c      	ldr	r3, [pc, #240]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c62:	4a3a      	ldr	r2, [pc, #232]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	e005      	b.n	8006c74 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c68:	4b38      	ldr	r3, [pc, #224]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c70:	4a36      	ldr	r2, [pc, #216]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c72:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c74:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	4a33      	ldr	r2, [pc, #204]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c7e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4b2f      	ldr	r3, [pc, #188]	; (8006d4c <USB_HC_StartXfer+0x288>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e04f      	b.n	8006d3e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	78db      	ldrb	r3, [r3, #3]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d14a      	bne.n	8006d3c <USB_HC_StartXfer+0x278>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d046      	beq.n	8006d3c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	79db      	ldrb	r3, [r3, #7]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d830      	bhi.n	8006d18 <USB_HC_StartXfer+0x254>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USB_HC_StartXfer+0x1f8>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006ccd 	.word	0x08006ccd
 8006cc8:	08006cf1 	.word	0x08006cf1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	3303      	adds	r3, #3
 8006cd2:	089b      	lsrs	r3, r3, #2
 8006cd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cd6:	8afa      	ldrh	r2, [r7, #22]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d91c      	bls.n	8006d1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f043 0220 	orr.w	r2, r3, #32
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cee:	e015      	b.n	8006d1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	3303      	adds	r3, #3
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cfa:	8afa      	ldrh	r2, [r7, #22]
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d90a      	bls.n	8006d20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d16:	e003      	b.n	8006d20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <USB_HC_StartXfer+0x25e>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <USB_HC_StartXfer+0x25e>
        break;
 8006d20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	68d9      	ldr	r1, [r3, #12]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785a      	ldrb	r2, [r3, #1]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	b298      	uxth	r0, r3
 8006d30:	2300      	movs	r3, #0
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4603      	mov	r3, r0
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fb84 	bl	8006444 <USB_WritePacket>
  }

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	; 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	1ff80000 	.word	0x1ff80000
 8006d4c:	200000b4 	.word	0x200000b4

08006d50 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	b29b      	uxth	r3, r3
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d82:	78fb      	ldrb	r3, [r7, #3]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	0c9b      	lsrs	r3, r3, #18
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <USB_HC_Halt+0x3a>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d16c      	bne.n	8006e86 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d143      	bne.n	8006e60 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e36:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e44:	d81d      	bhi.n	8006e82 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e5c:	d0ec      	beq.n	8006e38 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e5e:	e080      	b.n	8006f62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	0151      	lsls	r1, r2, #5
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	440a      	add	r2, r1
 8006e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e7e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e80:	e06f      	b.n	8006f62 <USB_HC_Halt+0x1f0>
          break;
 8006e82:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e84:	e06d      	b.n	8006f62 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d143      	bne.n	8006f3e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	0151      	lsls	r1, r2, #5
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	440a      	add	r2, r1
 8006eec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ef4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f14:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f22:	d81d      	bhi.n	8006f60 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f3a:	d0ec      	beq.n	8006f16 <USB_HC_Halt+0x1a4>
 8006f3c:	e011      	b.n	8006f62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e000      	b.n	8006f62 <USB_HC_Halt+0x1f0>
          break;
 8006f60:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006f84:	2301      	movs	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	04da      	lsls	r2, r3, #19
 8006f8c:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <USB_DoPing+0x74>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fa0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	015a      	lsls	r2, r3, #5
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	4413      	add	r3, r2
 8006faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fb8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fc0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	1ff80000 	.word	0x1ff80000

08006fe8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7ff f99f 	bl	800633c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006ffe:	2110      	movs	r1, #16
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff f9d7 	bl	80063b4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7ff f9fa 	bl	8006400 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]
 8007010:	e01f      	b.n	8007052 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007028:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007030:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007038:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007046:	461a      	mov	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	3301      	adds	r3, #1
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d9dc      	bls.n	8007012 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	e034      	b.n	80070c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007074:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007084:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	461a      	mov	r2, r3
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	3301      	adds	r3, #1
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a4:	d80c      	bhi.n	80070c0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070bc:	d0ec      	beq.n	8007098 <USB_StopHost+0xb0>
 80070be:	e000      	b.n	80070c2 <USB_StopHost+0xda>
        break;
 80070c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3301      	adds	r3, #1
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b0f      	cmp	r3, #15
 80070cc:	d9c7      	bls.n	800705e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070d4:	461a      	mov	r2, r3
 80070d6:	f04f 33ff 	mov.w	r3, #4294967295
 80070da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f04f 32ff 	mov.w	r2, #4294967295
 80070e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7ff f918 	bl	800631a <USB_EnableGlobalInt>

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b089      	sub	sp, #36	; 0x24
 80070f8:	af04      	add	r7, sp, #16
 80070fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80070fc:	2301      	movs	r3, #1
 80070fe:	2202      	movs	r2, #2
 8007100:	2102      	movs	r1, #2
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fc68 	bl	80079d8 <USBH_FindInterface>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2bff      	cmp	r3, #255	; 0xff
 8007110:	d002      	beq.n	8007118 <USBH_CDC_InterfaceInit+0x24>
 8007112:	7bfb      	ldrb	r3, [r7, #15]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d901      	bls.n	800711c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007118:	2302      	movs	r3, #2
 800711a:	e13d      	b.n	8007398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fc3d 	bl	80079a0 <USBH_SelectInterface>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800712a:	7bbb      	ldrb	r3, [r7, #14]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007130:	2302      	movs	r3, #2
 8007132:	e131      	b.n	8007398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800713a:	2050      	movs	r0, #80	; 0x50
 800713c:	f002 fa04 	bl	8009548 <malloc>
 8007140:	4603      	mov	r3, r0
 8007142:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007154:	2302      	movs	r3, #2
 8007156:	e11f      	b.n	8007398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007158:	2250      	movs	r2, #80	; 0x50
 800715a:	2100      	movs	r1, #0
 800715c:	68b8      	ldr	r0, [r7, #8]
 800715e:	f002 fa03 	bl	8009568 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	211a      	movs	r1, #26
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	b25b      	sxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	da15      	bge.n	80071a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	211a      	movs	r1, #26
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	4413      	add	r3, r2
 8007186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	211a      	movs	r1, #26
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fe36 	bl	8008e1e <USBH_AllocPipe>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	7819      	ldrb	r1, [r3, #0]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	7858      	ldrb	r0, [r3, #1]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	8952      	ldrh	r2, [r2, #10]
 80071d2:	9202      	str	r2, [sp, #8]
 80071d4:	2203      	movs	r2, #3
 80071d6:	9201      	str	r2, [sp, #4]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	4623      	mov	r3, r4
 80071dc:	4602      	mov	r2, r0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f001 fdee 	bl	8008dc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2200      	movs	r2, #0
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f002 f8fb 	bl	80093e8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80071f2:	2300      	movs	r3, #0
 80071f4:	2200      	movs	r2, #0
 80071f6:	210a      	movs	r1, #10
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fbed 	bl	80079d8 <USBH_FindInterface>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007202:	7bfb      	ldrb	r3, [r7, #15]
 8007204:	2bff      	cmp	r3, #255	; 0xff
 8007206:	d002      	beq.n	800720e <USBH_CDC_InterfaceInit+0x11a>
 8007208:	7bfb      	ldrb	r3, [r7, #15]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d901      	bls.n	8007212 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800720e:	2302      	movs	r3, #2
 8007210:	e0c2      	b.n	8007398 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	211a      	movs	r1, #26
 8007218:	fb01 f303 	mul.w	r3, r1, r3
 800721c:	4413      	add	r3, r2
 800721e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	b25b      	sxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	da16      	bge.n	8007258 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	211a      	movs	r1, #26
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	4413      	add	r3, r2
 8007236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	211a      	movs	r1, #26
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	4413      	add	r3, r2
 800724c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007250:	881a      	ldrh	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	835a      	strh	r2, [r3, #26]
 8007256:	e015      	b.n	8007284 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	211a      	movs	r1, #26
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	4413      	add	r3, r2
 8007264:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	211a      	movs	r1, #26
 8007274:	fb01 f303 	mul.w	r3, r1, r3
 8007278:	4413      	add	r3, r2
 800727a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007284:	7bfb      	ldrb	r3, [r7, #15]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	211a      	movs	r1, #26
 800728a:	fb01 f303 	mul.w	r3, r1, r3
 800728e:	4413      	add	r3, r2
 8007290:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	b25b      	sxtb	r3, r3
 8007298:	2b00      	cmp	r3, #0
 800729a:	da16      	bge.n	80072ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	211a      	movs	r1, #26
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	4413      	add	r3, r2
 80072a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	211a      	movs	r1, #26
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072c2:	881a      	ldrh	r2, [r3, #0]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	835a      	strh	r2, [r3, #26]
 80072c8:	e015      	b.n	80072f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072ca:	7bfb      	ldrb	r3, [r7, #15]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	211a      	movs	r1, #26
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80072da:	781a      	ldrb	r2, [r3, #0]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	211a      	movs	r1, #26
 80072e6:	fb01 f303 	mul.w	r3, r1, r3
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80072f0:	881a      	ldrh	r2, [r3, #0]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	7b9b      	ldrb	r3, [r3, #14]
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 fd8e 	bl	8008e1e <USBH_AllocPipe>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	7bdb      	ldrb	r3, [r3, #15]
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f001 fd84 	bl	8008e1e <USBH_AllocPipe>
 8007316:	4603      	mov	r3, r0
 8007318:	461a      	mov	r2, r3
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7b59      	ldrb	r1, [r3, #13]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	7b98      	ldrb	r0, [r3, #14]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007332:	68ba      	ldr	r2, [r7, #8]
 8007334:	8b12      	ldrh	r2, [r2, #24]
 8007336:	9202      	str	r2, [sp, #8]
 8007338:	2202      	movs	r2, #2
 800733a:	9201      	str	r2, [sp, #4]
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	4623      	mov	r3, r4
 8007340:	4602      	mov	r2, r0
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f001 fd3c 	bl	8008dc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	7b19      	ldrb	r1, [r3, #12]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	7bd8      	ldrb	r0, [r3, #15]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	8b52      	ldrh	r2, [r2, #26]
 8007360:	9202      	str	r2, [sp, #8]
 8007362:	2202      	movs	r2, #2
 8007364:	9201      	str	r2, [sp, #4]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4623      	mov	r3, r4
 800736a:	4602      	mov	r2, r0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 fd27 	bl	8008dc0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	7b5b      	ldrb	r3, [r3, #13]
 800737e:	2200      	movs	r2, #0
 8007380:	4619      	mov	r1, r3
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f002 f830 	bl	80093e8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	7b1b      	ldrb	r3, [r3, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 f829 	bl	80093e8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	bd90      	pop	{r4, r7, pc}

080073a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00e      	beq.n	80073d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 fd1c 	bl	8008dfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f001 fd47 	bl	8008e60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	7b1b      	ldrb	r3, [r3, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00e      	beq.n	80073fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	7b1b      	ldrb	r3, [r3, #12]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fd09 	bl	8008dfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	7b1b      	ldrb	r3, [r3, #12]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fd34 	bl	8008e60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	7b5b      	ldrb	r3, [r3, #13]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	7b5b      	ldrb	r3, [r3, #13]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 fcf6 	bl	8008dfe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	7b5b      	ldrb	r3, [r3, #13]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fd21 	bl	8008e60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00b      	beq.n	8007448 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4618      	mov	r0, r3
 800743a:	f002 f88d 	bl	8009558 <free>
    phost->pActiveClass->pData = 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007444:	2200      	movs	r2, #0
 8007446:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007460:	69db      	ldr	r3, [r3, #28]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3340      	adds	r3, #64	; 0x40
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f8b1 	bl	80075d2 <GetLineCoding>
 8007470:	4603      	mov	r3, r0
 8007472:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007474:	7afb      	ldrb	r3, [r7, #11]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007480:	2102      	movs	r1, #2
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007486:	7afb      	ldrb	r3, [r7, #11]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d877      	bhi.n	80075a4 <USBH_CDC_Process+0x114>
 80074b4:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBH_CDC_Process+0x2c>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074d1 	.word	0x080074d1
 80074c0:	080074d7 	.word	0x080074d7
 80074c4:	08007507 	.word	0x08007507
 80074c8:	0800757b 	.word	0x0800757b
 80074cc:	08007589 	.word	0x08007589
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
      break;
 80074d4:	e06d      	b.n	80075b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f897 	bl	8007610 <SetLineCoding>
 80074e2:	4603      	mov	r3, r0
 80074e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80074f4:	e058      	b.n	80075a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80074f6:	7bbb      	ldrb	r3, [r7, #14]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d055      	beq.n	80075a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	2204      	movs	r2, #4
 8007500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007504:	e050      	b.n	80075a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3340      	adds	r3, #64	; 0x40
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f860 	bl	80075d2 <GetLineCoding>
 8007512:	4603      	mov	r3, r0
 8007514:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007516:	7bbb      	ldrb	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d126      	bne.n	800756a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752e:	791b      	ldrb	r3, [r3, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d13b      	bne.n	80075ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007540:	429a      	cmp	r2, r3
 8007542:	d133      	bne.n	80075ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800754e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007550:	429a      	cmp	r2, r3
 8007552:	d12b      	bne.n	80075ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800755c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800755e:	429a      	cmp	r2, r3
 8007560:	d124      	bne.n	80075ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f95a 	bl	800781c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007568:	e020      	b.n	80075ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d01d      	beq.n	80075ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2204      	movs	r2, #4
 8007574:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007578:	e018      	b.n	80075ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f867 	bl	800764e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8dc 	bl	800773e <CDC_ProcessReception>
      break;
 8007586:	e014      	b.n	80075b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007588:	2100      	movs	r1, #0
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 ffe5 	bl	800855a <USBH_ClrFeature>
 8007590:	4603      	mov	r3, r0
 8007592:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10a      	bne.n	80075b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80075a2:	e005      	b.n	80075b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80075a4:	bf00      	nop
 80075a6:	e004      	b.n	80075b2 <USBH_CDC_Process+0x122>
      break;
 80075a8:	bf00      	nop
 80075aa:	e002      	b.n	80075b2 <USBH_CDC_Process+0x122>
      break;
 80075ac:	bf00      	nop
 80075ae:	e000      	b.n	80075b2 <USBH_CDC_Process+0x122>
      break;
 80075b0:	bf00      	nop

  }

  return status;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	22a1      	movs	r2, #161	; 0xa1
 80075e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2221      	movs	r2, #33	; 0x21
 80075e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2207      	movs	r2, #7
 80075f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	2207      	movs	r2, #7
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f98a 	bl	800891a <USBH_CtlReq>
 8007606:	4603      	mov	r3, r0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2221      	movs	r2, #33	; 0x21
 800761e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2207      	movs	r2, #7
 8007636:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2207      	movs	r2, #7
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f96b 	bl	800891a <USBH_CtlReq>
 8007644:	4603      	mov	r3, r0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b086      	sub	sp, #24
 8007652:	af02      	add	r7, sp, #8
 8007654:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007660:	2300      	movs	r3, #0
 8007662:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800766a:	2b01      	cmp	r3, #1
 800766c:	d002      	beq.n	8007674 <CDC_ProcessTransmission+0x26>
 800766e:	2b02      	cmp	r3, #2
 8007670:	d025      	beq.n	80076be <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007672:	e060      	b.n	8007736 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	8b12      	ldrh	r2, [r2, #24]
 800767c:	4293      	cmp	r3, r2
 800767e:	d90c      	bls.n	800769a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	69d9      	ldr	r1, [r3, #28]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8b1a      	ldrh	r2, [r3, #24]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	7b58      	ldrb	r0, [r3, #13]
 800768c:	2301      	movs	r3, #1
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fb51 	bl	8008d3a <USBH_BulkSendData>
 8007698:	e00c      	b.n	80076b4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	7b58      	ldrb	r0, [r3, #13]
 80076a8:	2301      	movs	r3, #1
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	4603      	mov	r3, r0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fb43 	bl	8008d3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80076bc:	e03b      	b.n	8007736 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	7b5b      	ldrb	r3, [r3, #13]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fe65 	bl	8009394 <USBH_LL_GetURBState>
 80076ca:	4603      	mov	r3, r0
 80076cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80076ce:	7afb      	ldrb	r3, [r7, #11]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d128      	bne.n	8007726 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	8b12      	ldrh	r2, [r2, #24]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d90e      	bls.n	80076fe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	8b12      	ldrh	r2, [r2, #24]
 80076e8:	1a9a      	subs	r2, r3, r2
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	8b12      	ldrh	r2, [r2, #24]
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	61da      	str	r2, [r3, #28]
 80076fc:	e002      	b.n	8007704 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007714:	e00e      	b.n	8007734 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f868 	bl	80077f4 <USBH_CDC_TransmitCallback>
      break;
 8007724:	e006      	b.n	8007734 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d103      	bne.n	8007734 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007734:	bf00      	nop
  }
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b086      	sub	sp, #24
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007750:	2300      	movs	r3, #0
 8007752:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800775a:	2b03      	cmp	r3, #3
 800775c:	d002      	beq.n	8007764 <CDC_ProcessReception+0x26>
 800775e:	2b04      	cmp	r3, #4
 8007760:	d00e      	beq.n	8007780 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007762:	e043      	b.n	80077ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6a19      	ldr	r1, [r3, #32]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	8b5a      	ldrh	r2, [r3, #26]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	7b1b      	ldrb	r3, [r3, #12]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 fb07 	bl	8008d84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2204      	movs	r2, #4
 800777a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800777e:	e035      	b.n	80077ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	7b1b      	ldrb	r3, [r3, #12]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f001 fe04 	bl	8009394 <USBH_LL_GetURBState>
 800778c:	4603      	mov	r3, r0
 800778e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007790:	7cfb      	ldrb	r3, [r7, #19]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d129      	bne.n	80077ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	7b1b      	ldrb	r3, [r3, #12]
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f001 fd67 	bl	8009270 <USBH_LL_GetLastXferSize>
 80077a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d016      	beq.n	80077dc <CDC_ProcessReception+0x9e>
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	8b5b      	ldrh	r3, [r3, #26]
 80077b2:	461a      	mov	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d910      	bls.n	80077dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	1ad2      	subs	r2, r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	6a1a      	ldr	r2, [r3, #32]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	441a      	add	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80077da:	e006      	b.n	80077ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f80f 	bl	8007808 <USBH_CDC_ReceiveCallback>
      break;
 80077ea:	bf00      	nop
  }
}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	4613      	mov	r3, r2
 800783c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007844:	2302      	movs	r3, #2
 8007846:	e029      	b.n	800789c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	79fa      	ldrb	r2, [r7, #7]
 800784c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f81f 	bl	80078a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f001 fc39 	bl	800910c <USBH_LL_Init>

  return USBH_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	e009      	b.n	80078ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	33e0      	adds	r3, #224	; 0xe0
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	2200      	movs	r2, #0
 80078c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	3301      	adds	r3, #1
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b0e      	cmp	r3, #14
 80078ce:	d9f2      	bls.n	80078b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e009      	b.n	80078ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	3301      	adds	r3, #1
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f0:	d3f1      	bcc.n	80078d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2240      	movs	r2, #64	; 0x40
 8007916:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d016      	beq.n	800798e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10e      	bne.n	8007988 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007970:	1c59      	adds	r1, r3, #1
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	33de      	adds	r3, #222	; 0xde
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
 8007986:	e004      	b.n	8007992 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007988:	2302      	movs	r3, #2
 800798a:	73fb      	strb	r3, [r7, #15]
 800798c:	e001      	b.n	8007992 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800798e:	2302      	movs	r3, #2
 8007990:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	460b      	mov	r3, r1
 80079aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80079b6:	78fa      	ldrb	r2, [r7, #3]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d204      	bcs.n	80079c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	78fa      	ldrb	r2, [r7, #3]
 80079c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80079c4:	e001      	b.n	80079ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80079c6:	2302      	movs	r3, #2
 80079c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	461a      	mov	r2, r3
 80079e6:	4603      	mov	r3, r0
 80079e8:	70fb      	strb	r3, [r7, #3]
 80079ea:	460b      	mov	r3, r1
 80079ec:	70bb      	strb	r3, [r7, #2]
 80079ee:	4613      	mov	r3, r2
 80079f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007a00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a02:	e025      	b.n	8007a50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	221a      	movs	r2, #26
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	3302      	adds	r3, #2
 8007a14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	795b      	ldrb	r3, [r3, #5]
 8007a1a:	78fa      	ldrb	r2, [r7, #3]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d002      	beq.n	8007a26 <USBH_FindInterface+0x4e>
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	2bff      	cmp	r3, #255	; 0xff
 8007a24:	d111      	bne.n	8007a4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007a2a:	78ba      	ldrb	r2, [r7, #2]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d002      	beq.n	8007a36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a30:	78bb      	ldrb	r3, [r7, #2]
 8007a32:	2bff      	cmp	r3, #255	; 0xff
 8007a34:	d109      	bne.n	8007a4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007a3a:	787a      	ldrb	r2, [r7, #1]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d002      	beq.n	8007a46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007a40:	787b      	ldrb	r3, [r7, #1]
 8007a42:	2bff      	cmp	r3, #255	; 0xff
 8007a44:	d101      	bne.n	8007a4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	e006      	b.n	8007a58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d9d6      	bls.n	8007a04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007a56:	23ff      	movs	r3, #255	; 0xff
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	371c      	adds	r7, #28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fb89 	bl	8009184 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007a72:	2101      	movs	r1, #1
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fca0 	bl	80093ba <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af04      	add	r7, sp, #16
 8007a8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d102      	bne.n	8007aa6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2203      	movs	r2, #3
 8007aa4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b0b      	cmp	r3, #11
 8007aae:	f200 81b3 	bhi.w	8007e18 <USBH_Process+0x394>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <USBH_Process+0x34>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007ae9 	.word	0x08007ae9
 8007abc:	08007b1b 	.word	0x08007b1b
 8007ac0:	08007b83 	.word	0x08007b83
 8007ac4:	08007db3 	.word	0x08007db3
 8007ac8:	08007e19 	.word	0x08007e19
 8007acc:	08007c27 	.word	0x08007c27
 8007ad0:	08007d59 	.word	0x08007d59
 8007ad4:	08007c5d 	.word	0x08007c5d
 8007ad8:	08007c7d 	.word	0x08007c7d
 8007adc:	08007c9d 	.word	0x08007c9d
 8007ae0:	08007ccb 	.word	0x08007ccb
 8007ae4:	08007d9b 	.word	0x08007d9b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8193 	beq.w	8007e1c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007afc:	20c8      	movs	r0, #200	; 0xc8
 8007afe:	f001 fca6 	bl	800944e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fb99 	bl	800923a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b18:	e180      	b.n	8007e1c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d107      	bne.n	8007b34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b32:	e182      	b.n	8007e3a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b3e:	d914      	bls.n	8007b6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b46:	3301      	adds	r3, #1
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d903      	bls.n	8007b62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	220d      	movs	r2, #13
 8007b5e:	701a      	strb	r2, [r3, #0]
      break;
 8007b60:	e16b      	b.n	8007e3a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
      break;
 8007b68:	e167      	b.n	8007e3a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007b70:	f103 020a 	add.w	r2, r3, #10
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007b7a:	200a      	movs	r0, #10
 8007b7c:	f001 fc67 	bl	800944e <USBH_Delay>
      break;
 8007b80:	e15b      	b.n	8007e3a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b92:	2104      	movs	r1, #4
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007b98:	2064      	movs	r0, #100	; 0x64
 8007b9a:	f001 fc58 	bl	800944e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 fb26 	bl	80091f0 <USBH_LL_GetSpeed>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2205      	movs	r2, #5
 8007bb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f931 	bl	8008e1e <USBH_AllocPipe>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f929 	bl	8008e1e <USBH_AllocPipe>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	7919      	ldrb	r1, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007be8:	b292      	uxth	r2, r2
 8007bea:	9202      	str	r2, [sp, #8]
 8007bec:	2200      	movs	r2, #0
 8007bee:	9201      	str	r2, [sp, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2280      	movs	r2, #128	; 0x80
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f8e2 	bl	8008dc0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	7959      	ldrb	r1, [r3, #5]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c10:	b292      	uxth	r2, r2
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	9201      	str	r2, [sp, #4]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f8ce 	bl	8008dc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c24:	e109      	b.n	8007e3a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f90c 	bl	8007e44 <USBH_HandleEnum>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f040 80f3 	bne.w	8007e20 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d103      	bne.n	8007c54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2208      	movs	r2, #8
 8007c50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c52:	e0e5      	b.n	8007e20 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2207      	movs	r2, #7
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e0e1      	b.n	8007e20 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80de 	beq.w	8007e24 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c6e:	2101      	movs	r1, #1
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2208      	movs	r2, #8
 8007c78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c7a:	e0d3      	b.n	8007e24 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc20 	bl	80084cc <USBH_SetCfg>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f040 80ca 	bne.w	8007e28 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2209      	movs	r2, #9
 8007c98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c9a:	e0c5      	b.n	8007e28 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007caa:	2101      	movs	r1, #1
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fc30 	bl	8008512 <USBH_SetFeature>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 80b9 	bne.w	8007e2c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	220a      	movs	r2, #10
 8007cbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cc0:	e0b4      	b.n	8007e2c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	701a      	strb	r2, [r3, #0]
      break;
 8007cc8:	e0b0      	b.n	8007e2c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80ad 	beq.w	8007e30 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	e016      	b.n	8007d12 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ce4:	7bfa      	ldrb	r2, [r7, #15]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	32de      	adds	r2, #222	; 0xde
 8007cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cee:	791a      	ldrb	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d108      	bne.n	8007d0c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007cfa:	7bfa      	ldrb	r2, [r7, #15]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	32de      	adds	r2, #222	; 0xde
 8007d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007d0a:	e005      	b.n	8007d18 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	73fb      	strb	r3, [r7, #15]
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0e5      	beq.n	8007ce4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2206      	movs	r2, #6
 8007d38:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d40:	2103      	movs	r1, #3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d46:	e073      	b.n	8007e30 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	220d      	movs	r2, #13
 8007d4c:	701a      	strb	r2, [r3, #0]
      break;
 8007d4e:	e06f      	b.n	8007e30 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	220d      	movs	r2, #13
 8007d54:	701a      	strb	r2, [r3, #0]
      break;
 8007d56:	e06b      	b.n	8007e30 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d017      	beq.n	8007d92 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	4798      	blx	r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	220b      	movs	r2, #11
 8007d7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007d80:	e058      	b.n	8007e34 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d154      	bne.n	8007e34 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	220d      	movs	r2, #13
 8007d8e:	701a      	strb	r2, [r3, #0]
      break;
 8007d90:	e050      	b.n	8007e34 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	220d      	movs	r2, #13
 8007d96:	701a      	strb	r2, [r3, #0]
      break;
 8007d98:	e04c      	b.n	8007e34 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d049      	beq.n	8007e38 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007daa:	695b      	ldr	r3, [r3, #20]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	4798      	blx	r3
      }
      break;
 8007db0:	e042      	b.n	8007e38 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7ff fd72 	bl	80078a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d009      	beq.n	8007dde <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dee:	2105      	movs	r1, #5
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f7ff fe2b 	bl	8007a64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e0e:	e014      	b.n	8007e3a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f9b7 	bl	8009184 <USBH_LL_Start>
      break;
 8007e16:	e010      	b.n	8007e3a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007e18:	bf00      	nop
 8007e1a:	e00e      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e1c:	bf00      	nop
 8007e1e:	e00c      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e20:	bf00      	nop
 8007e22:	e00a      	b.n	8007e3a <USBH_Process+0x3b6>
    break;
 8007e24:	bf00      	nop
 8007e26:	e008      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e28:	bf00      	nop
 8007e2a:	e006      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e2c:	bf00      	nop
 8007e2e:	e004      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e30:	bf00      	nop
 8007e32:	e002      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e34:	bf00      	nop
 8007e36:	e000      	b.n	8007e3a <USBH_Process+0x3b6>
      break;
 8007e38:	bf00      	nop
  }
  return USBH_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af04      	add	r7, sp, #16
 8007e4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007e50:	2301      	movs	r3, #1
 8007e52:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b07      	cmp	r3, #7
 8007e5a:	f200 81c1 	bhi.w	80081e0 <USBH_HandleEnum+0x39c>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBH_HandleEnum+0x20>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e85 	.word	0x08007e85
 8007e68:	08007f43 	.word	0x08007f43
 8007e6c:	08007fad 	.word	0x08007fad
 8007e70:	0800803b 	.word	0x0800803b
 8007e74:	080080a5 	.word	0x080080a5
 8007e78:	08008115 	.word	0x08008115
 8007e7c:	0800815b 	.word	0x0800815b
 8007e80:	080081a1 	.word	0x080081a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007e84:	2108      	movs	r1, #8
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa50 	bl	800832c <USBH_Get_DevDesc>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d130      	bne.n	8007ef8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7919      	ldrb	r1, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007eba:	b292      	uxth	r2, r2
 8007ebc:	9202      	str	r2, [sp, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	9201      	str	r2, [sp, #4]
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2280      	movs	r2, #128	; 0x80
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 ff79 	bl	8008dc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7959      	ldrb	r1, [r3, #5]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ee2:	b292      	uxth	r2, r2
 8007ee4:	9202      	str	r2, [sp, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	9201      	str	r2, [sp, #4]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	2200      	movs	r2, #0
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 ff65 	bl	8008dc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ef6:	e175      	b.n	80081e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f040 8172 	bne.w	80081e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f06:	3301      	adds	r3, #1
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d903      	bls.n	8007f22 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	220d      	movs	r2, #13
 8007f1e:	701a      	strb	r2, [r3, #0]
      break;
 8007f20:	e160      	b.n	80081e4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 ff99 	bl	8008e60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	791b      	ldrb	r3, [r3, #4]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 ff93 	bl	8008e60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	701a      	strb	r2, [r3, #0]
      break;
 8007f40:	e150      	b.n	80081e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007f42:	2112      	movs	r1, #18
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 f9f1 	bl	800832c <USBH_Get_DevDesc>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f5a:	e145      	b.n	80081e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b03      	cmp	r3, #3
 8007f60:	f040 8142 	bne.w	80081e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d903      	bls.n	8007f86 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	220d      	movs	r2, #13
 8007f82:	701a      	strb	r2, [r3, #0]
      break;
 8007f84:	e130      	b.n	80081e8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	795b      	ldrb	r3, [r3, #5]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 ff67 	bl	8008e60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	791b      	ldrb	r3, [r3, #4]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff61 	bl	8008e60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]
      break;
 8007faa:	e11d      	b.n	80081e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007fac:	2101      	movs	r1, #1
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa68 	bl	8008484 <USBH_SetAddress>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d132      	bne.n	8008024 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007fbe:	2002      	movs	r0, #2
 8007fc0:	f001 fa45 	bl	800944e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2203      	movs	r2, #3
 8007fd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7919      	ldrb	r1, [r3, #4]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007fe6:	b292      	uxth	r2, r2
 8007fe8:	9202      	str	r2, [sp, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	9201      	str	r2, [sp, #4]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2280      	movs	r2, #128	; 0x80
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fee3 	bl	8008dc0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7959      	ldrb	r1, [r3, #5]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800800e:	b292      	uxth	r2, r2
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	2200      	movs	r2, #0
 8008014:	9201      	str	r2, [sp, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	4603      	mov	r3, r0
 800801a:	2200      	movs	r2, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fecf 	bl	8008dc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008022:	e0e3      	b.n	80081ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b03      	cmp	r3, #3
 8008028:	f040 80e0 	bne.w	80081ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	220d      	movs	r2, #13
 8008030:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	705a      	strb	r2, [r3, #1]
      break;
 8008038:	e0d8      	b.n	80081ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800803a:	2109      	movs	r1, #9
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f99d 	bl	800837c <USBH_Get_CfgDesc>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d103      	bne.n	8008054 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2204      	movs	r2, #4
 8008050:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008052:	e0cd      	b.n	80081f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008054:	7bbb      	ldrb	r3, [r7, #14]
 8008056:	2b03      	cmp	r3, #3
 8008058:	f040 80ca 	bne.w	80081f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008062:	3301      	adds	r3, #1
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008072:	2b03      	cmp	r3, #3
 8008074:	d903      	bls.n	800807e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220d      	movs	r2, #13
 800807a:	701a      	strb	r2, [r3, #0]
      break;
 800807c:	e0b8      	b.n	80081f0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	795b      	ldrb	r3, [r3, #5]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 feeb 	bl	8008e60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	791b      	ldrb	r3, [r3, #4]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fee5 	bl	8008e60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	701a      	strb	r2, [r3, #0]
      break;
 80080a2:	e0a5      	b.n	80081f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f965 	bl	800837c <USBH_Get_CfgDesc>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080b6:	7bbb      	ldrb	r3, [r7, #14]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2205      	movs	r2, #5
 80080c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080c2:	e097      	b.n	80081f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	f040 8094 	bne.w	80081f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080d2:	3301      	adds	r3, #1
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d903      	bls.n	80080ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	220d      	movs	r2, #13
 80080ea:	701a      	strb	r2, [r3, #0]
      break;
 80080ec:	e082      	b.n	80081f4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	795b      	ldrb	r3, [r3, #5]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 feb3 	bl	8008e60 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	791b      	ldrb	r3, [r3, #4]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 fead 	bl	8008e60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	701a      	strb	r2, [r3, #0]
      break;
 8008112:	e06f      	b.n	80081f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800811a:	2b00      	cmp	r3, #0
 800811c:	d019      	beq.n	8008152 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800812a:	23ff      	movs	r3, #255	; 0xff
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f949 	bl	80083c4 <USBH_Get_StringDesc>
 8008132:	4603      	mov	r3, r0
 8008134:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2206      	movs	r2, #6
 8008140:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008142:	e059      	b.n	80081f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b03      	cmp	r3, #3
 8008148:	d156      	bne.n	80081f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2206      	movs	r2, #6
 800814e:	705a      	strb	r2, [r3, #1]
      break;
 8008150:	e052      	b.n	80081f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2206      	movs	r2, #6
 8008156:	705a      	strb	r2, [r3, #1]
      break;
 8008158:	e04e      	b.n	80081f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008160:	2b00      	cmp	r3, #0
 8008162:	d019      	beq.n	8008198 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008170:	23ff      	movs	r3, #255	; 0xff
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f926 	bl	80083c4 <USBH_Get_StringDesc>
 8008178:	4603      	mov	r3, r0
 800817a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d103      	bne.n	800818a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2207      	movs	r2, #7
 8008186:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008188:	e038      	b.n	80081fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d135      	bne.n	80081fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2207      	movs	r2, #7
 8008194:	705a      	strb	r2, [r3, #1]
      break;
 8008196:	e031      	b.n	80081fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2207      	movs	r2, #7
 800819c:	705a      	strb	r2, [r3, #1]
      break;
 800819e:	e02d      	b.n	80081fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80081b6:	23ff      	movs	r3, #255	; 0xff
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f903 	bl	80083c4 <USBH_Get_StringDesc>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80081cc:	e018      	b.n	8008200 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b03      	cmp	r3, #3
 80081d2:	d115      	bne.n	8008200 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
      break;
 80081d8:	e012      	b.n	8008200 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]
      break;
 80081de:	e00f      	b.n	8008200 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80081e0:	bf00      	nop
 80081e2:	e00e      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081e4:	bf00      	nop
 80081e6:	e00c      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081e8:	bf00      	nop
 80081ea:	e00a      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081ec:	bf00      	nop
 80081ee:	e008      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081f0:	bf00      	nop
 80081f2:	e006      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081f4:	bf00      	nop
 80081f6:	e004      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <USBH_HandleEnum+0x3be>
      break;
 8008200:	bf00      	nop
  }
  return Status;
 8008202:	7bfb      	ldrb	r3, [r7, #15]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f804 	bl	800824e <USBH_HandleSof>
}
 8008246:	bf00      	nop
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b0b      	cmp	r3, #11
 800825e:	d10a      	bne.n	8008276 <USBH_HandleSof+0x28>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008266:	2b00      	cmp	r3, #0
 8008268:	d005      	beq.n	8008276 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
  }
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800828e:	bf00      	nop
}
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800829a:	b480      	push	{r7}
 800829c:	b083      	sub	sp, #12
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80082aa:	bf00      	nop
}
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 ff58 	bl	80091ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	791b      	ldrb	r3, [r3, #4]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fda5 	bl	8008e60 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	795b      	ldrb	r3, [r3, #5]
 800831a:	4619      	mov	r1, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fd9f 	bl	8008e60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af02      	add	r7, sp, #8
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	b29b      	uxth	r3, r3
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	4613      	mov	r3, r2
 8008346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800834a:	2100      	movs	r1, #0
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f864 	bl	800841a <USBH_GetDescriptor>
 8008352:	4603      	mov	r3, r0
 8008354:	73fb      	strb	r3, [r7, #15]
 8008356:	7bfb      	ldrb	r3, [r7, #15]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008368:	78fa      	ldrb	r2, [r7, #3]
 800836a:	b292      	uxth	r2, r2
 800836c:	4619      	mov	r1, r3
 800836e:	f000 f918 	bl	80085a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008372:	7bfb      	ldrb	r3, [r7, #15]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af02      	add	r7, sp, #8
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	331c      	adds	r3, #28
 800838c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800838e:	887b      	ldrh	r3, [r7, #2]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f83d 	bl	800841a <USBH_GetDescriptor>
 80083a0:	4603      	mov	r3, r0
 80083a2:	72fb      	strb	r3, [r7, #11]
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d107      	bne.n	80083ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80083b0:	887a      	ldrh	r2, [r7, #2]
 80083b2:	68f9      	ldr	r1, [r7, #12]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f964 	bl	8008682 <USBH_ParseCfgDesc>
  }

  return status;
 80083ba:	7afb      	ldrb	r3, [r7, #11]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	607a      	str	r2, [r7, #4]
 80083ce:	461a      	mov	r2, r3
 80083d0:	460b      	mov	r3, r1
 80083d2:	72fb      	strb	r3, [r7, #11]
 80083d4:	4613      	mov	r3, r2
 80083d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80083e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	460b      	mov	r3, r1
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 f812 	bl	800841a <USBH_GetDescriptor>
 80083f6:	4603      	mov	r3, r0
 80083f8:	75fb      	strb	r3, [r7, #23]
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d107      	bne.n	8008410 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008406:	893a      	ldrh	r2, [r7, #8]
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 fa37 	bl	800887e <USBH_ParseStringDesc>
  }

  return status;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	60f8      	str	r0, [r7, #12]
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	72fb      	strb	r3, [r7, #11]
 8008428:	4613      	mov	r3, r2
 800842a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	789b      	ldrb	r3, [r3, #2]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d11c      	bne.n	800846e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008434:	7afb      	ldrb	r3, [r7, #11]
 8008436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800843a:	b2da      	uxtb	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2206      	movs	r2, #6
 8008444:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	893a      	ldrh	r2, [r7, #8]
 800844a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800844c:	893b      	ldrh	r3, [r7, #8]
 800844e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008456:	d104      	bne.n	8008462 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f240 4209 	movw	r2, #1033	; 0x409
 800845e:	829a      	strh	r2, [r3, #20]
 8008460:	e002      	b.n	8008468 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8b3a      	ldrh	r2, [r7, #24]
 800846c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800846e:	8b3b      	ldrh	r3, [r7, #24]
 8008470:	461a      	mov	r2, r3
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fa50 	bl	800891a <USBH_CtlReq>
 800847a:	4603      	mov	r3, r0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	789b      	ldrb	r3, [r3, #2]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d10f      	bne.n	80084b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2205      	movs	r2, #5
 80084a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80084a4:	78fb      	ldrb	r3, [r7, #3]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	2100      	movs	r1, #0
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa2c 	bl	800891a <USBH_CtlReq>
 80084c2:	4603      	mov	r3, r0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	789b      	ldrb	r3, [r3, #2]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d10e      	bne.n	80084fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2209      	movs	r2, #9
 80084ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	887a      	ldrh	r2, [r7, #2]
 80084f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa09 	bl	800891a <USBH_CtlReq>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	789b      	ldrb	r3, [r3, #2]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d10f      	bne.n	8008546 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2203      	movs	r2, #3
 8008530:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	b29a      	uxth	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008546:	2200      	movs	r2, #0
 8008548:	2100      	movs	r1, #0
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f9e5 	bl	800891a <USBH_CtlReq>
 8008550:	4603      	mov	r3, r0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	789b      	ldrb	r3, [r3, #2]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d10f      	bne.n	800858e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2202      	movs	r2, #2
 8008572:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	b29a      	uxth	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800858e:	2200      	movs	r2, #0
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f9c1 	bl	800891a <USBH_CtlReq>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b085      	sub	sp, #20
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	4613      	mov	r3, r2
 80085ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	781a      	ldrb	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	785a      	ldrb	r2, [r3, #1]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	3302      	adds	r3, #2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	3303      	adds	r3, #3
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	b29a      	uxth	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	791a      	ldrb	r2, [r3, #4]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	795a      	ldrb	r2, [r3, #5]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	799a      	ldrb	r2, [r3, #6]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	79da      	ldrb	r2, [r3, #7]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80085fc:	88fb      	ldrh	r3, [r7, #6]
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d939      	bls.n	8008676 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	3308      	adds	r3, #8
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b29a      	uxth	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3309      	adds	r3, #9
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	b29b      	uxth	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b29a      	uxth	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	330a      	adds	r3, #10
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	b29a      	uxth	r2, r3
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	330b      	adds	r3, #11
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	b29b      	uxth	r3, r3
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	b29b      	uxth	r3, r3
 8008632:	4313      	orrs	r3, r2
 8008634:	b29a      	uxth	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	330c      	adds	r3, #12
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	b29a      	uxth	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	330d      	adds	r3, #13
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	b29b      	uxth	r3, r3
 800864e:	4313      	orrs	r3, r2
 8008650:	b29a      	uxth	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	7b9a      	ldrb	r2, [r3, #14]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	7bda      	ldrb	r2, [r3, #15]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	7c1a      	ldrb	r2, [r3, #16]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	7c5a      	ldrb	r2, [r3, #17]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	745a      	strb	r2, [r3, #17]
  }
}
 8008676:	bf00      	nop
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b08a      	sub	sp, #40	; 0x28
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	4613      	mov	r3, r2
 800868e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	785a      	ldrb	r2, [r3, #1]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3302      	adds	r3, #2
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	3303      	adds	r3, #3
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	021b      	lsls	r3, r3, #8
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	4313      	orrs	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	791a      	ldrb	r2, [r3, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	795a      	ldrb	r2, [r3, #5]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	799a      	ldrb	r2, [r3, #6]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	79da      	ldrb	r2, [r3, #7]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	7a1a      	ldrb	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	2b09      	cmp	r3, #9
 80086fc:	d95f      	bls.n	80087be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80086fe:	2309      	movs	r3, #9
 8008700:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008706:	e051      	b.n	80087ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008708:	f107 0316 	add.w	r3, r7, #22
 800870c:	4619      	mov	r1, r3
 800870e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008710:	f000 f8e8 	bl	80088e4 <USBH_GetNextDesc>
 8008714:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b04      	cmp	r3, #4
 800871c:	d146      	bne.n	80087ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800871e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008722:	221a      	movs	r2, #26
 8008724:	fb02 f303 	mul.w	r3, r2, r3
 8008728:	3308      	adds	r3, #8
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	3302      	adds	r3, #2
 8008730:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008734:	69f8      	ldr	r0, [r7, #28]
 8008736:	f000 f846 	bl	80087c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008740:	2300      	movs	r3, #0
 8008742:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008744:	e022      	b.n	800878c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008746:	f107 0316 	add.w	r3, r7, #22
 800874a:	4619      	mov	r1, r3
 800874c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800874e:	f000 f8c9 	bl	80088e4 <USBH_GetNextDesc>
 8008752:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d117      	bne.n	800878c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800875c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008760:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008764:	3201      	adds	r2, #1
 8008766:	00d2      	lsls	r2, r2, #3
 8008768:	211a      	movs	r1, #26
 800876a:	fb01 f303 	mul.w	r3, r1, r3
 800876e:	4413      	add	r3, r2
 8008770:	3308      	adds	r3, #8
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	3304      	adds	r3, #4
 8008778:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800877a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800877c:	69b8      	ldr	r0, [r7, #24]
 800877e:	f000 f851 	bl	8008824 <USBH_ParseEPDesc>
            ep_ix++;
 8008782:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008786:	3301      	adds	r3, #1
 8008788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008794:	429a      	cmp	r2, r3
 8008796:	d204      	bcs.n	80087a2 <USBH_ParseCfgDesc+0x120>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	885a      	ldrh	r2, [r3, #2]
 800879c:	8afb      	ldrh	r3, [r7, #22]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d8d1      	bhi.n	8008746 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80087a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087a6:	3301      	adds	r3, #1
 80087a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d804      	bhi.n	80087be <USBH_ParseCfgDesc+0x13c>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	885a      	ldrh	r2, [r3, #2]
 80087b8:	8afb      	ldrh	r3, [r7, #22]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d8a4      	bhi.n	8008708 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80087be:	bf00      	nop
 80087c0:	3728      	adds	r7, #40	; 0x28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781a      	ldrb	r2, [r3, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	785a      	ldrb	r2, [r3, #1]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	789a      	ldrb	r2, [r3, #2]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	78da      	ldrb	r2, [r3, #3]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	791a      	ldrb	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	795a      	ldrb	r2, [r3, #5]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	799a      	ldrb	r2, [r3, #6]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	79da      	ldrb	r2, [r3, #7]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	7a1a      	ldrb	r2, [r3, #8]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	721a      	strb	r2, [r3, #8]
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	785a      	ldrb	r2, [r3, #1]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	789a      	ldrb	r2, [r3, #2]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	78da      	ldrb	r2, [r3, #3]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	3304      	adds	r3, #4
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	b29a      	uxth	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	3305      	adds	r3, #5
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	b29b      	uxth	r3, r3
 8008862:	4313      	orrs	r3, r2
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	799a      	ldrb	r2, [r3, #6]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	719a      	strb	r2, [r3, #6]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800887e:	b480      	push	{r7}
 8008880:	b087      	sub	sp, #28
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	4613      	mov	r3, r2
 800888a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3301      	adds	r3, #1
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d120      	bne.n	80088d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	1e9a      	subs	r2, r3, #2
 800889c:	88fb      	ldrh	r3, [r7, #6]
 800889e:	4293      	cmp	r3, r2
 80088a0:	bf28      	it	cs
 80088a2:	4613      	movcs	r3, r2
 80088a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	3302      	adds	r3, #2
 80088aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80088ac:	2300      	movs	r3, #0
 80088ae:	82fb      	strh	r3, [r7, #22]
 80088b0:	e00b      	b.n	80088ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80088b2:	8afb      	ldrh	r3, [r7, #22]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	781a      	ldrb	r2, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	3301      	adds	r3, #1
 80088c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80088c4:	8afb      	ldrh	r3, [r7, #22]
 80088c6:	3302      	adds	r3, #2
 80088c8:	82fb      	strh	r3, [r7, #22]
 80088ca:	8afa      	ldrh	r2, [r7, #22]
 80088cc:	8abb      	ldrh	r3, [r7, #20]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d3ef      	bcc.n	80088b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	2200      	movs	r2, #0
 80088d6:	701a      	strb	r2, [r3, #0]
  }
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	881a      	ldrh	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	4413      	add	r3, r2
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4413      	add	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800890c:	68fb      	ldr	r3, [r7, #12]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af00      	add	r7, sp, #0
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	4613      	mov	r3, r2
 8008926:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008928:	2301      	movs	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	789b      	ldrb	r3, [r3, #2]
 8008930:	2b01      	cmp	r3, #1
 8008932:	d002      	beq.n	800893a <USBH_CtlReq+0x20>
 8008934:	2b02      	cmp	r3, #2
 8008936:	d00f      	beq.n	8008958 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008938:	e027      	b.n	800898a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2202      	movs	r2, #2
 8008950:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008952:	2301      	movs	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
      break;
 8008956:	e018      	b.n	800898a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f81b 	bl	8008994 <USBH_HandleControl>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008962:	7dfb      	ldrb	r3, [r7, #23]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <USBH_CtlReq+0x54>
 8008968:	7dfb      	ldrb	r3, [r7, #23]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d106      	bne.n	800897c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	761a      	strb	r2, [r3, #24]
      break;
 800897a:	e005      	b.n	8008988 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d102      	bne.n	8008988 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	709a      	strb	r2, [r3, #2]
      break;
 8008988:	bf00      	nop
  }
  return status;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3718      	adds	r7, #24
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af02      	add	r7, sp, #8
 800899a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800899c:	2301      	movs	r3, #1
 800899e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	7e1b      	ldrb	r3, [r3, #24]
 80089a8:	3b01      	subs	r3, #1
 80089aa:	2b0a      	cmp	r3, #10
 80089ac:	f200 8158 	bhi.w	8008c60 <USBH_HandleControl+0x2cc>
 80089b0:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <USBH_HandleControl+0x24>)
 80089b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b6:	bf00      	nop
 80089b8:	080089e5 	.word	0x080089e5
 80089bc:	080089ff 	.word	0x080089ff
 80089c0:	08008a69 	.word	0x08008a69
 80089c4:	08008a8f 	.word	0x08008a8f
 80089c8:	08008ac7 	.word	0x08008ac7
 80089cc:	08008af3 	.word	0x08008af3
 80089d0:	08008b45 	.word	0x08008b45
 80089d4:	08008b67 	.word	0x08008b67
 80089d8:	08008ba3 	.word	0x08008ba3
 80089dc:	08008bcb 	.word	0x08008bcb
 80089e0:	08008c09 	.word	0x08008c09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f103 0110 	add.w	r1, r3, #16
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	795b      	ldrb	r3, [r3, #5]
 80089ee:	461a      	mov	r2, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f945 	bl	8008c80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	761a      	strb	r2, [r3, #24]
      break;
 80089fc:	e13b      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	795b      	ldrb	r3, [r3, #5]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fcc5 	bl	8009394 <USBH_LL_GetURBState>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d11e      	bne.n	8008a52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7c1b      	ldrb	r3, [r3, #16]
 8008a18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	8adb      	ldrh	r3, [r3, #22]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008a26:	7b7b      	ldrb	r3, [r7, #13]
 8008a28:	2b80      	cmp	r3, #128	; 0x80
 8008a2a:	d103      	bne.n	8008a34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2203      	movs	r2, #3
 8008a30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a32:	e117      	b.n	8008c64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2205      	movs	r2, #5
 8008a38:	761a      	strb	r2, [r3, #24]
      break;
 8008a3a:	e113      	b.n	8008c64 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008a3c:	7b7b      	ldrb	r3, [r7, #13]
 8008a3e:	2b80      	cmp	r3, #128	; 0x80
 8008a40:	d103      	bne.n	8008a4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2209      	movs	r2, #9
 8008a46:	761a      	strb	r2, [r3, #24]
      break;
 8008a48:	e10c      	b.n	8008c64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2207      	movs	r2, #7
 8008a4e:	761a      	strb	r2, [r3, #24]
      break;
 8008a50:	e108      	b.n	8008c64 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d003      	beq.n	8008a60 <USBH_HandleControl+0xcc>
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	f040 8102 	bne.w	8008c64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	220b      	movs	r2, #11
 8008a64:	761a      	strb	r2, [r3, #24]
      break;
 8008a66:	e0fd      	b.n	8008c64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6899      	ldr	r1, [r3, #8]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	899a      	ldrh	r2, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	791b      	ldrb	r3, [r3, #4]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f93c 	bl	8008cfe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2204      	movs	r2, #4
 8008a8a:	761a      	strb	r2, [r3, #24]
      break;
 8008a8c:	e0f3      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	791b      	ldrb	r3, [r3, #4]
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fc7d 	bl	8009394 <USBH_LL_GetURBState>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008a9e:	7bbb      	ldrb	r3, [r7, #14]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d102      	bne.n	8008aaa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2209      	movs	r2, #9
 8008aa8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	d102      	bne.n	8008ab6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008ab4:	e0d8      	b.n	8008c68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	f040 80d5 	bne.w	8008c68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	220b      	movs	r2, #11
 8008ac2:	761a      	strb	r2, [r3, #24]
      break;
 8008ac4:	e0d0      	b.n	8008c68 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6899      	ldr	r1, [r3, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	899a      	ldrh	r2, [r3, #12]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	7958      	ldrb	r0, [r3, #5]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8eb 	bl	8008cb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2206      	movs	r2, #6
 8008aee:	761a      	strb	r2, [r3, #24]
      break;
 8008af0:	e0c1      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	795b      	ldrb	r3, [r3, #5]
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fc4b 	bl	8009394 <USBH_LL_GetURBState>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d103      	bne.n	8008b10 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2207      	movs	r2, #7
 8008b0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b0e:	e0ad      	b.n	8008c6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	d105      	bne.n	8008b22 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	220c      	movs	r2, #12
 8008b1a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b20:	e0a4      	b.n	8008c6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d103      	bne.n	8008b30 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2205      	movs	r2, #5
 8008b2c:	761a      	strb	r2, [r3, #24]
      break;
 8008b2e:	e09d      	b.n	8008c6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	f040 809a 	bne.w	8008c6c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	220b      	movs	r2, #11
 8008b3c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008b3e:	2302      	movs	r3, #2
 8008b40:	73fb      	strb	r3, [r7, #15]
      break;
 8008b42:	e093      	b.n	8008c6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	791b      	ldrb	r3, [r3, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f8d6 	bl	8008cfe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2208      	movs	r2, #8
 8008b62:	761a      	strb	r2, [r3, #24]

      break;
 8008b64:	e087      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	791b      	ldrb	r3, [r3, #4]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fc11 	bl	8009394 <USBH_LL_GetURBState>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d105      	bne.n	8008b88 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	220d      	movs	r2, #13
 8008b80:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008b86:	e073      	b.n	8008c70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d103      	bne.n	8008b96 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	220b      	movs	r2, #11
 8008b92:	761a      	strb	r2, [r3, #24]
      break;
 8008b94:	e06c      	b.n	8008c70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b05      	cmp	r3, #5
 8008b9a:	d169      	bne.n	8008c70 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba0:	e066      	b.n	8008c70 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	795a      	ldrb	r2, [r3, #5]
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	2200      	movs	r2, #0
 8008bae:	2100      	movs	r1, #0
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f87f 	bl	8008cb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	761a      	strb	r2, [r3, #24]
      break;
 8008bc8:	e055      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	795b      	ldrb	r3, [r3, #5]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fbdf 	bl	8009394 <USBH_LL_GetURBState>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008bda:	7bbb      	ldrb	r3, [r7, #14]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d105      	bne.n	8008bec <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220d      	movs	r2, #13
 8008be8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008bea:	e043      	b.n	8008c74 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d103      	bne.n	8008bfa <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2209      	movs	r2, #9
 8008bf6:	761a      	strb	r2, [r3, #24]
      break;
 8008bf8:	e03c      	b.n	8008c74 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d139      	bne.n	8008c74 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	220b      	movs	r2, #11
 8008c04:	761a      	strb	r2, [r3, #24]
      break;
 8008c06:	e035      	b.n	8008c74 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	7e5b      	ldrb	r3, [r3, #25]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	765a      	strb	r2, [r3, #25]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	7e5b      	ldrb	r3, [r3, #25]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d806      	bhi.n	8008c2a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008c28:	e025      	b.n	8008c76 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c30:	2106      	movs	r1, #6
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	795b      	ldrb	r3, [r3, #5]
 8008c40:	4619      	mov	r1, r3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f90c 	bl	8008e60 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	791b      	ldrb	r3, [r3, #4]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f906 	bl	8008e60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5e:	e00a      	b.n	8008c76 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008c60:	bf00      	nop
 8008c62:	e008      	b.n	8008c76 <USBH_HandleControl+0x2e2>
      break;
 8008c64:	bf00      	nop
 8008c66:	e006      	b.n	8008c76 <USBH_HandleControl+0x2e2>
      break;
 8008c68:	bf00      	nop
 8008c6a:	e004      	b.n	8008c76 <USBH_HandleControl+0x2e2>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e002      	b.n	8008c76 <USBH_HandleControl+0x2e2>
      break;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <USBH_HandleControl+0x2e2>
      break;
 8008c74:	bf00      	nop
  }

  return status;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c8e:	79f9      	ldrb	r1, [r7, #7]
 8008c90:	2300      	movs	r3, #0
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	2308      	movs	r3, #8
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	9301      	str	r3, [sp, #4]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fb44 	bl	8009332 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b088      	sub	sp, #32
 8008cb8:	af04      	add	r7, sp, #16
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	80fb      	strh	r3, [r7, #6]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008cd8:	7979      	ldrb	r1, [r7, #5]
 8008cda:	7e3b      	ldrb	r3, [r7, #24]
 8008cdc:	9303      	str	r3, [sp, #12]
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	9302      	str	r3, [sp, #8]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fb1f 	bl	8009332 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b088      	sub	sp, #32
 8008d02:	af04      	add	r7, sp, #16
 8008d04:	60f8      	str	r0, [r7, #12]
 8008d06:	60b9      	str	r1, [r7, #8]
 8008d08:	4611      	mov	r1, r2
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	80fb      	strh	r3, [r7, #6]
 8008d10:	4613      	mov	r3, r2
 8008d12:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d14:	7979      	ldrb	r1, [r7, #5]
 8008d16:	2300      	movs	r3, #0
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	2301      	movs	r3, #1
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2300      	movs	r3, #0
 8008d28:	2201      	movs	r2, #1
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 fb01 	bl	8009332 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008d30:	2300      	movs	r3, #0

}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b088      	sub	sp, #32
 8008d3e:	af04      	add	r7, sp, #16
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	4611      	mov	r1, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	460b      	mov	r3, r1
 8008d4a:	80fb      	strh	r3, [r7, #6]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d5e:	7979      	ldrb	r1, [r7, #5]
 8008d60:	7e3b      	ldrb	r3, [r7, #24]
 8008d62:	9303      	str	r3, [sp, #12]
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	9302      	str	r3, [sp, #8]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	2302      	movs	r3, #2
 8008d72:	2200      	movs	r2, #0
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 fadc 	bl	8009332 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af04      	add	r7, sp, #16
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4611      	mov	r1, r2
 8008d90:	461a      	mov	r2, r3
 8008d92:	460b      	mov	r3, r1
 8008d94:	80fb      	strh	r3, [r7, #6]
 8008d96:	4613      	mov	r3, r2
 8008d98:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008d9a:	7979      	ldrb	r1, [r7, #5]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	9303      	str	r3, [sp, #12]
 8008da0:	88fb      	ldrh	r3, [r7, #6]
 8008da2:	9302      	str	r3, [sp, #8]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	9301      	str	r3, [sp, #4]
 8008da8:	2301      	movs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	2302      	movs	r3, #2
 8008dae:	2201      	movs	r2, #1
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 fabe 	bl	8009332 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af04      	add	r7, sp, #16
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	4608      	mov	r0, r1
 8008dca:	4611      	mov	r1, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	70fb      	strb	r3, [r7, #3]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70bb      	strb	r3, [r7, #2]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008dda:	7878      	ldrb	r0, [r7, #1]
 8008ddc:	78ba      	ldrb	r2, [r7, #2]
 8008dde:	78f9      	ldrb	r1, [r7, #3]
 8008de0:	8b3b      	ldrh	r3, [r7, #24]
 8008de2:	9302      	str	r3, [sp, #8]
 8008de4:	7d3b      	ldrb	r3, [r7, #20]
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	7c3b      	ldrb	r3, [r7, #16]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	4603      	mov	r3, r0
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fa51 	bl	8009296 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3708      	adds	r7, #8
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	460b      	mov	r3, r1
 8008e08:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa70 	bl	80092f4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	460b      	mov	r3, r1
 8008e28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f836 	bl	8008e9c <USBH_GetFreePipe>
 8008e30:	4603      	mov	r3, r0
 8008e32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008e34:	89fb      	ldrh	r3, [r7, #14]
 8008e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d00a      	beq.n	8008e54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008e3e:	78fa      	ldrb	r2, [r7, #3]
 8008e40:	89fb      	ldrh	r3, [r7, #14]
 8008e42:	f003 030f 	and.w	r3, r3, #15
 8008e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	33e0      	adds	r3, #224	; 0xe0
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008e54:	89fb      	ldrh	r3, [r7, #14]
 8008e56:	b2db      	uxtb	r3, r3
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	2b0a      	cmp	r3, #10
 8008e70:	d80d      	bhi.n	8008e8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	33e0      	adds	r3, #224	; 0xe0
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	78fb      	ldrb	r3, [r7, #3]
 8008e80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	33e0      	adds	r3, #224	; 0xe0
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
 8008eac:	e00f      	b.n	8008ece <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	33e0      	adds	r3, #224	; 0xe0
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d102      	bne.n	8008ec8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	e007      	b.n	8008ed8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b0a      	cmp	r3, #10
 8008ed2:	d9ec      	bls.n	8008eae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	490e      	ldr	r1, [pc, #56]	; (8008f24 <MX_USB_HOST_Init+0x40>)
 8008eec:	480e      	ldr	r0, [pc, #56]	; (8008f28 <MX_USB_HOST_Init+0x44>)
 8008eee:	f7fe fc9f 	bl	8007830 <USBH_Init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ef8:	f7f7 fdbc 	bl	8000a74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008efc:	490b      	ldr	r1, [pc, #44]	; (8008f2c <MX_USB_HOST_Init+0x48>)
 8008efe:	480a      	ldr	r0, [pc, #40]	; (8008f28 <MX_USB_HOST_Init+0x44>)
 8008f00:	f7fe fd24 	bl	800794c <USBH_RegisterClass>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008f0a:	f7f7 fdb3 	bl	8000a74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008f0e:	4806      	ldr	r0, [pc, #24]	; (8008f28 <MX_USB_HOST_Init+0x44>)
 8008f10:	f7fe fda8 	bl	8007a64 <USBH_Start>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008f1a:	f7f7 fdab 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008f1e:	bf00      	nop
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08008f45 	.word	0x08008f45
 8008f28:	200001c0 	.word	0x200001c0
 8008f2c:	2000000c 	.word	0x2000000c

08008f30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008f34:	4802      	ldr	r0, [pc, #8]	; (8008f40 <MX_USB_HOST_Process+0x10>)
 8008f36:	f7fe fda5 	bl	8007a84 <USBH_Process>
}
 8008f3a:	bf00      	nop
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	200001c0 	.word	0x200001c0

08008f44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d819      	bhi.n	8008f8c <USBH_UserProcess+0x48>
 8008f58:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <USBH_UserProcess+0x1c>)
 8008f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5e:	bf00      	nop
 8008f60:	08008f8d 	.word	0x08008f8d
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f8d 	.word	0x08008f8d
 8008f6c:	08008f85 	.word	0x08008f85
 8008f70:	08008f75 	.word	0x08008f75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008f74:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <USBH_UserProcess+0x58>)
 8008f76:	2203      	movs	r2, #3
 8008f78:	701a      	strb	r2, [r3, #0]
  break;
 8008f7a:	e008      	b.n	8008f8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008f7c:	4b07      	ldr	r3, [pc, #28]	; (8008f9c <USBH_UserProcess+0x58>)
 8008f7e:	2202      	movs	r2, #2
 8008f80:	701a      	strb	r2, [r3, #0]
  break;
 8008f82:	e004      	b.n	8008f8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <USBH_UserProcess+0x58>)
 8008f86:	2201      	movs	r2, #1
 8008f88:	701a      	strb	r2, [r3, #0]
  break;
 8008f8a:	e000      	b.n	8008f8e <USBH_UserProcess+0x4a>

  default:
  break;
 8008f8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	200000b8 	.word	0x200000b8

08008fa0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08a      	sub	sp, #40	; 0x28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa8:	f107 0314 	add.w	r3, r7, #20
 8008fac:	2200      	movs	r2, #0
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	605a      	str	r2, [r3, #4]
 8008fb2:	609a      	str	r2, [r3, #8]
 8008fb4:	60da      	str	r2, [r3, #12]
 8008fb6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fc0:	d147      	bne.n	8009052 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	613b      	str	r3, [r7, #16]
 8008fc6:	4b25      	ldr	r3, [pc, #148]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	4a24      	ldr	r2, [pc, #144]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8008fcc:	f043 0301 	orr.w	r3, r3, #1
 8008fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd2:	4b22      	ldr	r3, [pc, #136]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	613b      	str	r3, [r7, #16]
 8008fdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008fec:	f107 0314 	add.w	r3, r7, #20
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	481b      	ldr	r0, [pc, #108]	; (8009060 <HAL_HCD_MspInit+0xc0>)
 8008ff4:	f7f8 f906 	bl	8001204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ff8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ffe:	2302      	movs	r3, #2
 8009000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009002:	2300      	movs	r3, #0
 8009004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009006:	2300      	movs	r3, #0
 8009008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800900a:	230a      	movs	r3, #10
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800900e:	f107 0314 	add.w	r3, r7, #20
 8009012:	4619      	mov	r1, r3
 8009014:	4812      	ldr	r0, [pc, #72]	; (8009060 <HAL_HCD_MspInit+0xc0>)
 8009016:	f7f8 f8f5 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800901a:	4b10      	ldr	r3, [pc, #64]	; (800905c <HAL_HCD_MspInit+0xbc>)
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	4a0f      	ldr	r2, [pc, #60]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8009020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009024:	6353      	str	r3, [r2, #52]	; 0x34
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	4b0c      	ldr	r3, [pc, #48]	; (800905c <HAL_HCD_MspInit+0xbc>)
 800902c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800902e:	4a0b      	ldr	r2, [pc, #44]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8009030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009034:	6453      	str	r3, [r2, #68]	; 0x44
 8009036:	4b09      	ldr	r3, [pc, #36]	; (800905c <HAL_HCD_MspInit+0xbc>)
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009042:	2200      	movs	r2, #0
 8009044:	2100      	movs	r1, #0
 8009046:	2043      	movs	r0, #67	; 0x43
 8009048:	f7f8 f875 	bl	8001136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800904c:	2043      	movs	r0, #67	; 0x43
 800904e:	f7f8 f88e 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009052:	bf00      	nop
 8009054:	3728      	adds	r7, #40	; 0x28
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	40023800 	.word	0x40023800
 8009060:	40020000 	.word	0x40020000

08009064 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009072:	4618      	mov	r0, r3
 8009074:	f7ff f8d9 	bl	800822a <USBH_LL_IncTimer>
}
 8009078:	bf00      	nop
 800907a:	3708      	adds	r7, #8
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff f911 	bl	80082b6 <USBH_LL_Connect>
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff f91a 	bl	80082e4 <USBH_LL_Disconnect>
}
 80090b0:	bf00      	nop
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
 80090c4:	4613      	mov	r3, r2
 80090c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff f8cb 	bl	800827e <USBH_LL_PortEnabled>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff f8cb 	bl	800829a <USBH_LL_PortDisabled>
}
 8009104:	bf00      	nop
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800911a:	2b01      	cmp	r3, #1
 800911c:	d12a      	bne.n	8009174 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800911e:	4a18      	ldr	r2, [pc, #96]	; (8009180 <USBH_LL_Init+0x74>)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a15      	ldr	r2, [pc, #84]	; (8009180 <USBH_LL_Init+0x74>)
 800912a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800912e:	4b14      	ldr	r3, [pc, #80]	; (8009180 <USBH_LL_Init+0x74>)
 8009130:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009134:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009136:	4b12      	ldr	r3, [pc, #72]	; (8009180 <USBH_LL_Init+0x74>)
 8009138:	2208      	movs	r2, #8
 800913a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <USBH_LL_Init+0x74>)
 800913e:	2201      	movs	r2, #1
 8009140:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <USBH_LL_Init+0x74>)
 8009144:	2200      	movs	r2, #0
 8009146:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <USBH_LL_Init+0x74>)
 800914a:	2202      	movs	r2, #2
 800914c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800914e:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <USBH_LL_Init+0x74>)
 8009150:	2200      	movs	r2, #0
 8009152:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009154:	480a      	ldr	r0, [pc, #40]	; (8009180 <USBH_LL_Init+0x74>)
 8009156:	f7f8 fa23 	bl	80015a0 <HAL_HCD_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009160:	f7f7 fc88 	bl	8000a74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009164:	4806      	ldr	r0, [pc, #24]	; (8009180 <USBH_LL_Init+0x74>)
 8009166:	f7f8 fe27 	bl	8001db8 <HAL_HCD_GetCurrentFrame>
 800916a:	4603      	mov	r3, r0
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff f84c 	bl	800820c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000598 	.word	0x20000598

08009184 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800919a:	4618      	mov	r0, r3
 800919c:	f7f8 fd94 	bl	8001cc8 <HAL_HCD_Start>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 f95c 	bl	8009464 <USBH_Get_USB_Status>
 80091ac:	4603      	mov	r3, r0
 80091ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3710      	adds	r7, #16
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091c2:	2300      	movs	r3, #0
 80091c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7f8 fd9c 	bl	8001d0e <HAL_HCD_Stop>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f941 	bl	8009464 <USBH_Get_USB_Status>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80091f8:	2301      	movs	r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009202:	4618      	mov	r0, r3
 8009204:	f7f8 fde6 	bl	8001dd4 <HAL_HCD_GetCurrentSpeed>
 8009208:	4603      	mov	r3, r0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d007      	beq.n	800921e <USBH_LL_GetSpeed+0x2e>
 800920e:	2b01      	cmp	r3, #1
 8009210:	d302      	bcc.n	8009218 <USBH_LL_GetSpeed+0x28>
 8009212:	2b02      	cmp	r3, #2
 8009214:	d006      	beq.n	8009224 <USBH_LL_GetSpeed+0x34>
 8009216:	e008      	b.n	800922a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009218:	2300      	movs	r3, #0
 800921a:	73fb      	strb	r3, [r7, #15]
    break;
 800921c:	e008      	b.n	8009230 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
    break;
 8009222:	e005      	b.n	8009230 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009224:	2302      	movs	r3, #2
 8009226:	73fb      	strb	r3, [r7, #15]
    break;
 8009228:	e002      	b.n	8009230 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800922a:	2301      	movs	r3, #1
 800922c:	73fb      	strb	r3, [r7, #15]
    break;
 800922e:	bf00      	nop
  }
  return  speed;
 8009230:	7bfb      	ldrb	r3, [r7, #15]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009250:	4618      	mov	r0, r3
 8009252:	f7f8 fd79 	bl	8001d48 <HAL_HCD_ResetPort>
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	4618      	mov	r0, r3
 800925e:	f000 f901 	bl	8009464 <USBH_Get_USB_Status>
 8009262:	4603      	mov	r3, r0
 8009264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009266:	7bbb      	ldrb	r3, [r7, #14]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009282:	78fa      	ldrb	r2, [r7, #3]
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f7f8 fd81 	bl	8001d8e <HAL_HCD_HC_GetXferCount>
 800928c:	4603      	mov	r3, r0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009296:	b590      	push	{r4, r7, lr}
 8009298:	b089      	sub	sp, #36	; 0x24
 800929a:	af04      	add	r7, sp, #16
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	4608      	mov	r0, r1
 80092a0:	4611      	mov	r1, r2
 80092a2:	461a      	mov	r2, r3
 80092a4:	4603      	mov	r3, r0
 80092a6:	70fb      	strb	r3, [r7, #3]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70bb      	strb	r3, [r7, #2]
 80092ac:	4613      	mov	r3, r2
 80092ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80092be:	787c      	ldrb	r4, [r7, #1]
 80092c0:	78ba      	ldrb	r2, [r7, #2]
 80092c2:	78f9      	ldrb	r1, [r7, #3]
 80092c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80092c6:	9302      	str	r3, [sp, #8]
 80092c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	4623      	mov	r3, r4
 80092d6:	f7f8 f9c5 	bl	8001664 <HAL_HCD_HC_Init>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f000 f8bf 	bl	8009464 <USBH_Get_USB_Status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	4611      	mov	r1, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7f8 fa3e 	bl	8001794 <HAL_HCD_HC_Halt>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f8a0 	bl	8009464 <USBH_Get_USB_Status>
 8009324:	4603      	mov	r3, r0
 8009326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009328:	7bbb      	ldrb	r3, [r7, #14]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009332:	b590      	push	{r4, r7, lr}
 8009334:	b089      	sub	sp, #36	; 0x24
 8009336:	af04      	add	r7, sp, #16
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	4608      	mov	r0, r1
 800933c:	4611      	mov	r1, r2
 800933e:	461a      	mov	r2, r3
 8009340:	4603      	mov	r3, r0
 8009342:	70fb      	strb	r3, [r7, #3]
 8009344:	460b      	mov	r3, r1
 8009346:	70bb      	strb	r3, [r7, #2]
 8009348:	4613      	mov	r3, r2
 800934a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800934c:	2300      	movs	r3, #0
 800934e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800935a:	787c      	ldrb	r4, [r7, #1]
 800935c:	78ba      	ldrb	r2, [r7, #2]
 800935e:	78f9      	ldrb	r1, [r7, #3]
 8009360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009364:	9303      	str	r3, [sp, #12]
 8009366:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009368:	9302      	str	r3, [sp, #8]
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	4623      	mov	r3, r4
 8009376:	f7f8 fa31 	bl	80017dc <HAL_HCD_HC_SubmitRequest>
 800937a:	4603      	mov	r3, r0
 800937c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	4618      	mov	r0, r3
 8009382:	f000 f86f 	bl	8009464 <USBH_Get_USB_Status>
 8009386:	4603      	mov	r3, r0
 8009388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938a:	7bbb      	ldrb	r3, [r7, #14]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3714      	adds	r7, #20
 8009390:	46bd      	mov	sp, r7
 8009392:	bd90      	pop	{r4, r7, pc}

08009394 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093a6:	78fa      	ldrb	r2, [r7, #3]
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7f8 fcda 	bl	8001d64 <HAL_HCD_HC_GetURBState>
 80093b0:	4603      	mov	r3, r0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d103      	bne.n	80093d8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f872 	bl	80094bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80093d8:	20c8      	movs	r0, #200	; 0xc8
 80093da:	f7f7 fdaf 	bl	8000f3c <HAL_Delay>
  return USBH_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
 80093f4:	4613      	mov	r3, r2
 80093f6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80093fe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009400:	78fa      	ldrb	r2, [r7, #3]
 8009402:	68f9      	ldr	r1, [r7, #12]
 8009404:	4613      	mov	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4413      	add	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	440b      	add	r3, r1
 800940e:	333b      	adds	r3, #59	; 0x3b
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	68f9      	ldr	r1, [r7, #12]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	440b      	add	r3, r1
 8009424:	3350      	adds	r3, #80	; 0x50
 8009426:	78ba      	ldrb	r2, [r7, #2]
 8009428:	701a      	strb	r2, [r3, #0]
 800942a:	e009      	b.n	8009440 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	68f9      	ldr	r1, [r7, #12]
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	00db      	lsls	r3, r3, #3
 8009438:	440b      	add	r3, r1
 800943a:	3351      	adds	r3, #81	; 0x51
 800943c:	78ba      	ldrb	r2, [r7, #2]
 800943e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7f7 fd70 	bl	8000f3c <HAL_Delay>
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d817      	bhi.n	80094a8 <USBH_Get_USB_Status+0x44>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <USBH_Get_USB_Status+0x1c>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009491 	.word	0x08009491
 8009484:	08009497 	.word	0x08009497
 8009488:	0800949d 	.word	0x0800949d
 800948c:	080094a3 	.word	0x080094a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
    break;
 8009494:	e00b      	b.n	80094ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009496:	2302      	movs	r3, #2
 8009498:	73fb      	strb	r3, [r7, #15]
    break;
 800949a:	e008      	b.n	80094ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800949c:	2301      	movs	r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
    break;
 80094a0:	e005      	b.n	80094ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80094a2:	2302      	movs	r3, #2
 80094a4:	73fb      	strb	r3, [r7, #15]
    break;
 80094a6:	e002      	b.n	80094ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80094a8:	2302      	movs	r3, #2
 80094aa:	73fb      	strb	r3, [r7, #15]
    break;
 80094ac:	bf00      	nop
  }
  return usb_status;
 80094ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3714      	adds	r7, #20
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d102      	bne.n	80094d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e001      	b.n	80094da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	461a      	mov	r2, r3
 80094de:	2101      	movs	r1, #1
 80094e0:	4803      	ldr	r0, [pc, #12]	; (80094f0 <MX_DriverVbusFS+0x34>)
 80094e2:	f7f8 f829 	bl	8001538 <HAL_GPIO_WritePin>
}
 80094e6:	bf00      	nop
 80094e8:	3710      	adds	r7, #16
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	40020800 	.word	0x40020800

080094f4 <__errno>:
 80094f4:	4b01      	ldr	r3, [pc, #4]	; (80094fc <__errno+0x8>)
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	2000002c 	.word	0x2000002c

08009500 <__libc_init_array>:
 8009500:	b570      	push	{r4, r5, r6, lr}
 8009502:	4e0d      	ldr	r6, [pc, #52]	; (8009538 <__libc_init_array+0x38>)
 8009504:	4c0d      	ldr	r4, [pc, #52]	; (800953c <__libc_init_array+0x3c>)
 8009506:	1ba4      	subs	r4, r4, r6
 8009508:	10a4      	asrs	r4, r4, #2
 800950a:	2500      	movs	r5, #0
 800950c:	42a5      	cmp	r5, r4
 800950e:	d109      	bne.n	8009524 <__libc_init_array+0x24>
 8009510:	4e0b      	ldr	r6, [pc, #44]	; (8009540 <__libc_init_array+0x40>)
 8009512:	4c0c      	ldr	r4, [pc, #48]	; (8009544 <__libc_init_array+0x44>)
 8009514:	f000 f8ea 	bl	80096ec <_init>
 8009518:	1ba4      	subs	r4, r4, r6
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	2500      	movs	r5, #0
 800951e:	42a5      	cmp	r5, r4
 8009520:	d105      	bne.n	800952e <__libc_init_array+0x2e>
 8009522:	bd70      	pop	{r4, r5, r6, pc}
 8009524:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009528:	4798      	blx	r3
 800952a:	3501      	adds	r5, #1
 800952c:	e7ee      	b.n	800950c <__libc_init_array+0xc>
 800952e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009532:	4798      	blx	r3
 8009534:	3501      	adds	r5, #1
 8009536:	e7f2      	b.n	800951e <__libc_init_array+0x1e>
 8009538:	08009728 	.word	0x08009728
 800953c:	08009728 	.word	0x08009728
 8009540:	08009728 	.word	0x08009728
 8009544:	0800972c 	.word	0x0800972c

08009548 <malloc>:
 8009548:	4b02      	ldr	r3, [pc, #8]	; (8009554 <malloc+0xc>)
 800954a:	4601      	mov	r1, r0
 800954c:	6818      	ldr	r0, [r3, #0]
 800954e:	f000 b861 	b.w	8009614 <_malloc_r>
 8009552:	bf00      	nop
 8009554:	2000002c 	.word	0x2000002c

08009558 <free>:
 8009558:	4b02      	ldr	r3, [pc, #8]	; (8009564 <free+0xc>)
 800955a:	4601      	mov	r1, r0
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	f000 b80b 	b.w	8009578 <_free_r>
 8009562:	bf00      	nop
 8009564:	2000002c 	.word	0x2000002c

08009568 <memset>:
 8009568:	4402      	add	r2, r0
 800956a:	4603      	mov	r3, r0
 800956c:	4293      	cmp	r3, r2
 800956e:	d100      	bne.n	8009572 <memset+0xa>
 8009570:	4770      	bx	lr
 8009572:	f803 1b01 	strb.w	r1, [r3], #1
 8009576:	e7f9      	b.n	800956c <memset+0x4>

08009578 <_free_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4605      	mov	r5, r0
 800957c:	2900      	cmp	r1, #0
 800957e:	d045      	beq.n	800960c <_free_r+0x94>
 8009580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009584:	1f0c      	subs	r4, r1, #4
 8009586:	2b00      	cmp	r3, #0
 8009588:	bfb8      	it	lt
 800958a:	18e4      	addlt	r4, r4, r3
 800958c:	f000 f8ac 	bl	80096e8 <__malloc_lock>
 8009590:	4a1f      	ldr	r2, [pc, #124]	; (8009610 <_free_r+0x98>)
 8009592:	6813      	ldr	r3, [r2, #0]
 8009594:	4610      	mov	r0, r2
 8009596:	b933      	cbnz	r3, 80095a6 <_free_r+0x2e>
 8009598:	6063      	str	r3, [r4, #4]
 800959a:	6014      	str	r4, [r2, #0]
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095a2:	f000 b8a2 	b.w	80096ea <__malloc_unlock>
 80095a6:	42a3      	cmp	r3, r4
 80095a8:	d90c      	bls.n	80095c4 <_free_r+0x4c>
 80095aa:	6821      	ldr	r1, [r4, #0]
 80095ac:	1862      	adds	r2, r4, r1
 80095ae:	4293      	cmp	r3, r2
 80095b0:	bf04      	itt	eq
 80095b2:	681a      	ldreq	r2, [r3, #0]
 80095b4:	685b      	ldreq	r3, [r3, #4]
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	bf04      	itt	eq
 80095ba:	1852      	addeq	r2, r2, r1
 80095bc:	6022      	streq	r2, [r4, #0]
 80095be:	6004      	str	r4, [r0, #0]
 80095c0:	e7ec      	b.n	800959c <_free_r+0x24>
 80095c2:	4613      	mov	r3, r2
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	b10a      	cbz	r2, 80095cc <_free_r+0x54>
 80095c8:	42a2      	cmp	r2, r4
 80095ca:	d9fa      	bls.n	80095c2 <_free_r+0x4a>
 80095cc:	6819      	ldr	r1, [r3, #0]
 80095ce:	1858      	adds	r0, r3, r1
 80095d0:	42a0      	cmp	r0, r4
 80095d2:	d10b      	bne.n	80095ec <_free_r+0x74>
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	4401      	add	r1, r0
 80095d8:	1858      	adds	r0, r3, r1
 80095da:	4282      	cmp	r2, r0
 80095dc:	6019      	str	r1, [r3, #0]
 80095de:	d1dd      	bne.n	800959c <_free_r+0x24>
 80095e0:	6810      	ldr	r0, [r2, #0]
 80095e2:	6852      	ldr	r2, [r2, #4]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	4401      	add	r1, r0
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	e7d7      	b.n	800959c <_free_r+0x24>
 80095ec:	d902      	bls.n	80095f4 <_free_r+0x7c>
 80095ee:	230c      	movs	r3, #12
 80095f0:	602b      	str	r3, [r5, #0]
 80095f2:	e7d3      	b.n	800959c <_free_r+0x24>
 80095f4:	6820      	ldr	r0, [r4, #0]
 80095f6:	1821      	adds	r1, r4, r0
 80095f8:	428a      	cmp	r2, r1
 80095fa:	bf04      	itt	eq
 80095fc:	6811      	ldreq	r1, [r2, #0]
 80095fe:	6852      	ldreq	r2, [r2, #4]
 8009600:	6062      	str	r2, [r4, #4]
 8009602:	bf04      	itt	eq
 8009604:	1809      	addeq	r1, r1, r0
 8009606:	6021      	streq	r1, [r4, #0]
 8009608:	605c      	str	r4, [r3, #4]
 800960a:	e7c7      	b.n	800959c <_free_r+0x24>
 800960c:	bd38      	pop	{r3, r4, r5, pc}
 800960e:	bf00      	nop
 8009610:	200000bc 	.word	0x200000bc

08009614 <_malloc_r>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	1ccd      	adds	r5, r1, #3
 8009618:	f025 0503 	bic.w	r5, r5, #3
 800961c:	3508      	adds	r5, #8
 800961e:	2d0c      	cmp	r5, #12
 8009620:	bf38      	it	cc
 8009622:	250c      	movcc	r5, #12
 8009624:	2d00      	cmp	r5, #0
 8009626:	4606      	mov	r6, r0
 8009628:	db01      	blt.n	800962e <_malloc_r+0x1a>
 800962a:	42a9      	cmp	r1, r5
 800962c:	d903      	bls.n	8009636 <_malloc_r+0x22>
 800962e:	230c      	movs	r3, #12
 8009630:	6033      	str	r3, [r6, #0]
 8009632:	2000      	movs	r0, #0
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	f000 f857 	bl	80096e8 <__malloc_lock>
 800963a:	4a21      	ldr	r2, [pc, #132]	; (80096c0 <_malloc_r+0xac>)
 800963c:	6814      	ldr	r4, [r2, #0]
 800963e:	4621      	mov	r1, r4
 8009640:	b991      	cbnz	r1, 8009668 <_malloc_r+0x54>
 8009642:	4c20      	ldr	r4, [pc, #128]	; (80096c4 <_malloc_r+0xb0>)
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	b91b      	cbnz	r3, 8009650 <_malloc_r+0x3c>
 8009648:	4630      	mov	r0, r6
 800964a:	f000 f83d 	bl	80096c8 <_sbrk_r>
 800964e:	6020      	str	r0, [r4, #0]
 8009650:	4629      	mov	r1, r5
 8009652:	4630      	mov	r0, r6
 8009654:	f000 f838 	bl	80096c8 <_sbrk_r>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d124      	bne.n	80096a6 <_malloc_r+0x92>
 800965c:	230c      	movs	r3, #12
 800965e:	6033      	str	r3, [r6, #0]
 8009660:	4630      	mov	r0, r6
 8009662:	f000 f842 	bl	80096ea <__malloc_unlock>
 8009666:	e7e4      	b.n	8009632 <_malloc_r+0x1e>
 8009668:	680b      	ldr	r3, [r1, #0]
 800966a:	1b5b      	subs	r3, r3, r5
 800966c:	d418      	bmi.n	80096a0 <_malloc_r+0x8c>
 800966e:	2b0b      	cmp	r3, #11
 8009670:	d90f      	bls.n	8009692 <_malloc_r+0x7e>
 8009672:	600b      	str	r3, [r1, #0]
 8009674:	50cd      	str	r5, [r1, r3]
 8009676:	18cc      	adds	r4, r1, r3
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f836 	bl	80096ea <__malloc_unlock>
 800967e:	f104 000b 	add.w	r0, r4, #11
 8009682:	1d23      	adds	r3, r4, #4
 8009684:	f020 0007 	bic.w	r0, r0, #7
 8009688:	1ac3      	subs	r3, r0, r3
 800968a:	d0d3      	beq.n	8009634 <_malloc_r+0x20>
 800968c:	425a      	negs	r2, r3
 800968e:	50e2      	str	r2, [r4, r3]
 8009690:	e7d0      	b.n	8009634 <_malloc_r+0x20>
 8009692:	428c      	cmp	r4, r1
 8009694:	684b      	ldr	r3, [r1, #4]
 8009696:	bf16      	itet	ne
 8009698:	6063      	strne	r3, [r4, #4]
 800969a:	6013      	streq	r3, [r2, #0]
 800969c:	460c      	movne	r4, r1
 800969e:	e7eb      	b.n	8009678 <_malloc_r+0x64>
 80096a0:	460c      	mov	r4, r1
 80096a2:	6849      	ldr	r1, [r1, #4]
 80096a4:	e7cc      	b.n	8009640 <_malloc_r+0x2c>
 80096a6:	1cc4      	adds	r4, r0, #3
 80096a8:	f024 0403 	bic.w	r4, r4, #3
 80096ac:	42a0      	cmp	r0, r4
 80096ae:	d005      	beq.n	80096bc <_malloc_r+0xa8>
 80096b0:	1a21      	subs	r1, r4, r0
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 f808 	bl	80096c8 <_sbrk_r>
 80096b8:	3001      	adds	r0, #1
 80096ba:	d0cf      	beq.n	800965c <_malloc_r+0x48>
 80096bc:	6025      	str	r5, [r4, #0]
 80096be:	e7db      	b.n	8009678 <_malloc_r+0x64>
 80096c0:	200000bc 	.word	0x200000bc
 80096c4:	200000c0 	.word	0x200000c0

080096c8 <_sbrk_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4c06      	ldr	r4, [pc, #24]	; (80096e4 <_sbrk_r+0x1c>)
 80096cc:	2300      	movs	r3, #0
 80096ce:	4605      	mov	r5, r0
 80096d0:	4608      	mov	r0, r1
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	f7f7 fb4a 	bl	8000d6c <_sbrk>
 80096d8:	1c43      	adds	r3, r0, #1
 80096da:	d102      	bne.n	80096e2 <_sbrk_r+0x1a>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	b103      	cbz	r3, 80096e2 <_sbrk_r+0x1a>
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	2000085c 	.word	0x2000085c

080096e8 <__malloc_lock>:
 80096e8:	4770      	bx	lr

080096ea <__malloc_unlock>:
 80096ea:	4770      	bx	lr

080096ec <_init>:
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ee:	bf00      	nop
 80096f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096f2:	bc08      	pop	{r3}
 80096f4:	469e      	mov	lr, r3
 80096f6:	4770      	bx	lr

080096f8 <_fini>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr
