
STM32F407-I2C_slave_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000942c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095d0  080095d0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095d8  080095d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095d8  080095d8  000195d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095dc  080095dc  000195dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080095e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  20000090  08009670  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  08009670  0002085c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019818  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000037d6  00000000  00000000  000398d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  0003d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  0003e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023ab1  00000000  00000000  0003f2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a1e  00000000  00000000  00062d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb14d  00000000  00000000  000747af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f8fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004afc  00000000  00000000  0013f978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800959c 	.word	0x0800959c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800959c 	.word	0x0800959c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_I2C_AddrCallback>:
static void MX_I2S3_Init(void);
static void MX_SPI1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
 80004d4:	4613      	mov	r3, r2
 80004d6:	803b      	strh	r3, [r7, #0]
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <HAL_I2C_AddrCallback+0x24>)
 80004de:	f001 f80c 	bl	80014fa <HAL_GPIO_TogglePin>
	if(TransferDirection==1) //master read
	{
		HAL_I2C_Slave_Transmit_IT(&hi2c1, &i2c_send_slave, 1);
	}
	*/
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40020c00 	.word	0x40020c00

080004f0 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80004f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80004fe:	f000 fffc 	bl	80014fa <HAL_GPIO_TogglePin>
	//HAL_I2C_EnableListen_IT(&hi2c1);
	if(buffer[0] == 0x01){
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
	}
	else if(buffer[0] == 0x02){
		//CS low
	}

	if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 8000508:	2201      	movs	r2, #1
 800050a:	4907      	ldr	r1, [pc, #28]	; (8000528 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 800050e:	f002 fe39 	bl	8003184 <HAL_I2C_Slave_Receive_IT>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d000      	beq.n	800051a <HAL_I2C_SlaveRxCpltCallback+0x2a>
	  	asm("bkpt 255");
 8000518:	beff      	bkpt	0x00ff
	}

}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40020c00 	.word	0x40020c00
 8000528:	20000114 	.word	0x20000114
 800052c:	200000c0 	.word	0x200000c0

08000530 <HAL_I2C_SlaveTxCpltCallback>:



void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	//HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
	HAL_I2C_EnableListen_IT(&hi2c1);
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <HAL_I2C_SlaveTxCpltCallback+0x18>)
 800053a:	f002 fe93 	bl	8003264 <HAL_I2C_EnableListen_IT>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000c0 	.word	0x200000c0

0800054c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c); // Restart
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f002 fe85 	bl	8003264 <HAL_I2C_EnableListen_IT>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF) {
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f003 f8f6 	bl	800375c <HAL_I2C_GetError>
 8000570:	4603      	mov	r3, r0
 8000572:	2b04      	cmp	r3, #4
 8000574:	d000      	beq.n	8000578 <HAL_I2C_ErrorCallback+0x16>
		asm("nop");
 8000576:	bf00      	nop
	}
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc30 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f828 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f93c 	bl	8000808 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000590:	f000 f8a6 	bl	80006e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000594:	f000 f8d2 	bl	800073c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000598:	f000 f900 	bl	800079c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800059c:	f008 fbfa 	bl	8008d94 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <main+0x50>)
 80005a8:	f000 ff8e 	bl	80014c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <main+0x50>)
 80005b4:	f000 ff88 	bl	80014c8 <HAL_GPIO_WritePin>
  //HAL_I2C_EnableListen_IT(&hi2c1);

  if(HAL_I2C_Slave_Receive_IT(&hi2c1, &buffer, sizeof(buffer)) != HAL_OK){
 80005b8:	2201      	movs	r2, #1
 80005ba:	4906      	ldr	r1, [pc, #24]	; (80005d4 <main+0x54>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x58>)
 80005be:	f002 fde1 	bl	8003184 <HAL_I2C_Slave_Receive_IT>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <main+0x4a>
  	asm("bkpt 255");
 80005c8:	beff      	bkpt	0x00ff
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ca:	f008 fc09 	bl	8008de0 <MX_USB_HOST_Process>
 80005ce:	e7fc      	b.n	80005ca <main+0x4a>
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	20000114 	.word	0x20000114
 80005d8:	200000c0 	.word	0x200000c0

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e6:	2230      	movs	r2, #48	; 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 ff14 	bl	8009418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemClock_Config+0xfc>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemClock_Config+0xfc>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	; 0x40
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemClock_Config+0xfc>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <SystemClock_Config+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <SystemClock_Config+0x100>)
 8000634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000646:	2301      	movs	r3, #1
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000654:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000658:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065a:	2308      	movs	r3, #8
 800065c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000670:	4618      	mov	r0, r3
 8000672:	f004 ff59 	bl	8005528 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800067c:	f000 f9c2 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2105      	movs	r1, #5
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 f9b2 	bl	8005a08 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006aa:	f000 f9ab 	bl	8000a04 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80006b2:	23c0      	movs	r3, #192	; 0xc0
 80006b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fb80 	bl	8005dc4 <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ca:	f000 f99b 	bl	8000a04 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3760      	adds	r7, #96	; 0x60
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 64;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2240      	movs	r2, #64	; 0x40
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f002 fbf9 	bl	8002f14 <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 f96c 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000c0 	.word	0x200000c0
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_I2S3_Init+0x54>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_I2S3_Init+0x58>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2S3_Init+0x54>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_I2S3_Init+0x54>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_I2S3_Init+0x54>)
 8000764:	4a0c      	ldr	r2, [pc, #48]	; (8000798 <MX_I2S3_Init+0x5c>)
 8000766:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_I2S3_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_I2S3_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_I2S3_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2S3_Init+0x54>)
 800077c:	f004 fa34 	bl	8004be8 <HAL_I2S_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000786:	f000 f93d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000170 	.word	0x20000170
 8000794:	40003c00 	.word	0x40003c00
 8000798:	00017700 	.word	0x00017700

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f005 fc27 	bl	8006040 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 f904 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000118 	.word	0x20000118
 8000804:	40013000 	.word	0x40013000

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4b71      	ldr	r3, [pc, #452]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a70      	ldr	r2, [pc, #448]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000828:	f043 0310 	orr.w	r3, r3, #16
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b6e      	ldr	r3, [pc, #440]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0310 	and.w	r3, r3, #16
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b6a      	ldr	r3, [pc, #424]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a69      	ldr	r2, [pc, #420]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b67      	ldr	r3, [pc, #412]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b63      	ldr	r3, [pc, #396]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a62      	ldr	r2, [pc, #392]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b60      	ldr	r3, [pc, #384]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b5c      	ldr	r3, [pc, #368]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a5b      	ldr	r2, [pc, #364]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b59      	ldr	r3, [pc, #356]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b55      	ldr	r3, [pc, #340]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a54      	ldr	r2, [pc, #336]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b52      	ldr	r3, [pc, #328]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b4e      	ldr	r3, [pc, #312]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a4d      	ldr	r2, [pc, #308]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b4b      	ldr	r3, [pc, #300]	; (80009e8 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	4848      	ldr	r0, [pc, #288]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80008cc:	f000 fdfc 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	4846      	ldr	r0, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 80008d6:	f000 fdf7 	bl	80014c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008da:	2200      	movs	r2, #0
 80008dc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <MX_GPIO_Init+0x1ec>)
 80008e2:	f000 fdf1 	bl	80014c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008e6:	2308      	movs	r3, #8
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	483b      	ldr	r0, [pc, #236]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80008fe:	f000 fc49 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 800091a:	f000 fc3b 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	482d      	ldr	r0, [pc, #180]	; (80009f0 <MX_GPIO_Init+0x1e8>)
 800093a:	f000 fc2b 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093e:	2301      	movs	r3, #1
 8000940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x1f0>)
 8000944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <MX_GPIO_Init+0x1f4>)
 8000952:	f000 fc1f 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000956:	2304      	movs	r3, #4
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4825      	ldr	r0, [pc, #148]	; (8000a00 <MX_GPIO_Init+0x1f8>)
 800096a:	f000 fc13 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800096e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000980:	2305      	movs	r3, #5
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	481d      	ldr	r0, [pc, #116]	; (8000a00 <MX_GPIO_Init+0x1f8>)
 800098c:	f000 fc02 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000990:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000994:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x1ec>)
 80009aa:	f000 fbf3 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_GPIO_Init+0x1ec>)
 80009c2:	f000 fbe7 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_GPIO_Init+0x1f0>)
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0x1e4>)
 80009da:	f000 fbdb 	bl	8001194 <HAL_GPIO_Init>

}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40021000 	.word	0x40021000
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020c00 	.word	0x40020c00
 80009f8:	10120000 	.word	0x10120000
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020400 	.word	0x40020400

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <Error_Handler+0x6>

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a4a:	2007      	movs	r0, #7
 8000a4c:	f000 fb30 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <HAL_I2C_MspInit+0xa4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d13b      	bne.n	8000af6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a9a:	23c0      	movs	r3, #192	; 0xc0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4814      	ldr	r0, [pc, #80]	; (8000b08 <HAL_I2C_MspInit+0xac>)
 8000ab6:	f000 fb6d 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_I2C_MspInit+0xa8>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201f      	movs	r0, #31
 8000adc:	f000 faf3 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ae0:	201f      	movs	r0, #31
 8000ae2:	f000 fb0c 	bl	80010fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2020      	movs	r0, #32
 8000aec:	f000 faeb 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000af0:	2020      	movs	r0, #32
 8000af2:	f000 fb04 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020400 	.word	0x40020400

08000b0c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <HAL_I2S_MspInit+0xc0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d14a      	bne.n	8000bc4 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a26      	ldr	r2, [pc, #152]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_I2S_MspInit+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b82:	2310      	movs	r3, #16
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b92:	2306      	movs	r3, #6
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <HAL_I2S_MspInit+0xc8>)
 8000b9e:	f000 faf9 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_I2S_MspInit+0xcc>)
 8000bc0:	f000 fae8 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	40020800 	.word	0x40020800

08000bdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_SPI_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c36:	23e0      	movs	r3, #224	; 0xe0
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c46:	2305      	movs	r3, #5
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_SPI_MspInit+0x8c>)
 8000c52:	f000 fa9f 	bl	8001194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8e8 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <I2C1_EV_IRQHandler+0x10>)
 8000cc6:	f002 fb03 	bl	80032d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c0 	.word	0x200000c0

08000cd4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <I2C1_ER_IRQHandler+0x10>)
 8000cda:	f002 fc66 	bl	80035aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000c0 	.word	0x200000c0

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f000 feaf 	bl	8001a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000594 	.word	0x20000594

08000cfc <_sbrk>:
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
 8000d2c:	f008 fb3a 	bl	80093a4 <__errno>
 8000d30:	4602      	mov	r2, r0
 8000d32:	230c      	movs	r3, #12
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	200000ac 	.word	0x200000ac
 8000d64:	20000860 	.word	0x20000860

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SystemInit+0x28>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <SystemInit+0x28>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SystemInit+0x28>)
 8000d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d82:	609a      	str	r2, [r3, #8]
#endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x14>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x18>)
 8000d9e:	585b      	ldr	r3, [r3, r1]
 8000da0:	5043      	str	r3, [r0, r1]
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x1c>)
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x20>)
 8000da8:	1842      	adds	r2, r0, r1
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x24>)
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
 8000db2:	2300      	movs	r3, #0
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <LoopFillZerobss+0x28>)
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>
 8000dbe:	f7ff ffd3 	bl	8000d68 <SystemInit>
 8000dc2:	f008 faf5 	bl	80093b0 <__libc_init_array>
 8000dc6:	f7ff fbdb 	bl	8000580 <main>
 8000dca:	4770      	bx	lr
 8000dcc:	20020000 	.word	0x20020000
 8000dd0:	080095e0 	.word	0x080095e0
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000090 	.word	0x20000090
 8000ddc:	20000090 	.word	0x20000090
 8000de0:	2000085c 	.word	0x2000085c

08000de4 <ADC_IRQHandler>:
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94d 	bl	80010b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fdf6 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f965 	bl	800111a <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92d 	bl	80010c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200001b8 	.word	0x200001b8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200001b8 	.word	0x200001b8

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_Delay+0x40>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	; (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	; (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	; (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	; 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800107c:	d301      	bcc.n	8001082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107e:	2301      	movs	r3, #1
 8001080:	e00f      	b.n	80010a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <SysTick_Config+0x40>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108a:	210f      	movs	r1, #15
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f7ff ff8e 	bl	8000fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x40>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff29 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b086      	sub	sp, #24
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d8:	f7ff ff3e 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68b9      	ldr	r1, [r7, #8]
 80010e2:	6978      	ldr	r0, [r7, #20]
 80010e4:	f7ff ff8e 	bl	8001004 <NVIC_EncodePriority>
 80010e8:	4602      	mov	r2, r0
 80010ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff5d 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	4603      	mov	r3, r0
 8001106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff31 	bl	8000f74 <__NVIC_EnableIRQ>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa2 	bl	800106c <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d004      	beq.n	8001150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e00c      	b.n	800116a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2205      	movs	r2, #5
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e16b      	b.n	8001488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 815a 	bne.w	8001482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d00b      	beq.n	80011ee <HAL_GPIO_Init+0x5a>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d130      	bne.n	8001250 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0xfc>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b12      	cmp	r3, #18
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80b4 	beq.w	8001482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_GPIO_Init+0x308>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x308>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_GPIO_Init+0x308>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <HAL_GPIO_Init+0x310>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x226>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a50      	ldr	r2, [pc, #320]	; (80014a8 <HAL_GPIO_Init+0x314>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x222>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	; (80014ac <HAL_GPIO_Init+0x318>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x21e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_GPIO_Init+0x31c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <HAL_GPIO_Init+0x320>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x216>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_GPIO_Init+0x324>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x212>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <HAL_GPIO_Init+0x328>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_GPIO_Init+0x32c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20a>
 800139a:	2307      	movs	r3, #7
 800139c:	e00e      	b.n	80013bc <HAL_GPIO_Init+0x228>
 800139e:	2308      	movs	r3, #8
 80013a0:	e00c      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a2:	2306      	movs	r3, #6
 80013a4:	e00a      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013a6:	2305      	movs	r3, #5
 80013a8:	e008      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013aa:	2304      	movs	r3, #4
 80013ac:	e006      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ae:	2303      	movs	r3, #3
 80013b0:	e004      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <HAL_GPIO_Init+0x228>
 80013ba:	2300      	movs	r3, #0
 80013bc:	69fa      	ldr	r2, [r7, #28]
 80013be:	f002 0203 	and.w	r2, r2, #3
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4093      	lsls	r3, r2
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	4934      	ldr	r1, [pc, #208]	; (80014a0 <HAL_GPIO_Init+0x30c>)
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013da:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <HAL_GPIO_Init+0x330>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fe:	4a31      	ldr	r2, [pc, #196]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001404:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001428:	4a26      	ldr	r2, [pc, #152]	; (80014c4 <HAL_GPIO_Init+0x330>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <HAL_GPIO_Init+0x330>)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_GPIO_Init+0x330>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800147c:	4a11      	ldr	r2, [pc, #68]	; (80014c4 <HAL_GPIO_Init+0x330>)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3301      	adds	r3, #1
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b0f      	cmp	r3, #15
 800148c:	f67f ae90 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001490:	bf00      	nop
 8001492:	3724      	adds	r7, #36	; 0x24
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40023800 	.word	0x40023800
 80014a0:	40013800 	.word	0x40013800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	40021c00 	.word	0x40021c00
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	807b      	strh	r3, [r7, #2]
 80014d4:	4613      	mov	r3, r2
 80014d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d8:	787b      	ldrb	r3, [r7, #1]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e4:	e003      	b.n	80014ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	041a      	lsls	r2, r3, #16
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	619a      	str	r2, [r3, #24]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	887b      	ldrh	r3, [r7, #2]
 800150c:	401a      	ands	r2, r3
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	429a      	cmp	r2, r3
 8001512:	d104      	bne.n	800151e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	041a      	lsls	r2, r3, #16
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800151c:	e002      	b.n	8001524 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001532:	b08f      	sub	sp, #60	; 0x3c
 8001534:	af0a      	add	r7, sp, #40	; 0x28
 8001536:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e054      	b.n	80015ec <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d106      	bne.n	8001562 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f007 fc77 	bl	8008e50 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2203      	movs	r2, #3
 8001566:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f004 fe33 	bl	80061ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	687e      	ldr	r6, [r7, #4]
 800158e:	466d      	mov	r5, sp
 8001590:	f106 0410 	add.w	r4, r6, #16
 8001594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800159a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a4:	1d33      	adds	r3, r6, #4
 80015a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f004 fdad 	bl	8006108 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 fe2a 	bl	800620e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	687e      	ldr	r6, [r7, #4]
 80015c2:	466d      	mov	r5, sp
 80015c4:	f106 0410 	add.w	r4, r6, #16
 80015c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80015d8:	1d33      	adds	r3, r6, #4
 80015da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f004 ff3d 	bl	800645c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015f4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af04      	add	r7, sp, #16
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	4603      	mov	r3, r0
 8001604:	70fb      	strb	r3, [r7, #3]
 8001606:	460b      	mov	r3, r1
 8001608:	70bb      	strb	r3, [r7, #2]
 800160a:	4613      	mov	r3, r2
 800160c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001614:	2b01      	cmp	r3, #1
 8001616:	d101      	bne.n	800161c <HAL_HCD_HC_Init+0x28>
 8001618:	2302      	movs	r3, #2
 800161a:	e07f      	b.n	800171c <HAL_HCD_HC_Init+0x128>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001624:	78fa      	ldrb	r2, [r7, #3]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	440b      	add	r3, r1
 8001632:	333d      	adds	r3, #61	; 0x3d
 8001634:	2200      	movs	r2, #0
 8001636:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	440b      	add	r3, r1
 8001646:	3338      	adds	r3, #56	; 0x38
 8001648:	787a      	ldrb	r2, [r7, #1]
 800164a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	440b      	add	r3, r1
 800165a:	3340      	adds	r3, #64	; 0x40
 800165c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800165e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3339      	adds	r3, #57	; 0x39
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	440b      	add	r3, r1
 8001682:	333f      	adds	r3, #63	; 0x3f
 8001684:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001688:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800168a:	78fa      	ldrb	r2, [r7, #3]
 800168c:	78bb      	ldrb	r3, [r7, #2]
 800168e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001692:	b2d8      	uxtb	r0, r3
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	333a      	adds	r3, #58	; 0x3a
 80016a2:	4602      	mov	r2, r0
 80016a4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da0a      	bge.n	80016c4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333b      	adds	r3, #59	; 0x3b
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e009      	b.n	80016d8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	333b      	adds	r3, #59	; 0x3b
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80016d8:	78fa      	ldrb	r2, [r7, #3]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	4613      	mov	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	440b      	add	r3, r1
 80016e6:	333c      	adds	r3, #60	; 0x3c
 80016e8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80016ec:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6818      	ldr	r0, [r3, #0]
 80016f2:	787c      	ldrb	r4, [r7, #1]
 80016f4:	78ba      	ldrb	r2, [r7, #2]
 80016f6:	78f9      	ldrb	r1, [r7, #3]
 80016f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016fa:	9302      	str	r3, [sp, #8]
 80016fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	f005 f829 	bl	8006760 <USB_HC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	bd90      	pop	{r4, r7, pc}

08001724 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_HCD_HC_Halt+0x1e>
 800173e:	2302      	movs	r3, #2
 8001740:	e00f      	b.n	8001762 <HAL_HCD_HC_Halt+0x3e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fa65 	bl	8006c22 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	70fb      	strb	r3, [r7, #3]
 800177e:	460b      	mov	r3, r1
 8001780:	70bb      	strb	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	333b      	adds	r3, #59	; 0x3b
 8001796:	78ba      	ldrb	r2, [r7, #2]
 8001798:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	333f      	adds	r3, #63	; 0x3f
 80017aa:	787a      	ldrb	r2, [r7, #1]
 80017ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017ae:	7c3b      	ldrb	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d114      	bne.n	80017de <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017b4:	78fa      	ldrb	r2, [r7, #3]
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	440b      	add	r3, r1
 80017c2:	3342      	adds	r3, #66	; 0x42
 80017c4:	2203      	movs	r2, #3
 80017c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	333d      	adds	r3, #61	; 0x3d
 80017d8:	7f3a      	ldrb	r2, [r7, #28]
 80017da:	701a      	strb	r2, [r3, #0]
 80017dc:	e009      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3342      	adds	r3, #66	; 0x42
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017f2:	787b      	ldrb	r3, [r7, #1]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	f200 80d6 	bhi.w	80019a6 <HAL_HCD_HC_SubmitRequest+0x23a>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001991 	.word	0x08001991
 8001808:	0800187d 	.word	0x0800187d
 800180c:	08001907 	.word	0x08001907
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001810:	7c3b      	ldrb	r3, [r7, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	f040 80c9 	bne.w	80019aa <HAL_HCD_HC_SubmitRequest+0x23e>
 8001818:	78bb      	ldrb	r3, [r7, #2]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f040 80c5 	bne.w	80019aa <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001820:	8b3b      	ldrh	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001826:	78fa      	ldrb	r2, [r7, #3]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	440b      	add	r3, r1
 8001834:	3351      	adds	r3, #81	; 0x51
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	3351      	adds	r3, #81	; 0x51
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3342      	adds	r3, #66	; 0x42
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001864:	e0a1      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3342      	adds	r3, #66	; 0x42
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
      break;
 800187a:	e096      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d120      	bne.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	3351      	adds	r3, #81	; 0x51
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	440b      	add	r3, r1
 80018a6:	3342      	adds	r3, #66	; 0x42
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018ac:	e07e      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3342      	adds	r3, #66	; 0x42
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e073      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	440b      	add	r3, r1
 80018d2:	3350      	adds	r3, #80	; 0x50
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	3342      	adds	r3, #66	; 0x42
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e05d      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	440b      	add	r3, r1
 80018fe:	3342      	adds	r3, #66	; 0x42
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
      break;
 8001904:	e052      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d120      	bne.n	800194e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	440b      	add	r3, r1
 800191a:	3351      	adds	r3, #81	; 0x51
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	440b      	add	r3, r1
 8001930:	3342      	adds	r3, #66	; 0x42
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001936:	e039      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3342      	adds	r3, #66	; 0x42
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
      break;
 800194c:	e02e      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3350      	adds	r3, #80	; 0x50
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3342      	adds	r3, #66	; 0x42
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
      break;
 8001978:	e018      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	3342      	adds	r3, #66	; 0x42
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e00d      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3342      	adds	r3, #66	; 0x42
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
      break;
 80019a4:	e002      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80019aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3344      	adds	r3, #68	; 0x44
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	8b39      	ldrh	r1, [r7, #24]
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4403      	add	r3, r0
 80019d0:	3348      	adds	r3, #72	; 0x48
 80019d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	440b      	add	r3, r1
 80019e2:	335c      	adds	r3, #92	; 0x5c
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	440b      	add	r3, r1
 80019f6:	334c      	adds	r3, #76	; 0x4c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	3339      	adds	r3, #57	; 0x39
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	440b      	add	r3, r1
 8001a1e:	335d      	adds	r3, #93	; 0x5d
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	3338      	adds	r3, #56	; 0x38
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	18d1      	adds	r1, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f004 ff98 	bl	8006974 <USB_HC_StartXfer>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f004 fcb5 	bl	80063d6 <USB_GetMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 80ef 	bne.w	8001c52 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 fc99 	bl	80063b0 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80e5 	beq.w	8001c50 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fc90 	bl	80063b0 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9a:	d104      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f004 fc80 	bl	80063b0 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aba:	d104      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f004 fc70 	bl	80063b0 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ada:	d104      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 fc60 	bl	80063b0 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f004 fc52 	bl	80063b0 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b16:	d115      	bne.n	8001b44 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f007 fa0a 	bl	8008f4c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 fd48 	bl	80065d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f004 fc31 	bl	80063b0 <USB_ReadInterrupts>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b58:	d102      	bne.n	8001b60 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f001 f966 	bl	8002e2c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 fc23 	bl	80063b0 <USB_ReadInterrupts>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d106      	bne.n	8001b82 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f007 f9cd 	bl	8008f14 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2208      	movs	r2, #8
 8001b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fc12 	bl	80063b0 <USB_ReadInterrupts>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b96:	d138      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f005 f82f 	bl	8006c00 <USB_HC_ReadInterrupt>
 8001ba2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e025      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d018      	beq.n	8001bf0 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd4:	d106      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f8cf 	bl	8001d80 <HCD_HC_IN_IRQHandler>
 8001be2:	e005      	b.n	8001bf0 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4619      	mov	r1, r3
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fcfd 	bl	80025ea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3d4      	bcc.n	8001baa <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fbce 	bl	80063b0 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 0310 	and.w	r3, r3, #16
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d101      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x1d2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_HCD_IRQHandler+0x1d4>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d014      	beq.n	8001c52 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699a      	ldr	r2, [r3, #24]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0210 	bic.w	r2, r2, #16
 8001c36:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f001 f84b 	bl	8002cd4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699a      	ldr	r2, [r3, #24]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0210 	orr.w	r2, r2, #16
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	e000      	b.n	8001c52 <HAL_HCD_IRQHandler+0x202>
      return;
 8001c50:	bf00      	nop
    }
  }
}
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_HCD_Start+0x16>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e013      	b.n	8001c96 <HAL_HCD_Start+0x3e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 faa5 	bl	80061ca <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fd08 	bl	800669c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_HCD_Stop+0x16>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e00d      	b.n	8001cd0 <HAL_HCD_Stop+0x32>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f005 f8e9 	bl	8006e98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f004 fcaf 	bl	8006648 <USB_ResetPort>
 8001cea:	4603      	mov	r3, r0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	335c      	adds	r3, #92	; 0x5c
 8001d10:	781b      	ldrb	r3, [r3, #0]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	334c      	adds	r3, #76	; 0x4c
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f004 fcf1 	bl	800673c <USB_GetCurrentFrame>
 8001d5a:	4603      	mov	r3, r0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 fccc 	bl	800670e <USB_GetHostSpeed>
 8001d76:	4603      	mov	r3, r0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d119      	bne.n	8001de4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	015a      	lsls	r2, r3, #5
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4413      	add	r3, r2
 8001dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	0151      	lsls	r1, r2, #5
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	60d3      	str	r3, [r2, #12]
 8001de2:	e0ce      	b.n	8001f82 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dfa:	d12c      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	335d      	adds	r3, #93	; 0x5d
 8001e20:	2207      	movs	r2, #7
 8001e22:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	0151      	lsls	r1, r2, #5
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	440a      	add	r2, r1
 8001e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 fee7 	bl	8006c22 <USB_HC_Halt>
 8001e54:	e095      	b.n	8001f82 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d109      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	461a      	mov	r2, r3
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	6093      	str	r3, [r2, #8]
 8001e7e:	e080      	b.n	8001f82 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d134      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	0151      	lsls	r1, r2, #5
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	335d      	adds	r3, #93	; 0x5d
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2310      	movs	r3, #16
 8001eda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	015a      	lsls	r2, r3, #5
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2308      	movs	r3, #8
 8001eec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 fe92 	bl	8006c22 <USB_HC_Halt>
 8001efe:	e040      	b.n	8001f82 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	015a      	lsls	r2, r3, #5
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4413      	add	r3, r2
 8001f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d134      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	0151      	lsls	r1, r2, #5
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	440a      	add	r2, r1
 8001f2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 fe6d 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	2310      	movs	r3, #16
 8001f58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	335d      	adds	r3, #93	; 0x5d
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	015a      	lsls	r2, r3, #5
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f98:	d122      	bne.n	8001fe0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	0151      	lsls	r1, r2, #5
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	440a      	add	r2, r1
 8001fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f004 fe2c 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fdc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001fde:	e300      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	f040 80fd 	bne.w	80021f2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3348      	adds	r3, #72	; 0x48
 8002010:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0159      	lsls	r1, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	440b      	add	r3, r1
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002024:	1ad1      	subs	r1, r2, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4403      	add	r3, r0
 8002034:	334c      	adds	r3, #76	; 0x4c
 8002036:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	335d      	adds	r3, #93	; 0x5d
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3358      	adds	r3, #88	; 0x58
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	461a      	mov	r2, r3
 800206e:	2301      	movs	r3, #1
 8002070:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	333f      	adds	r3, #63	; 0x3f
 8002098:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800209a:	2b02      	cmp	r3, #2
 800209c:	d121      	bne.n	80020e2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	0151      	lsls	r1, r2, #5
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	440a      	add	r2, r1
 80020b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f004 fdaa 	bl	8006c22 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020da:	461a      	mov	r2, r3
 80020dc:	2310      	movs	r3, #16
 80020de:	6093      	str	r3, [r2, #8]
 80020e0:	e070      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	333f      	adds	r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d12a      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	0151      	lsls	r1, r2, #5
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	440a      	add	r2, r1
 800210e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002112:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002116:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	440b      	add	r3, r1
 8002126:	335c      	adds	r3, #92	; 0x5c
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	b2d8      	uxtb	r0, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	335c      	adds	r3, #92	; 0x5c
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	4601      	mov	r1, r0
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f006 ff0e 	bl	8008f68 <HAL_HCD_HC_NotifyURBChange_Callback>
 800214c:	e03a      	b.n	80021c4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	333f      	adds	r3, #63	; 0x3f
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d12f      	bne.n	80021c4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	335c      	adds	r3, #92	; 0x5c
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3350      	adds	r3, #80	; 0x50
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3350      	adds	r3, #80	; 0x50
 80021a0:	4602      	mov	r2, r0
 80021a2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	b2d8      	uxtb	r0, r3
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	335c      	adds	r3, #92	; 0x5c
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4601      	mov	r1, r0
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f006 fed2 	bl	8008f68 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3350      	adds	r3, #80	; 0x50
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	f083 0301 	eor.w	r3, r3, #1
 80021da:	b2d8      	uxtb	r0, r3
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	440b      	add	r3, r1
 80021ea:	3350      	adds	r3, #80	; 0x50
 80021ec:	4602      	mov	r2, r0
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	e1f7      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	f040 811a 	bne.w	800243e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	0151      	lsls	r1, r2, #5
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	440a      	add	r2, r1
 8002220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002224:	f023 0302 	bic.w	r3, r3, #2
 8002228:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	335d      	adds	r3, #93	; 0x5d
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d10a      	bne.n	8002256 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e0d9      	b.n	800240a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	335d      	adds	r3, #93	; 0x5d
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b05      	cmp	r3, #5
 800226a:	d10a      	bne.n	8002282 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	335c      	adds	r3, #92	; 0x5c
 800227c:	2205      	movs	r2, #5
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e0c3      	b.n	800240a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68fa      	ldr	r2, [r7, #12]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	335d      	adds	r3, #93	; 0x5d
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d00a      	beq.n	80022ae <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	335d      	adds	r3, #93	; 0x5d
 80022a8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d156      	bne.n	800235c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3358      	adds	r3, #88	; 0x58
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1c59      	adds	r1, r3, #1
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4403      	add	r3, r0
 80022d0:	3358      	adds	r3, #88	; 0x58
 80022d2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	3358      	adds	r3, #88	; 0x58
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d914      	bls.n	8002314 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3358      	adds	r3, #88	; 0x58
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	440b      	add	r3, r1
 800230c:	335c      	adds	r3, #92	; 0x5c
 800230e:	2204      	movs	r2, #4
 8002310:	701a      	strb	r2, [r3, #0]
 8002312:	e009      	b.n	8002328 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	440b      	add	r3, r1
 8002322:	335c      	adds	r3, #92	; 0x5c
 8002324:	2202      	movs	r2, #2
 8002326:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800233e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002346:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e056      	b.n	800240a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	335d      	adds	r3, #93	; 0x5d
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d123      	bne.n	80023ba <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	335c      	adds	r3, #92	; 0x5c
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800239c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023a4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	461a      	mov	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e027      	b.n	800240a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	440b      	add	r3, r1
 80023c8:	335d      	adds	r3, #93	; 0x5d
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	d11c      	bne.n	800240a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	440b      	add	r3, r1
 80023de:	3358      	adds	r3, #88	; 0x58
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	1c59      	adds	r1, r3, #1
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4403      	add	r3, r0
 80023f2:	3358      	adds	r3, #88	; 0x58
 80023f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	335c      	adds	r3, #92	; 0x5c
 8002406:	2204      	movs	r2, #4
 8002408:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	015a      	lsls	r2, r3, #5
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002416:	461a      	mov	r2, r3
 8002418:	2302      	movs	r3, #2
 800241a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	b2d8      	uxtb	r0, r3
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	335c      	adds	r3, #92	; 0x5c
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	4601      	mov	r1, r0
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f006 fd96 	bl	8008f68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800243c:	e0d1      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d13e      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	0151      	lsls	r1, r2, #5
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	440a      	add	r2, r1
 800246a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	440b      	add	r3, r1
 8002482:	3358      	adds	r3, #88	; 0x58
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1c59      	adds	r1, r3, #1
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4403      	add	r3, r0
 8002496:	3358      	adds	r3, #88	; 0x58
 8002498:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	335d      	adds	r3, #93	; 0x5d
 80024aa:	2206      	movs	r2, #6
 80024ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f004 fbb2 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	461a      	mov	r2, r3
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	6093      	str	r3, [r2, #8]
}
 80024d0:	e087      	b.n	80025e2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d17c      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	333f      	adds	r3, #63	; 0x3f
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d122      	bne.n	8002544 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	3358      	adds	r3, #88	; 0x58
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	0151      	lsls	r1, r2, #5
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	440a      	add	r2, r1
 8002528:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fb70 	bl	8006c22 <USB_HC_Halt>
 8002542:	e045      	b.n	80025d0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	440b      	add	r3, r1
 8002552:	333f      	adds	r3, #63	; 0x3f
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	440b      	add	r3, r1
 8002568:	333f      	adds	r3, #63	; 0x3f
 800256a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800256c:	2b02      	cmp	r3, #2
 800256e:	d12f      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	3358      	adds	r3, #88	; 0x58
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d121      	bne.n	80025d0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	335d      	adds	r3, #93	; 0x5d
 800259c:	2203      	movs	r2, #3
 800259e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	0151      	lsls	r1, r2, #5
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	440a      	add	r2, r1
 80025b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f004 fb29 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	015a      	lsls	r2, r3, #5
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4413      	add	r3, r2
 80025d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025dc:	461a      	mov	r2, r3
 80025de:	2310      	movs	r3, #16
 80025e0:	6093      	str	r3, [r2, #8]
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	460b      	mov	r3, r1
 80025f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b04      	cmp	r3, #4
 8002618:	d119      	bne.n	800264e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	461a      	mov	r2, r3
 8002628:	2304      	movs	r3, #4
 800262a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	440a      	add	r2, r1
 8002642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800264c:	e33e      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d141      	bne.n	80026e8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2320      	movs	r3, #32
 8002674:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	333d      	adds	r3, #61	; 0x3d
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	f040 831f 	bne.w	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	333d      	adds	r3, #61	; 0x3d
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	335c      	adds	r3, #92	; 0x5c
 80026b2:	2202      	movs	r2, #2
 80026b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	0151      	lsls	r1, r2, #5
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	440a      	add	r2, r1
 80026cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f004 fa9e 	bl	8006c22 <USB_HC_Halt>
}
 80026e6:	e2f1      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b40      	cmp	r3, #64	; 0x40
 80026fc:	d13f      	bne.n	800277e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	335d      	adds	r3, #93	; 0x5d
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	333d      	adds	r3, #61	; 0x3d
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3358      	adds	r3, #88	; 0x58
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	015a      	lsls	r2, r3, #5
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4413      	add	r3, r2
 8002742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	0151      	lsls	r1, r2, #5
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	440a      	add	r2, r1
 8002750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fa5c 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	461a      	mov	r2, r3
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	6093      	str	r3, [r2, #8]
}
 800277c:	e2a6      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002794:	d122      	bne.n	80027dc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	0151      	lsls	r1, r2, #5
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	440a      	add	r2, r1
 80027ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 fa2e 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	461a      	mov	r2, r3
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	6093      	str	r3, [r2, #8]
}
 80027da:	e277      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d135      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	3358      	adds	r3, #88	; 0x58
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	440a      	add	r2, r1
 800281c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f004 f9f6 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	440b      	add	r3, r1
 8002856:	335d      	adds	r3, #93	; 0x5d
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	e236      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b08      	cmp	r3, #8
 8002872:	d12b      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	461a      	mov	r2, r3
 8002882:	2308      	movs	r3, #8
 8002884:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	0151      	lsls	r1, r2, #5
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	440a      	add	r2, r1
 800289c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f004 f9b6 	bl	8006c22 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	335d      	adds	r3, #93	; 0x5d
 80028c6:	2205      	movs	r2, #5
 80028c8:	701a      	strb	r2, [r3, #0]
}
 80028ca:	e1ff      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d155      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3358      	adds	r3, #88	; 0x58
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	335d      	adds	r3, #93	; 0x5d
 8002906:	2203      	movs	r2, #3
 8002908:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	333d      	adds	r3, #61	; 0x3d
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d114      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	333c      	adds	r3, #60	; 0x3c
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	333d      	adds	r3, #61	; 0x3d
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f004 f954 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002986:	461a      	mov	r2, r3
 8002988:	2310      	movs	r3, #16
 800298a:	6093      	str	r3, [r2, #8]
}
 800298c:	e19e      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a0:	2b80      	cmp	r3, #128	; 0x80
 80029a2:	d12b      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 f927 	bl	8006c22 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	335d      	adds	r3, #93	; 0x5d
 80029e4:	2206      	movs	r2, #6
 80029e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	461a      	mov	r2, r3
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	6093      	str	r3, [r2, #8]
}
 80029fa:	e167      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d135      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a2e:	f043 0302 	orr.w	r3, r3, #2
 8002a32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f004 f8ef 	bl	8006c22 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	461a      	mov	r2, r3
 8002a52:	2310      	movs	r3, #16
 8002a54:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a62:	461a      	mov	r2, r3
 8002a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	335d      	adds	r3, #93	; 0x5d
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	701a      	strb	r2, [r3, #0]
}
 8002a7e:	e125      	b.n	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	f040 811a 	bne.w	8002ccc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	0151      	lsls	r1, r2, #5
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	440a      	add	r2, r1
 8002aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab2:	f023 0302 	bic.w	r3, r3, #2
 8002ab6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4613      	mov	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	335d      	adds	r3, #93	; 0x5d
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d137      	bne.n	8002b3e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	335c      	adds	r3, #92	; 0x5c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d00b      	beq.n	8002b10 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	333f      	adds	r3, #63	; 0x3f
 8002b08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	f040 80c5 	bne.w	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3351      	adds	r3, #81	; 0x51
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3351      	adds	r3, #81	; 0x51
 8002b38:	4602      	mov	r2, r0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e0ad      	b.n	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	335d      	adds	r3, #93	; 0x5d
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d10a      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	335c      	adds	r3, #92	; 0x5c
 8002b64:	2202      	movs	r2, #2
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e097      	b.n	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	335d      	adds	r3, #93	; 0x5d
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d10a      	bne.n	8002b96 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2202      	movs	r2, #2
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e081      	b.n	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335d      	adds	r3, #93	; 0x5d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b05      	cmp	r3, #5
 8002baa:	d10a      	bne.n	8002bc2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	701a      	strb	r2, [r3, #0]
 8002bc0:	e06b      	b.n	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	335d      	adds	r3, #93	; 0x5d
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d00a      	beq.n	8002bee <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	335d      	adds	r3, #93	; 0x5d
 8002be8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d155      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3358      	adds	r3, #88	; 0x58
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4613      	mov	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4403      	add	r3, r0
 8002c10:	3358      	adds	r3, #88	; 0x58
 8002c12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	440b      	add	r3, r1
 8002c22:	3358      	adds	r3, #88	; 0x58
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d914      	bls.n	8002c54 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	3358      	adds	r3, #88	; 0x58
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	335c      	adds	r3, #92	; 0x5c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e009      	b.n	8002c68 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	335c      	adds	r3, #92	; 0x5c
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	2302      	movs	r3, #2
 8002caa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	b2d8      	uxtb	r0, r3
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	335c      	adds	r3, #92	; 0x5c
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f006 f94e 	bl	8008f68 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	0c5b      	lsrs	r3, r3, #17
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d08:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d003      	beq.n	8002d18 <HCD_RXQLVL_IRQHandler+0x44>
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	f000 8082 	beq.w	8002e1a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d16:	e083      	b.n	8002e20 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d07f      	beq.n	8002e1e <HCD_RXQLVL_IRQHandler+0x14a>
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3344      	adds	r3, #68	; 0x44
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d074      	beq.n	8002e1e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	3344      	adds	r3, #68	; 0x44
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	b292      	uxth	r2, r2
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f003 fb05 	bl	800635e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3344      	adds	r3, #68	; 0x44
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	18d1      	adds	r1, r2, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	4403      	add	r3, r0
 8002d78:	3344      	adds	r3, #68	; 0x44
 8002d7a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	440b      	add	r3, r1
 8002d8a:	334c      	adds	r3, #76	; 0x4c
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	18d1      	adds	r1, r2, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4403      	add	r3, r0
 8002da0:	334c      	adds	r3, #76	; 0x4c
 8002da2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HCD_RXQLVL_IRQHandler+0x154>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d031      	beq.n	8002e1e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002dd8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3350      	adds	r3, #80	; 0x50
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f083 0301 	eor.w	r3, r3, #1
 8002e02:	b2d8      	uxtb	r0, r3
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	3350      	adds	r3, #80	; 0x50
 8002e14:	4602      	mov	r2, r0
 8002e16:	701a      	strb	r2, [r3, #0]
      break;
 8002e18:	e001      	b.n	8002e1e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e000      	b.n	8002e20 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002e1e:	bf00      	nop
  }
}
 8002e20:	bf00      	nop
 8002e22:	3728      	adds	r7, #40	; 0x28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	1ff80000 	.word	0x1ff80000

08002e2c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e58:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d10b      	bne.n	8002e7c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d102      	bne.n	8002e74 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f006 f85e 	bl	8008f30 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f043 0302 	orr.w	r3, r3, #2
 8002e7a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d132      	bne.n	8002eec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d126      	bne.n	8002ee6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d113      	bne.n	8002ec8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ea6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eaa:	d106      	bne.n	8002eba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fb8e 	bl	80065d4 <USB_InitFSLSPClkSel>
 8002eb8:	e011      	b.n	8002ede <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f003 fb87 	bl	80065d4 <USB_InitFSLSPClkSel>
 8002ec6:	e00a      	b.n	8002ede <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002edc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f006 f850 	bl	8008f84 <HAL_HCD_PortEnabled_Callback>
 8002ee4:	e002      	b.n	8002eec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f006 f85a 	bl	8008fa0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d103      	bne.n	8002efe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f043 0320 	orr.w	r3, r3, #32
 8002efc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	6013      	str	r3, [r2, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e11f      	b.n	8003166 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7fd fd8e 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f78:	f002 ff10 	bl	8005d9c <HAL_RCC_GetPCLK1Freq>
 8002f7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a7b      	ldr	r2, [pc, #492]	; (8003170 <HAL_I2C_Init+0x25c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d807      	bhi.n	8002f98 <HAL_I2C_Init+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_I2C_Init+0x260>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	bf94      	ite	ls
 8002f90:	2301      	movls	r3, #1
 8002f92:	2300      	movhi	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	e006      	b.n	8002fa6 <HAL_I2C_Init+0x92>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4a77      	ldr	r2, [pc, #476]	; (8003178 <HAL_I2C_Init+0x264>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bf94      	ite	ls
 8002fa0:	2301      	movls	r3, #1
 8002fa2:	2300      	movhi	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0db      	b.n	8003166 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4a72      	ldr	r2, [pc, #456]	; (800317c <HAL_I2C_Init+0x268>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	4a64      	ldr	r2, [pc, #400]	; (8003170 <HAL_I2C_Init+0x25c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d802      	bhi.n	8002fe8 <HAL_I2C_Init+0xd4>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	e009      	b.n	8002ffc <HAL_I2C_Init+0xe8>
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fee:	fb02 f303 	mul.w	r3, r2, r3
 8002ff2:	4a63      	ldr	r2, [pc, #396]	; (8003180 <HAL_I2C_Init+0x26c>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800300e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4956      	ldr	r1, [pc, #344]	; (8003170 <HAL_I2C_Init+0x25c>)
 8003018:	428b      	cmp	r3, r1
 800301a:	d80d      	bhi.n	8003038 <HAL_I2C_Init+0x124>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e59      	subs	r1, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fbb1 f3f3 	udiv	r3, r1, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	2b04      	cmp	r3, #4
 8003032:	bf38      	it	cc
 8003034:	2304      	movcc	r3, #4
 8003036:	e04f      	b.n	80030d8 <HAL_I2C_Init+0x1c4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d111      	bne.n	8003064 <HAL_I2C_Init+0x150>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	440b      	add	r3, r1
 800304e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003052:	3301      	adds	r3, #1
 8003054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf0c      	ite	eq
 800305c:	2301      	moveq	r3, #1
 800305e:	2300      	movne	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e012      	b.n	800308a <HAL_I2C_Init+0x176>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1e58      	subs	r0, r3, #1
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6859      	ldr	r1, [r3, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	0099      	lsls	r1, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	fbb0 f3f3 	udiv	r3, r0, r3
 800307a:	3301      	adds	r3, #1
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf0c      	ite	eq
 8003084:	2301      	moveq	r3, #1
 8003086:	2300      	movne	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Init+0x17e>
 800308e:	2301      	movs	r3, #1
 8003090:	e022      	b.n	80030d8 <HAL_I2C_Init+0x1c4>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10e      	bne.n	80030b8 <HAL_I2C_Init+0x1a4>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e58      	subs	r0, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	460b      	mov	r3, r1
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	440b      	add	r3, r1
 80030a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b6:	e00f      	b.n	80030d8 <HAL_I2C_Init+0x1c4>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e58      	subs	r0, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	0099      	lsls	r1, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69da      	ldr	r2, [r3, #28]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003106:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6911      	ldr	r1, [r2, #16]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68d2      	ldr	r2, [r2, #12]
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6812      	ldr	r2, [r2, #0]
 8003118:	430b      	orrs	r3, r1
 800311a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	000186a0 	.word	0x000186a0
 8003174:	001e847f 	.word	0x001e847f
 8003178:	003d08ff 	.word	0x003d08ff
 800317c:	431bde83 	.word	0x431bde83
 8003180:	10624dd3 	.word	0x10624dd3

08003184 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	d158      	bne.n	8003250 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <HAL_I2C_Slave_Receive_IT+0x26>
 80031a4:	88fb      	ldrh	r3, [r7, #6]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e051      	b.n	8003252 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_I2C_Slave_Receive_IT+0x38>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e04a      	b.n	8003252 <HAL_I2C_Slave_Receive_IT+0xce>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d007      	beq.n	80031e2 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0201 	orr.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2222      	movs	r2, #34	; 0x22
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003232:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800324a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	e000      	b.n	8003252 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8003250:	2302      	movs	r3, #2
  }
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	ffff0000 	.word	0xffff0000

08003264 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d124      	bne.n	80032c2 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2228      	movs	r2, #40	; 0x28
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d007      	beq.n	800329e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ac:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032bc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032c2:	2302      	movs	r3, #2
  }
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80032fa:	7bfb      	ldrb	r3, [r7, #15]
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d003      	beq.n	8003308 <HAL_I2C_EV_IRQHandler+0x38>
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	f040 80bd 	bne.w	8003482 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_I2C_EV_IRQHandler+0x6e>
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003328:	d003      	beq.n	8003332 <HAL_I2C_EV_IRQHandler+0x62>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003330:	d101      	bne.n	8003336 <HAL_I2C_EV_IRQHandler+0x66>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_I2C_EV_IRQHandler+0x68>
 8003336:	2300      	movs	r3, #0
 8003338:	2b01      	cmp	r3, #1
 800333a:	f000 812e 	beq.w	800359a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00c      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x92>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	0a5b      	lsrs	r3, r3, #9
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f001 fc2b 	bl	8004bb0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fd38 	bl	8003dd0 <I2C_Master_SB>
 8003360:	e08e      	b.n	8003480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	08db      	lsrs	r3, r3, #3
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0xb2>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	0a5b      	lsrs	r3, r3, #9
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fdae 	bl	8003edc <I2C_Master_ADD10>
 8003380:	e07e      	b.n	8003480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0a5b      	lsrs	r3, r3, #9
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fdc8 	bl	8003f30 <I2C_Master_ADDR>
 80033a0:	e06e      	b.n	8003480 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d037      	beq.n	800341e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	f000 80ef 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	09db      	lsrs	r3, r3, #7
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00f      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x11c>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	0a9b      	lsrs	r3, r3, #10
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_I2C_EV_IRQHandler+0x11c>
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f9c5 	bl	8003774 <I2C_MasterTransmit_TXE>
 80033ea:	e049      	b.n	8003480 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80d2 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	0a5b      	lsrs	r3, r3, #9
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80cb 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b10      	cmp	r3, #16
 800340c:	d103      	bne.n	8003416 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fa4c 	bl	80038ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003414:	e0c3      	b.n	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fab0 	bl	800397c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800341c:	e0bf      	b.n	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342c:	f000 80b7 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	099b      	lsrs	r3, r3, #6
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00f      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x18c>
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	0a9b      	lsrs	r3, r3, #10
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d009      	beq.n	800345c <HAL_I2C_EV_IRQHandler+0x18c>
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb20 	bl	8003a9a <I2C_MasterReceive_RXNE>
 800345a:	e011      	b.n	8003480 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 809a 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	0a5b      	lsrs	r3, r3, #9
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8093 	beq.w	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fbbf 	bl	8003bfc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800347e:	e08e      	b.n	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003480:	e08d      	b.n	800359e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e007      	b.n	80034a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x206>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	0a5b      	lsrs	r3, r3, #9
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00c      	beq.n	80034d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 ff7d 	bl	80043ce <I2C_Slave_ADDR>
 80034d4:	e066      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d009      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x226>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	0a5b      	lsrs	r3, r3, #9
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 ffb2 	bl	8004458 <I2C_Slave_STOPF>
 80034f4:	e056      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034f6:	7bbb      	ldrb	r3, [r7, #14]
 80034f8:	2b21      	cmp	r3, #33	; 0x21
 80034fa:	d002      	beq.n	8003502 <HAL_I2C_EV_IRQHandler+0x232>
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	2b29      	cmp	r3, #41	; 0x29
 8003500:	d125      	bne.n	800354e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	09db      	lsrs	r3, r3, #7
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00f      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x25e>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	0a9b      	lsrs	r3, r3, #10
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_I2C_EV_IRQHandler+0x25e>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fe93 	bl	8004252 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800352c:	e039      	b.n	80035a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	089b      	lsrs	r3, r3, #2
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d033      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	0a5b      	lsrs	r3, r3, #9
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d02d      	beq.n	80035a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fec0 	bl	80042cc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800354c:	e029      	b.n	80035a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00f      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x2aa>
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0a9b      	lsrs	r3, r3, #10
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_I2C_EV_IRQHandler+0x2aa>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fecb 	bl	800430e <I2C_SlaveReceive_RXNE>
 8003578:	e014      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	0a5b      	lsrs	r3, r3, #9
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fef9 	bl	800438a <I2C_SlaveReceive_BTF>
 8003598:	e004      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80035a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08a      	sub	sp, #40	; 0x28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00e      	beq.n	80035f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80035f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	0a5b      	lsrs	r3, r3, #9
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <HAL_I2C_ER_IRQHandler+0x78>
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003620:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	0a9b      	lsrs	r3, r3, #10
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d03f      	beq.n	80036ae <HAL_I2C_ER_IRQHandler+0x104>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	0a1b      	lsrs	r3, r3, #8
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d039      	beq.n	80036ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800363a:	7efb      	ldrb	r3, [r7, #27]
 800363c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003654:	7ebb      	ldrb	r3, [r7, #26]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d112      	bne.n	8003680 <HAL_I2C_ER_IRQHandler+0xd6>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <HAL_I2C_ER_IRQHandler+0xd6>
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b21      	cmp	r3, #33	; 0x21
 8003664:	d008      	beq.n	8003678 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	2b29      	cmp	r3, #41	; 0x29
 800366a:	d005      	beq.n	8003678 <HAL_I2C_ER_IRQHandler+0xce>
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	2b28      	cmp	r3, #40	; 0x28
 8003670:	d106      	bne.n	8003680 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b21      	cmp	r3, #33	; 0x21
 8003676:	d103      	bne.n	8003680 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f81d 	bl	80046b8 <I2C_Slave_AF>
 800367e:	e016      	b.n	80036ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003688:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	f043 0304 	orr.w	r3, r3, #4
 8003690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003692:	7efb      	ldrb	r3, [r7, #27]
 8003694:	2b10      	cmp	r3, #16
 8003696:	d002      	beq.n	800369e <HAL_I2C_ER_IRQHandler+0xf4>
 8003698:	7efb      	ldrb	r3, [r7, #27]
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d107      	bne.n	80036ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	0adb      	lsrs	r3, r3, #11
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	0a1b      	lsrs	r3, r3, #8
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80036d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f001 f854 	bl	8004798 <I2C_ITError>
  }
}
 80036f0:	bf00      	nop
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800378a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	2b00      	cmp	r3, #0
 8003798:	d150      	bne.n	800383c <I2C_MasterTransmit_TXE+0xc8>
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b21      	cmp	r3, #33	; 0x21
 800379e:	d14d      	bne.n	800383c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d01d      	beq.n	80037e2 <I2C_MasterTransmit_TXE+0x6e>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d01a      	beq.n	80037e2 <I2C_MasterTransmit_TXE+0x6e>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b2:	d016      	beq.n	80037e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2211      	movs	r2, #17
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff8c 	bl	80036f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e0:	e060      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003800:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2220      	movs	r2, #32
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d107      	bne.n	800382c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff7b 	bl	8003720 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800382a:	e03b      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff5f 	bl	80036f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800383a:	e033      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800383c:	7bfb      	ldrb	r3, [r7, #15]
 800383e:	2b21      	cmp	r3, #33	; 0x21
 8003840:	d005      	beq.n	800384e <I2C_MasterTransmit_TXE+0xda>
 8003842:	7bbb      	ldrb	r3, [r7, #14]
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d12d      	bne.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b22      	cmp	r3, #34	; 0x22
 800384c:	d12a      	bne.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003866:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003868:	e01c      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b40      	cmp	r3, #64	; 0x40
 8003874:	d103      	bne.n	800387e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f880 	bl	800397c <I2C_MemoryTransmit_TXE_BTF>
}
 800387c:	e012      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	781a      	ldrb	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038a2:	e7ff      	b.n	80038a4 <I2C_MasterTransmit_TXE+0x130>
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b21      	cmp	r3, #33	; 0x21
 80038c4:	d156      	bne.n	8003974 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d012      	beq.n	80038f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80038f4:	e03e      	b.n	8003974 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d01d      	beq.n	8003938 <I2C_MasterTransmit_BTF+0x8c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d01a      	beq.n	8003938 <I2C_MasterTransmit_BTF+0x8c>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003908:	d016      	beq.n	8003938 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003918:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2211      	movs	r2, #17
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff fee1 	bl	80036f8 <HAL_I2C_MasterTxCpltCallback>
}
 8003936:	e01d      	b.n	8003974 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003946:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003956:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2220      	movs	r2, #32
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff fec2 	bl	80036f8 <HAL_I2C_MasterTxCpltCallback>
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11d      	bne.n	80039d0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	2b01      	cmp	r3, #1
 800399a:	d10b      	bne.n	80039b4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	1c9a      	adds	r2, r3, #2
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80039b2:	e06e      	b.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	121b      	asrs	r3, r3, #8
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ce:	e060      	b.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10b      	bne.n	80039f0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	651a      	str	r2, [r3, #80]	; 0x50
}
 80039ee:	e050      	b.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d14c      	bne.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80039f8:	7bfb      	ldrb	r3, [r7, #15]
 80039fa:	2b22      	cmp	r3, #34	; 0x22
 80039fc:	d108      	bne.n	8003a10 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	e040      	b.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d015      	beq.n	8003a46 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b21      	cmp	r3, #33	; 0x21
 8003a1e:	d112      	bne.n	8003a46 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a44:	e025      	b.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d120      	bne.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b21      	cmp	r3, #33	; 0x21
 8003a54:	d11d      	bne.n	8003a92 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a64:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a74:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fe47 	bl	8003720 <HAL_I2C_MemTxCpltCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b22      	cmp	r3, #34	; 0x22
 8003aac:	f040 80a2 	bne.w	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d921      	bls.n	8003b02 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691a      	ldr	r2, [r3, #16]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	f040 8082 	bne.w	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afe:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b00:	e078      	b.n	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d074      	beq.n	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d002      	beq.n	8003b16 <I2C_MasterReceive_RXNE+0x7c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d16e      	bne.n	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 f818 	bl	8004b4c <I2C_WaitOnSTOPRequestThroughIT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d142      	bne.n	8003ba8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b40:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d10a      	bne.n	8003b92 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fdd2 	bl	8003734 <HAL_I2C_MemRxCpltCallback>
}
 8003b90:	e030      	b.n	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2212      	movs	r2, #18
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff fdb3 	bl	800370c <HAL_I2C_MasterRxCpltCallback>
}
 8003ba6:	e025      	b.n	8003bf4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7fc fcb7 	bl	8000562 <HAL_I2C_ErrorCallback>
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d11b      	bne.n	8003c4c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c22:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c4a:	e0bd      	b.n	8003dc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d129      	bne.n	8003caa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d00a      	beq.n	8003c82 <I2C_MasterReceive_BTF+0x86>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d007      	beq.n	8003c82 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ca8:	e08e      	b.n	8003dc8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d176      	bne.n	8003da2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d002      	beq.n	8003cc0 <I2C_MasterReceive_BTF+0xc4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d108      	bne.n	8003cd2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e019      	b.n	8003d06 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d002      	beq.n	8003cde <I2C_MasterReceive_BTF+0xe2>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d108      	bne.n	8003cf0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00a      	b.n	8003d06 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d007      	beq.n	8003d06 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d04:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d60:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10a      	bne.n	8003d8c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fcd5 	bl	8003734 <HAL_I2C_MemRxCpltCallback>
}
 8003d8a:	e01d      	b.n	8003dc8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2212      	movs	r2, #18
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fcb6 	bl	800370c <HAL_I2C_MasterRxCpltCallback>
}
 8003da0:	e012      	b.n	8003dc8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d117      	bne.n	8003e14 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dfc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dfe:	e067      	b.n	8003ed0 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]
}
 8003e12:	e05d      	b.n	8003ed0 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e1c:	d133      	bne.n	8003e86 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b21      	cmp	r3, #33	; 0x21
 8003e28:	d109      	bne.n	8003e3e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e3a:	611a      	str	r2, [r3, #16]
 8003e3c:	e008      	b.n	8003e50 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d004      	beq.n	8003e62 <I2C_Master_SB+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d032      	beq.n	8003ed0 <I2C_Master_SB+0x100>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02d      	beq.n	8003ed0 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	605a      	str	r2, [r3, #4]
}
 8003e84:	e024      	b.n	8003ed0 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10e      	bne.n	8003eac <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	11db      	asrs	r3, r3, #7
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	f003 0306 	and.w	r3, r3, #6
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f063 030f 	orn	r3, r3, #15
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	611a      	str	r2, [r3, #16]
}
 8003eaa:	e011      	b.n	8003ed0 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10d      	bne.n	8003ed0 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	11db      	asrs	r3, r3, #7
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f003 0306 	and.w	r3, r3, #6
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	f063 030e 	orn	r3, r3, #14
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <I2C_Master_ADD10+0x24>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <I2C_Master_ADD10+0x38>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d007      	beq.n	8003f24 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f22:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b091      	sub	sp, #68	; 0x44
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b22      	cmp	r3, #34	; 0x22
 8003f58:	f040 8169 	bne.w	800422e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10f      	bne.n	8003f84 <I2C_Master_ADDR+0x54>
 8003f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f68:	2b40      	cmp	r3, #64	; 0x40
 8003f6a:	d10b      	bne.n	8003f84 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	e160      	b.n	8004246 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d11d      	bne.n	8003fc8 <I2C_Master_ADDR+0x98>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f94:	d118      	bne.n	8003fc8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fba:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	651a      	str	r2, [r3, #80]	; 0x50
 8003fc6:	e13e      	b.n	8004246 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d113      	bne.n	8003ffa <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e115      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 808a 	bne.w	800411a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400c:	d137      	bne.n	800407e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402c:	d113      	bne.n	8004056 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	e0e7      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e0d3      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	2b08      	cmp	r3, #8
 8004082:	d02e      	beq.n	80040e2 <I2C_Master_ADDR+0x1b2>
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	2b20      	cmp	r3, #32
 8004088:	d02b      	beq.n	80040e2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	2b12      	cmp	r3, #18
 800408e:	d102      	bne.n	8004096 <I2C_Master_ADDR+0x166>
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	2b01      	cmp	r3, #1
 8004094:	d125      	bne.n	80040e2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b04      	cmp	r3, #4
 800409a:	d00e      	beq.n	80040ba <I2C_Master_ADDR+0x18a>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d00b      	beq.n	80040ba <I2C_Master_ADDR+0x18a>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d008      	beq.n	80040ba <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e007      	b.n	80040ca <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	e0a1      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e085      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d14d      	bne.n	80041c0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	2b04      	cmp	r3, #4
 8004128:	d016      	beq.n	8004158 <I2C_Master_ADDR+0x228>
 800412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412c:	2b02      	cmp	r3, #2
 800412e:	d013      	beq.n	8004158 <I2C_Master_ADDR+0x228>
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	2b10      	cmp	r3, #16
 8004134:	d010      	beq.n	8004158 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e007      	b.n	8004168 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004166:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004176:	d117      	bne.n	80041a8 <I2C_Master_ADDR+0x278>
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800417e:	d00b      	beq.n	8004198 <I2C_Master_ADDR+0x268>
 8004180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004182:	2b01      	cmp	r3, #1
 8004184:	d008      	beq.n	8004198 <I2C_Master_ADDR+0x268>
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	2b08      	cmp	r3, #8
 800418a:	d005      	beq.n	8004198 <I2C_Master_ADDR+0x268>
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b10      	cmp	r3, #16
 8004190:	d002      	beq.n	8004198 <I2C_Master_ADDR+0x268>
 8004192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004194:	2b20      	cmp	r3, #32
 8004196:	d107      	bne.n	80041a8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	e032      	b.n	8004226 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ce:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041de:	d117      	bne.n	8004210 <I2C_Master_ADDR+0x2e0>
 80041e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041e6:	d00b      	beq.n	8004200 <I2C_Master_ADDR+0x2d0>
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d008      	beq.n	8004200 <I2C_Master_ADDR+0x2d0>
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d005      	beq.n	8004200 <I2C_Master_ADDR+0x2d0>
 80041f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d002      	beq.n	8004200 <I2C_Master_ADDR+0x2d0>
 80041fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d107      	bne.n	8004210 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800420e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800422c:	e00b      	b.n	8004246 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	e7ff      	b.n	8004246 <I2C_Master_ADDR+0x316>
 8004246:	bf00      	nop
 8004248:	3744      	adds	r7, #68	; 0x44
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02b      	beq.n	80042c4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d114      	bne.n	80042c4 <I2C_SlaveTransmit_TXE+0x72>
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b29      	cmp	r3, #41	; 0x29
 800429e:	d111      	bne.n	80042c4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2221      	movs	r2, #33	; 0x21
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2228      	movs	r2, #40	; 0x28
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fc f936 	bl	8000530 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042c4:	bf00      	nop
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d011      	beq.n	8004302 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d02c      	beq.n	8004382 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d114      	bne.n	8004382 <I2C_SlaveReceive_RXNE+0x74>
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b2a      	cmp	r3, #42	; 0x2a
 800435c:	d111      	bne.n	8004382 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800436c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2222      	movs	r2, #34	; 0x22
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2228      	movs	r2, #40	; 0x28
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fc f8b7 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d012      	beq.n	80043c2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b01      	subs	r3, #1
 80043bc:	b29a      	uxth	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e8:	2b28      	cmp	r3, #40	; 0x28
 80043ea:	d127      	bne.n	800443c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	089b      	lsrs	r3, r3, #2
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	09db      	lsrs	r3, r3, #7
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	81bb      	strh	r3, [r7, #12]
 800441e:	e002      	b.n	8004426 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800442e:	89ba      	ldrh	r2, [r7, #12]
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc f847 	bl	80004c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800443a:	e008      	b.n	800444e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0202 	mvn.w	r2, #2
 8004444:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004476:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044b4:	d172      	bne.n	800459c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b22      	cmp	r3, #34	; 0x22
 80044ba:	d002      	beq.n	80044c2 <I2C_Slave_STOPF+0x6a>
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	2b2a      	cmp	r3, #42	; 0x2a
 80044c0:	d135      	bne.n	800452e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f043 0204 	orr.w	r2, r3, #4
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fc fe3b 	bl	8001176 <HAL_DMA_GetState>
 8004500:	4603      	mov	r3, r0
 8004502:	2b01      	cmp	r3, #1
 8004504:	d049      	beq.n	800459a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 800450c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc fe0d 	bl	8001132 <HAL_DMA_Abort_IT>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03d      	beq.n	800459a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004528:	4610      	mov	r0, r2
 800452a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800452c:	e035      	b.n	800459a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004560:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004566:	4618      	mov	r0, r3
 8004568:	f7fc fe05 	bl	8001176 <HAL_DMA_GetState>
 800456c:	4603      	mov	r3, r0
 800456e:	2b01      	cmp	r3, #1
 8004570:	d014      	beq.n	800459c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004576:	4a4e      	ldr	r2, [pc, #312]	; (80046b0 <I2C_Slave_STOPF+0x258>)
 8004578:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc fdd7 	bl	8001132 <HAL_DMA_Abort_IT>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004594:	4610      	mov	r0, r2
 8004596:	4798      	blx	r3
 8004598:	e000      	b.n	800459c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800459a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d03e      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d112      	bne.n	80045da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d112      	bne.n	800460e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f043 0204 	orr.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f8b3 	bl	8004798 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004632:	e039      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b2a      	cmp	r3, #42	; 0x2a
 8004638:	d109      	bne.n	800464e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2228      	movs	r2, #40	; 0x28
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fb ff51 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b28      	cmp	r3, #40	; 0x28
 8004658:	d111      	bne.n	800467e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <I2C_Slave_STOPF+0x25c>)
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fb ff68 	bl	800054c <HAL_I2C_ListenCpltCallback>
}
 800467c:	e014      	b.n	80046a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	2b22      	cmp	r3, #34	; 0x22
 8004684:	d002      	beq.n	800468c <I2C_Slave_STOPF+0x234>
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b22      	cmp	r3, #34	; 0x22
 800468a:	d10d      	bne.n	80046a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fb ff24 	bl	80004f0 <HAL_I2C_SlaveRxCpltCallback>
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	080049fd 	.word	0x080049fd
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d002      	beq.n	80046da <I2C_Slave_AF+0x22>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d129      	bne.n	800472e <I2C_Slave_AF+0x76>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d126      	bne.n	800472e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <I2C_Slave_AF+0xdc>)
 80046e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fb ff10 	bl	800054c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800472c:	e02e      	b.n	800478c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b21      	cmp	r3, #33	; 0x21
 8004732:	d126      	bne.n	8004782 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a17      	ldr	r2, [pc, #92]	; (8004794 <I2C_Slave_AF+0xdc>)
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800475e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004768:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fb fed8 	bl	8000530 <HAL_I2C_SlaveTxCpltCallback>
}
 8004780:	e004      	b.n	800478c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800478a:	615a      	str	r2, [r3, #20]
}
 800478c:	bf00      	nop
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047b0:	7bbb      	ldrb	r3, [r7, #14]
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d002      	beq.n	80047bc <I2C_ITError+0x24>
 80047b6:	7bbb      	ldrb	r3, [r7, #14]
 80047b8:	2b40      	cmp	r3, #64	; 0x40
 80047ba:	d10a      	bne.n	80047d2 <I2C_ITError+0x3a>
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
 80047be:	2b22      	cmp	r3, #34	; 0x22
 80047c0:	d107      	bne.n	80047d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047d8:	2b28      	cmp	r3, #40	; 0x28
 80047da:	d107      	bne.n	80047ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2228      	movs	r2, #40	; 0x28
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047ea:	e015      	b.n	8004818 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fa:	d00a      	beq.n	8004812 <I2C_ITError+0x7a>
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b60      	cmp	r3, #96	; 0x60
 8004800:	d007      	beq.n	8004812 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004826:	d162      	bne.n	80048ee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004836:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d020      	beq.n	8004888 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	4a6a      	ldr	r2, [pc, #424]	; (80049f4 <I2C_ITError+0x25c>)
 800484c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fc6d 	bl	8001132 <HAL_DMA_Abort_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 8089 	beq.w	8004972 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004882:	4610      	mov	r0, r2
 8004884:	4798      	blx	r3
 8004886:	e074      	b.n	8004972 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	4a59      	ldr	r2, [pc, #356]	; (80049f4 <I2C_ITError+0x25c>)
 800488e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4618      	mov	r0, r3
 8004896:	f7fc fc4c 	bl	8001132 <HAL_DMA_Abort_IT>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d068      	beq.n	8004972 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d10b      	bne.n	80048c6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0201 	bic.w	r2, r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048e8:	4610      	mov	r0, r2
 80048ea:	4798      	blx	r3
 80048ec:	e041      	b.n	8004972 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b60      	cmp	r3, #96	; 0x60
 80048f8:	d125      	bne.n	8004946 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004912:	2b40      	cmp	r3, #64	; 0x40
 8004914:	d10b      	bne.n	800492e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe ff02 	bl	8003748 <HAL_I2C_AbortCpltCallback>
 8004944:	e015      	b.n	8004972 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b40      	cmp	r3, #64	; 0x40
 8004952:	d10b      	bne.n	800496c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691a      	ldr	r2, [r3, #16]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fb fdf8 	bl	8000562 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10e      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d113      	bne.n	80049ec <I2C_ITError+0x254>
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b28      	cmp	r3, #40	; 0x28
 80049c8:	d110      	bne.n	80049ec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <I2C_ITError+0x260>)
 80049ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fb fdb0 	bl	800054c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	080049fd 	.word	0x080049fd
 80049f8:	ffff0000 	.word	0xffff0000

080049fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <I2C_DMAAbort+0x148>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	4a4a      	ldr	r2, [pc, #296]	; (8004b48 <I2C_DMAAbort+0x14c>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0a1a      	lsrs	r2, r3, #8
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	00da      	lsls	r2, r3, #3
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a42:	e00a      	b.n	8004a5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d0ea      	beq.n	8004a30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	2200      	movs	r2, #0
 8004a68:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	2200      	movs	r2, #0
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2200      	movs	r2, #0
 8004aae:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b60      	cmp	r3, #96	; 0x60
 8004aca:	d10e      	bne.n	8004aea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004ae2:	6978      	ldr	r0, [r7, #20]
 8004ae4:	f7fe fe30 	bl	8003748 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ae8:	e027      	b.n	8004b3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aea:	7cfb      	ldrb	r3, [r7, #19]
 8004aec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004af0:	2b28      	cmp	r3, #40	; 0x28
 8004af2:	d117      	bne.n	8004b24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2200      	movs	r2, #0
 8004b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2228      	movs	r2, #40	; 0x28
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b22:	e007      	b.n	8004b34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b34:	6978      	ldr	r0, [r7, #20]
 8004b36:	f7fb fd14 	bl	8000562 <HAL_I2C_ErrorCallback>
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000
 8004b48:	14f8b589 	.word	0x14f8b589

08004b4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	4a13      	ldr	r2, [pc, #76]	; (8004bac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0a1a      	lsrs	r2, r3, #8
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e008      	b.n	8004b9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d0e9      	beq.n	8004b6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	14f8b589 	.word	0x14f8b589

08004bb0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc0:	d103      	bne.n	8004bca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bc8:	e007      	b.n	8004bda <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bd2:	d102      	bne.n	8004bda <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e128      	b.n	8004e4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a90      	ldr	r2, [pc, #576]	; (8004e54 <HAL_I2S_Init+0x26c>)
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fb ff79 	bl	8000b0c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d060      	beq.n	8004d08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c4e:	2310      	movs	r3, #16
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e001      	b.n	8004c58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d802      	bhi.n	8004c66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c66:	2001      	movs	r0, #1
 8004c68:	f001 f98e 	bl	8005f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c6c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d125      	bne.n	8004cc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	3305      	adds	r3, #5
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e01f      	b.n	8004ce2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	3305      	adds	r3, #5
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e00e      	b.n	8004ce2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	3305      	adds	r3, #5
 8004ce0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4a5c      	ldr	r2, [pc, #368]	; (8004e58 <HAL_I2S_Init+0x270>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d902      	bls.n	8004d1c <HAL_I2S_Init+0x134>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d907      	bls.n	8004d2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e08f      	b.n	8004e4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	ea42 0103 	orr.w	r1, r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d4a:	f023 030f 	bic.w	r3, r3, #15
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6851      	ldr	r1, [r2, #4]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6892      	ldr	r2, [r2, #8]
 8004d56:	4311      	orrs	r1, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68d2      	ldr	r2, [r2, #12]
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6992      	ldr	r2, [r2, #24]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d161      	bne.n	8004e3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <HAL_I2S_Init+0x274>)
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_I2S_Init+0x1a4>
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004d8a:	e001      	b.n	8004d90 <HAL_I2S_Init+0x1a8>
 8004d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	4932      	ldr	r1, [pc, #200]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004d98:	428a      	cmp	r2, r1
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2S_Init+0x1b8>
 8004d9c:	4a31      	ldr	r2, [pc, #196]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2S_Init+0x1bc>
 8004da0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004da4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_I2S_Init+0x1d4>
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004dba:	e001      	b.n	8004dc0 <HAL_I2S_Init+0x1d8>
 8004dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2S_Init+0x1ea>
 8004dce:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004dd0:	e001      	b.n	8004dd6 <HAL_I2S_Init+0x1ee>
 8004dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de2:	d003      	beq.n	8004dec <HAL_I2S_Init+0x204>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e001      	b.n	8004df8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	b299      	uxth	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	430b      	orrs	r3, r1
 8004e14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2S_Init+0x24c>
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004e32:	e001      	b.n	8004e38 <HAL_I2S_Init+0x250>
 8004e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e38:	897a      	ldrh	r2, [r7, #10]
 8004e3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	08004f5f 	.word	0x08004f5f
 8004e58:	cccccccd 	.word	0xcccccccd
 8004e5c:	08005075 	.word	0x08005075
 8004e60:	40003800 	.word	0x40003800
 8004e64:	40003400 	.word	0x40003400

08004e68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ffb8 	bl	8004e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	b292      	uxth	r2, r2
 8004f14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10e      	bne.n	8004f56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff93 	bl	8004e7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d13a      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d109      	bne.n	8004f98 <I2S_IRQHandler+0x3a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d102      	bne.n	8004f98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff ffb4 	bl	8004f00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d126      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d11f      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f043 0202 	orr.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff50 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d136      	bne.n	800506a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d109      	bne.n	800501a <I2S_IRQHandler+0xbc>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d102      	bne.n	800501a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff45 	bl	8004ea4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d122      	bne.n	800506a <I2S_IRQHandler+0x10c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d11b      	bne.n	800506a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005040:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f043 0204 	orr.w	r2, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff13 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4aa2      	ldr	r2, [pc, #648]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d101      	bne.n	8005092 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800508e:	4ba2      	ldr	r3, [pc, #648]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005090:	e001      	b.n	8005096 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a9b      	ldr	r2, [pc, #620]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d101      	bne.n	80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80050ac:	4b9a      	ldr	r3, [pc, #616]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80050ae:	e001      	b.n	80050b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80050b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c0:	d004      	beq.n	80050cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8099 	bne.w	80051fe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d107      	bne.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f925 	bl	8005330 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d107      	bne.n	8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9c8 	bl	8005490 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b40      	cmp	r3, #64	; 0x40
 8005108:	d13a      	bne.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d035      	beq.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800511e:	4b7e      	ldr	r3, [pc, #504]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005120:	e001      	b.n	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005122:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005126:	685a      	ldr	r2, [r3, #4]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4979      	ldr	r1, [pc, #484]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800512e:	428b      	cmp	r3, r1
 8005130:	d101      	bne.n	8005136 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005132:	4b79      	ldr	r3, [pc, #484]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005134:	e001      	b.n	800513a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800513e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800514e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f043 0202 	orr.w	r2, r3, #2
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fe88 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b08      	cmp	r3, #8
 8005188:	f040 80be 	bne.w	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80b8 	beq.w	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051a6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a59      	ldr	r2, [pc, #356]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80051b2:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051b4:	e001      	b.n	80051ba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80051b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4954      	ldr	r1, [pc, #336]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80051c2:	428b      	cmp	r3, r1
 80051c4:	d101      	bne.n	80051ca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80051c6:	4b54      	ldr	r3, [pc, #336]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80051c8:	e001      	b.n	80051ce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051d2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051d4:	2300      	movs	r3, #0
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	f043 0204 	orr.w	r2, r3, #4
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fe4a 	bl	8004e90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051fc:	e084      	b.n	8005308 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b02      	cmp	r3, #2
 8005206:	d107      	bne.n	8005218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f8be 	bl	8005394 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b01      	cmp	r3, #1
 8005220:	d107      	bne.n	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8fd 	bl	800542c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d12f      	bne.n	800529c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02a      	beq.n	800529c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005254:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2e      	ldr	r2, [pc, #184]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d101      	bne.n	8005264 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005260:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005262:	e001      	b.n	8005268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4929      	ldr	r1, [pc, #164]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005270:	428b      	cmp	r3, r1
 8005272:	d101      	bne.n	8005278 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005276:	e001      	b.n	800527c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005280:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f043 0202 	orr.w	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fdfa 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d131      	bne.n	800530a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02c      	beq.n	800530a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80052ba:	4b17      	ldr	r3, [pc, #92]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052bc:	e001      	b.n	80052c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80052be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4912      	ldr	r1, [pc, #72]	; (8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052ca:	428b      	cmp	r3, r1
 80052cc:	d101      	bne.n	80052d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052d0:	e001      	b.n	80052d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80052d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052ea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff fdc5 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005306:	e000      	b.n	800530a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005308:	bf00      	nop
}
 800530a:	bf00      	nop
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40003800 	.word	0x40003800
 8005318:	40003400 	.word	0x40003400

0800531c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	1c99      	adds	r1, r3, #2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6251      	str	r1, [r2, #36]	; 0x24
 8005342:	881a      	ldrh	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d113      	bne.n	800538a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005376:	b29b      	uxth	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ffc9 	bl	800531c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a0:	1c99      	adds	r1, r3, #2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6251      	str	r1, [r2, #36]	; 0x24
 80053a6:	8819      	ldrh	r1, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <I2SEx_TxISR_I2SExt+0x90>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d101      	bne.n	80053b6 <I2SEx_TxISR_I2SExt+0x22>
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <I2SEx_TxISR_I2SExt+0x94>)
 80053b4:	e001      	b.n	80053ba <I2SEx_TxISR_I2SExt+0x26>
 80053b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053ba:	460a      	mov	r2, r1
 80053bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	3b01      	subs	r3, #1
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d121      	bne.n	800541a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a12      	ldr	r2, [pc, #72]	; (8005424 <I2SEx_TxISR_I2SExt+0x90>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <I2SEx_TxISR_I2SExt+0x50>
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <I2SEx_TxISR_I2SExt+0x94>)
 80053e2:	e001      	b.n	80053e8 <I2SEx_TxISR_I2SExt+0x54>
 80053e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	490d      	ldr	r1, [pc, #52]	; (8005424 <I2SEx_TxISR_I2SExt+0x90>)
 80053f0:	428b      	cmp	r3, r1
 80053f2:	d101      	bne.n	80053f8 <I2SEx_TxISR_I2SExt+0x64>
 80053f4:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <I2SEx_TxISR_I2SExt+0x94>)
 80053f6:	e001      	b.n	80053fc <I2SEx_TxISR_I2SExt+0x68>
 80053f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005400:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7ff ff81 	bl	800531c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40003800 	.word	0x40003800
 8005428:	40003400 	.word	0x40003400

0800542c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68d8      	ldr	r0, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	1c99      	adds	r1, r3, #2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005444:	b282      	uxth	r2, r0
 8005446:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800545a:	b29b      	uxth	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d113      	bne.n	8005488 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800546e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff ff4a 	bl	800531c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005488:	bf00      	nop
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a20      	ldr	r2, [pc, #128]	; (8005520 <I2SEx_RxISR_I2SExt+0x90>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <I2SEx_RxISR_I2SExt+0x16>
 80054a2:	4b20      	ldr	r3, [pc, #128]	; (8005524 <I2SEx_RxISR_I2SExt+0x94>)
 80054a4:	e001      	b.n	80054aa <I2SEx_RxISR_I2SExt+0x1a>
 80054a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	1c99      	adds	r1, r3, #2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054b6:	b282      	uxth	r2, r0
 80054b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d121      	bne.n	8005516 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <I2SEx_RxISR_I2SExt+0x90>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d101      	bne.n	80054e0 <I2SEx_RxISR_I2SExt+0x50>
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <I2SEx_RxISR_I2SExt+0x94>)
 80054de:	e001      	b.n	80054e4 <I2SEx_RxISR_I2SExt+0x54>
 80054e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	490d      	ldr	r1, [pc, #52]	; (8005520 <I2SEx_RxISR_I2SExt+0x90>)
 80054ec:	428b      	cmp	r3, r1
 80054ee:	d101      	bne.n	80054f4 <I2SEx_RxISR_I2SExt+0x64>
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <I2SEx_RxISR_I2SExt+0x94>)
 80054f2:	e001      	b.n	80054f8 <I2SEx_RxISR_I2SExt+0x68>
 80054f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d106      	bne.n	8005516 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ff03 	bl	800531c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40003800 	.word	0x40003800
 8005524:	40003400 	.word	0x40003400

08005528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e25b      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d075      	beq.n	8005632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005546:	4ba3      	ldr	r3, [pc, #652]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f003 030c 	and.w	r3, r3, #12
 800554e:	2b04      	cmp	r3, #4
 8005550:	d00c      	beq.n	800556c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005552:	4ba0      	ldr	r3, [pc, #640]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800555a:	2b08      	cmp	r3, #8
 800555c:	d112      	bne.n	8005584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555e:	4b9d      	ldr	r3, [pc, #628]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800556a:	d10b      	bne.n	8005584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	4b99      	ldr	r3, [pc, #612]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d05b      	beq.n	8005630 <HAL_RCC_OscConfig+0x108>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d157      	bne.n	8005630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e236      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d106      	bne.n	800559c <HAL_RCC_OscConfig+0x74>
 800558e:	4b91      	ldr	r3, [pc, #580]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a90      	ldr	r2, [pc, #576]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e01d      	b.n	80055d8 <HAL_RCC_OscConfig+0xb0>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x98>
 80055a6:	4b8b      	ldr	r3, [pc, #556]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a8a      	ldr	r2, [pc, #552]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	4b88      	ldr	r3, [pc, #544]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a87      	ldr	r2, [pc, #540]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0xb0>
 80055c0:	4b84      	ldr	r3, [pc, #528]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a83      	ldr	r2, [pc, #524]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a80      	ldr	r2, [pc, #512]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d013      	beq.n	8005608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e0:	f7fb fc68 	bl	8000eb4 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055e8:	f7fb fc64 	bl	8000eb4 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b64      	cmp	r3, #100	; 0x64
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e1fb      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055fa:	4b76      	ldr	r3, [pc, #472]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d0f0      	beq.n	80055e8 <HAL_RCC_OscConfig+0xc0>
 8005606:	e014      	b.n	8005632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fb fc54 	bl	8000eb4 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005610:	f7fb fc50 	bl	8000eb4 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e1e7      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005622:	4b6c      	ldr	r3, [pc, #432]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0xe8>
 800562e:	e000      	b.n	8005632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d063      	beq.n	8005706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563e:	4b65      	ldr	r3, [pc, #404]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800564a:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005652:	2b08      	cmp	r3, #8
 8005654:	d11c      	bne.n	8005690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005656:	4b5f      	ldr	r3, [pc, #380]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d116      	bne.n	8005690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005662:	4b5c      	ldr	r3, [pc, #368]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <HAL_RCC_OscConfig+0x152>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d001      	beq.n	800567a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e1bb      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800567a:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4952      	ldr	r1, [pc, #328]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800568e:	e03a      	b.n	8005706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005698:	4b4f      	ldr	r3, [pc, #316]	; (80057d8 <HAL_RCC_OscConfig+0x2b0>)
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fb fc09 	bl	8000eb4 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056a6:	f7fb fc05 	bl	8000eb4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e19c      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	4b46      	ldr	r3, [pc, #280]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c4:	4b43      	ldr	r3, [pc, #268]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4940      	ldr	r1, [pc, #256]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	600b      	str	r3, [r1, #0]
 80056d8:	e015      	b.n	8005706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056da:	4b3f      	ldr	r3, [pc, #252]	; (80057d8 <HAL_RCC_OscConfig+0x2b0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e0:	f7fb fbe8 	bl	8000eb4 <HAL_GetTick>
 80056e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e8:	f7fb fbe4 	bl	8000eb4 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e17b      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056fa:	4b36      	ldr	r3, [pc, #216]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d030      	beq.n	8005774 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d016      	beq.n	8005748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800571a:	4b30      	ldr	r3, [pc, #192]	; (80057dc <HAL_RCC_OscConfig+0x2b4>)
 800571c:	2201      	movs	r2, #1
 800571e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005720:	f7fb fbc8 	bl	8000eb4 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005728:	f7fb fbc4 	bl	8000eb4 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e15b      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800573a:	4b26      	ldr	r3, [pc, #152]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x200>
 8005746:	e015      	b.n	8005774 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005748:	4b24      	ldr	r3, [pc, #144]	; (80057dc <HAL_RCC_OscConfig+0x2b4>)
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800574e:	f7fb fbb1 	bl	8000eb4 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005756:	f7fb fbad 	bl	8000eb4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e144      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800576a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f0      	bne.n	8005756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80a0 	beq.w	80058c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005782:	2300      	movs	r3, #0
 8005784:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10f      	bne.n	80057b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 800579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6413      	str	r3, [r2, #64]	; 0x40
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b2:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <HAL_RCC_OscConfig+0x2b8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d121      	bne.n	8005802 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057be:	4b08      	ldr	r3, [pc, #32]	; (80057e0 <HAL_RCC_OscConfig+0x2b8>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <HAL_RCC_OscConfig+0x2b8>)
 80057c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ca:	f7fb fb73 	bl	8000eb4 <HAL_GetTick>
 80057ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d0:	e011      	b.n	80057f6 <HAL_RCC_OscConfig+0x2ce>
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800
 80057d8:	42470000 	.word	0x42470000
 80057dc:	42470e80 	.word	0x42470e80
 80057e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e4:	f7fb fb66 	bl	8000eb4 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e0fd      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f6:	4b81      	ldr	r3, [pc, #516]	; (80059fc <HAL_RCC_OscConfig+0x4d4>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d106      	bne.n	8005818 <HAL_RCC_OscConfig+0x2f0>
 800580a:	4b7d      	ldr	r3, [pc, #500]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 800580c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580e:	4a7c      	ldr	r2, [pc, #496]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	6713      	str	r3, [r2, #112]	; 0x70
 8005816:	e01c      	b.n	8005852 <HAL_RCC_OscConfig+0x32a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b05      	cmp	r3, #5
 800581e:	d10c      	bne.n	800583a <HAL_RCC_OscConfig+0x312>
 8005820:	4b77      	ldr	r3, [pc, #476]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005824:	4a76      	ldr	r2, [pc, #472]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	6713      	str	r3, [r2, #112]	; 0x70
 800582c:	4b74      	ldr	r3, [pc, #464]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 800582e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005830:	4a73      	ldr	r2, [pc, #460]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	6713      	str	r3, [r2, #112]	; 0x70
 8005838:	e00b      	b.n	8005852 <HAL_RCC_OscConfig+0x32a>
 800583a:	4b71      	ldr	r3, [pc, #452]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a70      	ldr	r2, [pc, #448]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	6713      	str	r3, [r2, #112]	; 0x70
 8005846:	4b6e      	ldr	r3, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a6d      	ldr	r2, [pc, #436]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 800584c:	f023 0304 	bic.w	r3, r3, #4
 8005850:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d015      	beq.n	8005886 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fb fb2b 	bl	8000eb4 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005860:	e00a      	b.n	8005878 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005862:	f7fb fb27 	bl	8000eb4 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e0bc      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005878:	4b61      	ldr	r3, [pc, #388]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0ee      	beq.n	8005862 <HAL_RCC_OscConfig+0x33a>
 8005884:	e014      	b.n	80058b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005886:	f7fb fb15 	bl	8000eb4 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800588e:	f7fb fb11 	bl	8000eb4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
 800589c:	4293      	cmp	r3, r2
 800589e:	d901      	bls.n	80058a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0a6      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a4:	4b56      	ldr	r3, [pc, #344]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d105      	bne.n	80058c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b6:	4b52      	ldr	r3, [pc, #328]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f000 8092 	beq.w	80059f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058cc:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 030c 	and.w	r3, r3, #12
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d05c      	beq.n	8005992 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d141      	bne.n	8005964 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e0:	4b48      	ldr	r3, [pc, #288]	; (8005a04 <HAL_RCC_OscConfig+0x4dc>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e6:	f7fb fae5 	bl	8000eb4 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fb fae1 	bl	8000eb4 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e078      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005900:	4b3f      	ldr	r3, [pc, #252]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f0      	bne.n	80058ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	019b      	lsls	r3, r3, #6
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	3b01      	subs	r3, #1
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	4933      	ldr	r1, [pc, #204]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005932:	4313      	orrs	r3, r2
 8005934:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005936:	4b33      	ldr	r3, [pc, #204]	; (8005a04 <HAL_RCC_OscConfig+0x4dc>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800593c:	f7fb faba 	bl	8000eb4 <HAL_GetTick>
 8005940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005944:	f7fb fab6 	bl	8000eb4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e04d      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	4b2a      	ldr	r3, [pc, #168]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0f0      	beq.n	8005944 <HAL_RCC_OscConfig+0x41c>
 8005962:	e045      	b.n	80059f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005964:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <HAL_RCC_OscConfig+0x4dc>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596a:	f7fb faa3 	bl	8000eb4 <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005972:	f7fb fa9f 	bl	8000eb4 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e036      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005984:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1f0      	bne.n	8005972 <HAL_RCC_OscConfig+0x44a>
 8005990:	e02e      	b.n	80059f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d101      	bne.n	800599e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e029      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <HAL_RCC_OscConfig+0x4d8>)
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d11c      	bne.n	80059ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d115      	bne.n	80059ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059c6:	4013      	ands	r3, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10d      	bne.n	80059ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d106      	bne.n	80059ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40007000 	.word	0x40007000
 8005a00:	40023800 	.word	0x40023800
 8005a04:	42470060 	.word	0x42470060

08005a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0cc      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a1c:	4b68      	ldr	r3, [pc, #416]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d90c      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a2a:	4b65      	ldr	r3, [pc, #404]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0b8      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d020      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a74:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	4a52      	ldr	r2, [pc, #328]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a80:	4b50      	ldr	r3, [pc, #320]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	494d      	ldr	r1, [pc, #308]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d044      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d119      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e07f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac6:	4b3f      	ldr	r3, [pc, #252]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d109      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e06f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad6:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e067      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ae6:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4934      	ldr	r1, [pc, #208]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005af8:	f7fb f9dc 	bl	8000eb4 <HAL_GetTick>
 8005afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b00:	f7fb f9d8 	bl	8000eb4 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e04f      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b16:	4b2b      	ldr	r3, [pc, #172]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 020c 	and.w	r2, r3, #12
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d1eb      	bne.n	8005b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b28:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d20c      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d001      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e032      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b5c:	4b19      	ldr	r3, [pc, #100]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d009      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	490e      	ldr	r1, [pc, #56]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b8e:	f000 f821 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005b92:	4601      	mov	r1, r0
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	091b      	lsrs	r3, r3, #4
 8005b9a:	f003 030f 	and.w	r3, r3, #15
 8005b9e:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
 8005ba2:	fa21 f303 	lsr.w	r3, r1, r3
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fb f93c 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40023c00 	.word	0x40023c00
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	080095b8 	.word	0x080095b8
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	20000004 	.word	0x20000004

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	2300      	movs	r3, #0
 8005be4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bea:	4b63      	ldr	r3, [pc, #396]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d007      	beq.n	8005c06 <HAL_RCC_GetSysClockFreq+0x32>
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d008      	beq.n	8005c0c <HAL_RCC_GetSysClockFreq+0x38>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 80b4 	bne.w	8005d68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c00:	4b5e      	ldr	r3, [pc, #376]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c02:	60bb      	str	r3, [r7, #8]
       break;
 8005c04:	e0b3      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c06:	4b5e      	ldr	r3, [pc, #376]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005c08:	60bb      	str	r3, [r7, #8]
      break;
 8005c0a:	e0b0      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c0c:	4b5a      	ldr	r3, [pc, #360]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c16:	4b58      	ldr	r3, [pc, #352]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d04a      	beq.n	8005cb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c22:	4b55      	ldr	r3, [pc, #340]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	f04f 0400 	mov.w	r4, #0
 8005c2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	ea03 0501 	and.w	r5, r3, r1
 8005c38:	ea04 0602 	and.w	r6, r4, r2
 8005c3c:	4629      	mov	r1, r5
 8005c3e:	4632      	mov	r2, r6
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	f04f 0400 	mov.w	r4, #0
 8005c48:	0154      	lsls	r4, r2, #5
 8005c4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c4e:	014b      	lsls	r3, r1, #5
 8005c50:	4619      	mov	r1, r3
 8005c52:	4622      	mov	r2, r4
 8005c54:	1b49      	subs	r1, r1, r5
 8005c56:	eb62 0206 	sbc.w	r2, r2, r6
 8005c5a:	f04f 0300 	mov.w	r3, #0
 8005c5e:	f04f 0400 	mov.w	r4, #0
 8005c62:	0194      	lsls	r4, r2, #6
 8005c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c68:	018b      	lsls	r3, r1, #6
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	eb64 0402 	sbc.w	r4, r4, r2
 8005c70:	f04f 0100 	mov.w	r1, #0
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	00e2      	lsls	r2, r4, #3
 8005c7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c7e:	00d9      	lsls	r1, r3, #3
 8005c80:	460b      	mov	r3, r1
 8005c82:	4614      	mov	r4, r2
 8005c84:	195b      	adds	r3, r3, r5
 8005c86:	eb44 0406 	adc.w	r4, r4, r6
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	0262      	lsls	r2, r4, #9
 8005c94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005c98:	0259      	lsls	r1, r3, #9
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f04f 0400 	mov.w	r4, #0
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4623      	mov	r3, r4
 8005cac:	f7fa fa8c 	bl	80001c8 <__aeabi_uldivmod>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	e049      	b.n	8005d4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cb8:	4b2f      	ldr	r3, [pc, #188]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	099b      	lsrs	r3, r3, #6
 8005cbe:	f04f 0400 	mov.w	r4, #0
 8005cc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cc6:	f04f 0200 	mov.w	r2, #0
 8005cca:	ea03 0501 	and.w	r5, r3, r1
 8005cce:	ea04 0602 	and.w	r6, r4, r2
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	f04f 0400 	mov.w	r4, #0
 8005cde:	0154      	lsls	r4, r2, #5
 8005ce0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ce4:	014b      	lsls	r3, r1, #5
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4622      	mov	r2, r4
 8005cea:	1b49      	subs	r1, r1, r5
 8005cec:	eb62 0206 	sbc.w	r2, r2, r6
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	f04f 0400 	mov.w	r4, #0
 8005cf8:	0194      	lsls	r4, r2, #6
 8005cfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005cfe:	018b      	lsls	r3, r1, #6
 8005d00:	1a5b      	subs	r3, r3, r1
 8005d02:	eb64 0402 	sbc.w	r4, r4, r2
 8005d06:	f04f 0100 	mov.w	r1, #0
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d14:	00d9      	lsls	r1, r3, #3
 8005d16:	460b      	mov	r3, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	195b      	adds	r3, r3, r5
 8005d1c:	eb44 0406 	adc.w	r4, r4, r6
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	02a2      	lsls	r2, r4, #10
 8005d2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d2e:	0299      	lsls	r1, r3, #10
 8005d30:	460b      	mov	r3, r1
 8005d32:	4614      	mov	r4, r2
 8005d34:	4618      	mov	r0, r3
 8005d36:	4621      	mov	r1, r4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f04f 0400 	mov.w	r4, #0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4623      	mov	r3, r4
 8005d42:	f7fa fa41 	bl	80001c8 <__aeabi_uldivmod>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	0c1b      	lsrs	r3, r3, #16
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	3301      	adds	r3, #1
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	60bb      	str	r3, [r7, #8]
      break;
 8005d66:	e002      	b.n	8005d6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d6a:	60bb      	str	r3, [r7, #8]
      break;
 8005d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	007a1200 	.word	0x007a1200

08005d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d88:	4b03      	ldr	r3, [pc, #12]	; (8005d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000000 	.word	0x20000000

08005d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005da0:	f7ff fff0 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005da4:	4601      	mov	r1, r0
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	0a9b      	lsrs	r3, r3, #10
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	4a03      	ldr	r2, [pc, #12]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db2:	5cd3      	ldrb	r3, [r2, r3]
 8005db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	080095c8 	.word	0x080095c8

08005dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d035      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005dec:	4b62      	ldr	r3, [pc, #392]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005df2:	f7fb f85f 	bl	8000eb4 <HAL_GetTick>
 8005df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005df8:	e008      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dfa:	f7fb f85b 	bl	8000eb4 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e0b0      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e0c:	4b5b      	ldr	r3, [pc, #364]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f0      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	019a      	lsls	r2, r3, #6
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	071b      	lsls	r3, r3, #28
 8005e24:	4955      	ldr	r1, [pc, #340]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e2c:	4b52      	ldr	r3, [pc, #328]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e2e:	2201      	movs	r2, #1
 8005e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e32:	f7fb f83f 	bl	8000eb4 <HAL_GetTick>
 8005e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e3a:	f7fb f83b 	bl	8000eb4 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e090      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8083 	beq.w	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
 8005e6a:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	4a43      	ldr	r2, [pc, #268]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6413      	str	r3, [r2, #64]	; 0x40
 8005e76:	4b41      	ldr	r3, [pc, #260]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e82:	4b3f      	ldr	r3, [pc, #252]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a3e      	ldr	r2, [pc, #248]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8e:	f7fb f811 	bl	8000eb4 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e96:	f7fb f80d 	bl	8000eb4 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e062      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ea8:	4b35      	ldr	r3, [pc, #212]	; (8005f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005eb4:	4b31      	ldr	r3, [pc, #196]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ebc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d02f      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d028      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ed2:	4b2a      	ldr	r3, [pc, #168]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eda:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005edc:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee2:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ee8:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d114      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005efa:	f7fa ffdb 	bl	8000eb4 <HAL_GetTick>
 8005efe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fa ffd7 	bl	8000eb4 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e02a      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f18:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0ee      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f30:	d10d      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f32:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f46:	490d      	ldr	r1, [pc, #52]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]
 8005f4c:	e005      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4a0a      	ldr	r2, [pc, #40]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f54:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f58:	6093      	str	r3, [r2, #8]
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f66:	4905      	ldr	r1, [pc, #20]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	42470068 	.word	0x42470068
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	40007000 	.word	0x40007000
 8005f84:	42470e40 	.word	0x42470e40

08005f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d13d      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005fa6:	4b22      	ldr	r3, [pc, #136]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fae:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d12f      	bne.n	800601a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fba:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fbc:	617b      	str	r3, [r7, #20]
          break;
 8005fbe:	e02f      	b.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fc0:	4b1b      	ldr	r3, [pc, #108]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fce:	4b18      	ldr	r3, [pc, #96]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd6:	4a18      	ldr	r2, [pc, #96]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fdc:	613b      	str	r3, [r7, #16]
 8005fde:	e007      	b.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fe0:	4b13      	ldr	r3, [pc, #76]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe8:	4a14      	ldr	r2, [pc, #80]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ff0:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff6:	099b      	lsrs	r3, r3, #6
 8005ff8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	fb02 f303 	mul.w	r3, r2, r3
 8006002:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006004:	4b0a      	ldr	r3, [pc, #40]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600a:	0f1b      	lsrs	r3, r3, #28
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	617b      	str	r3, [r7, #20]
          break;
 8006018:	e002      	b.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800601a:	2300      	movs	r3, #0
 800601c:	617b      	str	r3, [r7, #20]
          break;
 800601e:	bf00      	nop
        }
      }
      break;
 8006020:	bf00      	nop
    }
  }
  return frequency;
 8006022:	697b      	ldr	r3, [r7, #20]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	40023800 	.word	0x40023800
 8006034:	00bb8000 	.word	0x00bb8000
 8006038:	007a1200 	.word	0x007a1200
 800603c:	00f42400 	.word	0x00f42400

08006040 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e056      	b.n	8006100 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fa fdb5 	bl	8000bdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006088:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	431a      	orrs	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	ea42 0103 	orr.w	r1, r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	0c1b      	lsrs	r3, r3, #16
 80060d0:	f003 0104 	and.w	r1, r3, #4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	430a      	orrs	r2, r1
 80060de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006108:	b084      	sub	sp, #16
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	f107 001c 	add.w	r0, r7, #28
 8006116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	d122      	bne.n	8006166 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f94a 	bl	80063f4 <USB_CoreReset>
 8006160:	4603      	mov	r3, r0
 8006162:	73fb      	strb	r3, [r7, #15]
 8006164:	e01a      	b.n	800619c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f93e 	bl	80063f4 <USB_CoreReset>
 8006178:	4603      	mov	r3, r0
 800617a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800617c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
 800618e:	e005      	b.n	800619c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10b      	bne.n	80061ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f043 0206 	orr.w	r2, r3, #6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061c6:	b004      	add	sp, #16
 80061c8:	4770      	bx	lr

080061ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f043 0201 	orr.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 0201 	bic.w	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b082      	sub	sp, #8
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d106      	bne.n	800623a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	60da      	str	r2, [r3, #12]
 8006238:	e00b      	b.n	8006252 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	e001      	b.n	8006252 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e003      	b.n	800625a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006252:	2032      	movs	r0, #50	; 0x32
 8006254:	f7fa fe3a 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
	...

08006264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	019b      	lsls	r3, r3, #6
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a09      	ldr	r2, [pc, #36]	; (80062ac <USB_FlushTxFifo+0x48>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e006      	b.n	800629e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	f003 0320 	and.w	r3, r3, #32
 8006298:	2b20      	cmp	r3, #32
 800629a:	d0f0      	beq.n	800627e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	00030d40 	.word	0x00030d40

080062b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2210      	movs	r2, #16
 80062c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a09      	ldr	r2, [pc, #36]	; (80062f0 <USB_FlushRxFifo+0x40>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e006      	b.n	80062e2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f003 0310 	and.w	r3, r3, #16
 80062dc:	2b10      	cmp	r3, #16
 80062de:	d0f0      	beq.n	80062c2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	00030d40 	.word	0x00030d40

080062f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	; 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4611      	mov	r1, r2
 8006300:	461a      	mov	r2, r3
 8006302:	460b      	mov	r3, r1
 8006304:	71fb      	strb	r3, [r7, #7]
 8006306:	4613      	mov	r3, r2
 8006308:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006316:	2b00      	cmp	r3, #0
 8006318:	d11a      	bne.n	8006350 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800631a:	88bb      	ldrh	r3, [r7, #4]
 800631c:	3303      	adds	r3, #3
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	e00f      	b.n	8006348 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	031a      	lsls	r2, r3, #12
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	4413      	add	r3, r2
 8006330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006334:	461a      	mov	r2, r3
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3304      	adds	r3, #4
 8006340:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	3301      	adds	r3, #1
 8006346:	61bb      	str	r3, [r7, #24]
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	d3eb      	bcc.n	8006328 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3724      	adds	r7, #36	; 0x24
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800635e:	b480      	push	{r7}
 8006360:	b089      	sub	sp, #36	; 0x24
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	3303      	adds	r3, #3
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800637c:	2300      	movs	r3, #0
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e00b      	b.n	800639a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	601a      	str	r2, [r3, #0]
    pDest++;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	3304      	adds	r3, #4
 8006392:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	3301      	adds	r3, #1
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d3ef      	bcc.n	8006382 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80063a2:	69fb      	ldr	r3, [r7, #28]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3724      	adds	r7, #36	; 0x24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4013      	ands	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3714      	adds	r7, #20
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0301 	and.w	r3, r3, #1
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a13      	ldr	r2, [pc, #76]	; (8006458 <USB_CoreReset+0x64>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d901      	bls.n	8006412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e01b      	b.n	800644a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	daf2      	bge.n	8006400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	f043 0201 	orr.w	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3301      	adds	r3, #1
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <USB_CoreReset+0x64>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d901      	bls.n	800643c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e006      	b.n	800644a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b01      	cmp	r3, #1
 8006446:	d0f0      	beq.n	800642a <USB_CoreReset+0x36>

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	00030d40 	.word	0x00030d40

0800645c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800645c:	b084      	sub	sp, #16
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
 8006466:	f107 001c 	add.w	r0, r7, #28
 800646a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d10a      	bne.n	80064ca <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	e014      	b.n	80064f4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e009      	b.n	80064f4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064ee:	f023 0304 	bic.w	r3, r3, #4
 80064f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80064f4:	2110      	movs	r1, #16
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff feb4 	bl	8006264 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff fed7 	bl	80062b0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e015      	b.n	8006534 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4413      	add	r3, r2
 8006510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006514:	461a      	mov	r2, r3
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
 800651a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006528:	461a      	mov	r2, r3
 800652a:	2300      	movs	r3, #0
 800652c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	3301      	adds	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	429a      	cmp	r2, r3
 800653a:	d3e5      	bcc.n	8006508 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800653c:	2101      	movs	r1, #1
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f8ac 	bl	800669c <USB_DriveVbus>

  HAL_Delay(200U);
 8006544:	20c8      	movs	r0, #200	; 0xc8
 8006546:	f7fa fcc1 	bl	8000ecc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f04f 32ff 	mov.w	r2, #4294967295
 8006556:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800656a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a14      	ldr	r2, [pc, #80]	; (80065c0 <USB_HostInit+0x164>)
 8006570:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <USB_HostInit+0x168>)
 8006576:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800657a:	e009      	b.n	8006590 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2280      	movs	r2, #128	; 0x80
 8006580:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a10      	ldr	r2, [pc, #64]	; (80065c8 <USB_HostInit+0x16c>)
 8006586:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a10      	ldr	r2, [pc, #64]	; (80065cc <USB_HostInit+0x170>)
 800658c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	2b00      	cmp	r3, #0
 8006594:	d105      	bne.n	80065a2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f043 0210 	orr.w	r2, r3, #16
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <USB_HostInit+0x174>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ba:	b004      	add	sp, #16
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	01000200 	.word	0x01000200
 80065c4:	00e00300 	.word	0x00e00300
 80065c8:	00600080 	.word	0x00600080
 80065cc:	004000e0 	.word	0x004000e0
 80065d0:	a3200008 	.word	0xa3200008

080065d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d107      	bne.n	8006626 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800661c:	461a      	mov	r2, r3
 800661e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006622:	6053      	str	r3, [r2, #4]
 8006624:	e009      	b.n	800663a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	2b02      	cmp	r3, #2
 800662a:	d106      	bne.n	800663a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006632:	461a      	mov	r2, r3
 8006634:	f241 7370 	movw	r3, #6000	; 0x1770
 8006638:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006668:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006676:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006678:	2064      	movs	r0, #100	; 0x64
 800667a:	f7fa fc27 	bl	8000ecc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800668a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800668c:	200a      	movs	r0, #10
 800668e:	f7fa fc1d 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80066c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <USB_DriveVbus+0x44>
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d106      	bne.n	80066e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066ea:	d109      	bne.n	8006700 <USB_DriveVbus+0x64>
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80066fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800670e:	b480      	push	{r7}
 8006710:	b085      	sub	sp, #20
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	0c5b      	lsrs	r3, r3, #17
 800672c:	f003 0303 	and.w	r3, r3, #3
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	b29b      	uxth	r3, r3
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	4608      	mov	r0, r1
 800676a:	4611      	mov	r1, r2
 800676c:	461a      	mov	r2, r3
 800676e:	4603      	mov	r3, r0
 8006770:	70fb      	strb	r3, [r7, #3]
 8006772:	460b      	mov	r3, r1
 8006774:	70bb      	strb	r3, [r7, #2]
 8006776:	4613      	mov	r3, r2
 8006778:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 33ff 	mov.w	r3, #4294967295
 8006794:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800679a:	2b03      	cmp	r3, #3
 800679c:	d87e      	bhi.n	800689c <USB_HC_Init+0x13c>
 800679e:	a201      	add	r2, pc, #4	; (adr r2, 80067a4 <USB_HC_Init+0x44>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	0800685f 	.word	0x0800685f
 80067ac:	080067b5 	.word	0x080067b5
 80067b0:	08006821 	.word	0x08006821
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067c0:	461a      	mov	r2, r3
 80067c2:	f240 439d 	movw	r3, #1181	; 0x49d
 80067c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da10      	bge.n	80067f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ee:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80067f0:	e057      	b.n	80068a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d051      	beq.n	80068a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	78fa      	ldrb	r2, [r7, #3]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	440a      	add	r2, r1
 8006814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800681c:	60d3      	str	r3, [r2, #12]
      break;
 800681e:	e040      	b.n	80068a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4413      	add	r3, r2
 8006828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800682c:	461a      	mov	r2, r3
 800682e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	da34      	bge.n	80068a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	78fa      	ldrb	r2, [r7, #3]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800685a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800685c:	e023      	b.n	80068a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800685e:	78fb      	ldrb	r3, [r7, #3]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4413      	add	r3, r2
 8006866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686a:	461a      	mov	r2, r3
 800686c:	f240 2325 	movw	r3, #549	; 0x225
 8006870:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da17      	bge.n	80068aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4413      	add	r3, r2
 8006882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	440a      	add	r2, r1
 8006890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006894:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006898:	60d3      	str	r3, [r2, #12]
      }
      break;
 800689a:	e006      	b.n	80068aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	75fb      	strb	r3, [r7, #23]
      break;
 80068a0:	e004      	b.n	80068ac <USB_HC_Init+0x14c>
      break;
 80068a2:	bf00      	nop
 80068a4:	e002      	b.n	80068ac <USB_HC_Init+0x14c>
      break;
 80068a6:	bf00      	nop
 80068a8:	e000      	b.n	80068ac <USB_HC_Init+0x14c>
      break;
 80068aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2101      	movs	r1, #1
 80068bc:	fa01 f303 	lsl.w	r3, r1, r3
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80068c6:	4313      	orrs	r3, r2
 80068c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da03      	bge.n	80068e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e001      	b.n	80068ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80068ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d103      	bne.n	80068fa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80068f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e001      	b.n	80068fe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80068fe:	787b      	ldrb	r3, [r7, #1]
 8006900:	059b      	lsls	r3, r3, #22
 8006902:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006906:	78bb      	ldrb	r3, [r7, #2]
 8006908:	02db      	lsls	r3, r3, #11
 800690a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800690e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006914:	049b      	lsls	r3, r3, #18
 8006916:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800691a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800691c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800691e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006922:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	0159      	lsls	r1, r3, #5
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	440b      	add	r3, r1
 8006930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006934:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800693a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800693c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006940:	2b03      	cmp	r3, #3
 8006942:	d10f      	bne.n	8006964 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4413      	add	r3, r2
 800694c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	440a      	add	r2, r1
 800695a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800695e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006962:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	371c      	adds	r7, #28
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop

08006974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	; 0x30
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800698c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006990:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d028      	beq.n	80069f0 <USB_HC_StartXfer+0x7c>
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	791b      	ldrb	r3, [r3, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d124      	bne.n	80069f0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <USB_HC_StartXfer+0x50>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	795b      	ldrb	r3, [r3, #5]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d107      	bne.n	80069c4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	785b      	ldrb	r3, [r3, #1]
 80069b8:	4619      	mov	r1, r3
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 fa30 	bl	8006e20 <USB_DoPing>
      return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e114      	b.n	8006bee <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d112      	bne.n	80069f0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	0151      	lsls	r1, r2, #5
 80069dc:	6a3a      	ldr	r2, [r7, #32]
 80069de:	440a      	add	r2, r1
 80069e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80069e8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d018      	beq.n	8006a2a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	8912      	ldrh	r2, [r2, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	3b01      	subs	r3, #1
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	8912      	ldrh	r2, [r2, #8]
 8006a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a0c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006a10:	8b7b      	ldrh	r3, [r7, #26]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90b      	bls.n	8006a2e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006a16:	8b7b      	ldrh	r3, [r7, #26]
 8006a18:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	8912      	ldrh	r2, [r2, #8]
 8006a20:	fb02 f203 	mul.w	r2, r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	611a      	str	r2, [r3, #16]
 8006a28:	e001      	b.n	8006a2e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	78db      	ldrb	r3, [r3, #3]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d006      	beq.n	8006a44 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006a36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	8912      	ldrh	r2, [r2, #8]
 8006a3c:	fb02 f203 	mul.w	r2, r2, r3
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4e:	04d9      	lsls	r1, r3, #19
 8006a50:	4b69      	ldr	r3, [pc, #420]	; (8006bf8 <USB_HC_StartXfer+0x284>)
 8006a52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7a9b      	ldrb	r3, [r3, #10]
 8006a5a:	075b      	lsls	r3, r3, #29
 8006a5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	0148      	lsls	r0, r1, #5
 8006a64:	6a39      	ldr	r1, [r7, #32]
 8006a66:	4401      	add	r1, r0
 8006a68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	68d9      	ldr	r1, [r3, #12]
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a86:	460a      	mov	r2, r1
 8006a88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bf0c      	ite	eq
 8006a9a:	2301      	moveq	r3, #1
 8006a9c:	2300      	movne	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	015a      	lsls	r2, r3, #5
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	0151      	lsls	r1, r2, #5
 8006ab4:	6a3a      	ldr	r2, [r7, #32]
 8006ab6:	440a      	add	r2, r1
 8006ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006abc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ac0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	015a      	lsls	r2, r3, #5
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	7e7b      	ldrb	r3, [r7, #25]
 8006ad2:	075b      	lsls	r3, r3, #29
 8006ad4:	69f9      	ldr	r1, [r7, #28]
 8006ad6:	0148      	lsls	r0, r1, #5
 8006ad8:	6a39      	ldr	r1, [r7, #32]
 8006ada:	4401      	add	r1, r0
 8006adc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a42      	ldr	r2, [pc, #264]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006af4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006af6:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006afe:	4a3f      	ldr	r2, [pc, #252]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b00:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	78db      	ldrb	r3, [r3, #3]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d006      	beq.n	8006b18 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006b0a:	4b3c      	ldr	r3, [pc, #240]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e005      	b.n	8006b24 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006b18:	4b38      	ldr	r3, [pc, #224]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b20:	4a36      	ldr	r2, [pc, #216]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b22:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b24:	4b35      	ldr	r3, [pc, #212]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	4a33      	ldr	r2, [pc, #204]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b2e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	015a      	lsls	r2, r3, #5
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	4413      	add	r3, r2
 8006b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4b2f      	ldr	r3, [pc, #188]	; (8006bfc <USB_HC_StartXfer+0x288>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e04f      	b.n	8006bee <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	78db      	ldrb	r3, [r3, #3]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d14a      	bne.n	8006bec <USB_HC_StartXfer+0x278>
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d046      	beq.n	8006bec <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	79db      	ldrb	r3, [r3, #7]
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d830      	bhi.n	8006bc8 <USB_HC_StartXfer+0x254>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USB_HC_StartXfer+0x1f8>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b7d 	.word	0x08006b7d
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006b7d 	.word	0x08006b7d
 8006b78:	08006ba1 	.word	0x08006ba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	3303      	adds	r3, #3
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006b86:	8afa      	ldrh	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d91c      	bls.n	8006bcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b9e:	e015      	b.n	8006bcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	3303      	adds	r3, #3
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006baa:	8afa      	ldrh	r2, [r7, #22]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90a      	bls.n	8006bd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006bc6:	e003      	b.n	8006bd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <USB_HC_StartXfer+0x25e>
        break;
 8006bd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	68d9      	ldr	r1, [r3, #12]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	785a      	ldrb	r2, [r3, #1]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	b298      	uxth	r0, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	4603      	mov	r3, r0
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fb84 	bl	80062f4 <USB_WritePacket>
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3728      	adds	r7, #40	; 0x28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	1ff80000 	.word	0x1ff80000
 8006bfc:	200000b0 	.word	0x200000b0

08006c00 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	b29b      	uxth	r3, r3
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	0c9b      	lsrs	r3, r3, #18
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <USB_HC_Halt+0x3a>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d16c      	bne.n	8006d36 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c7a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d143      	bne.n	8006d10 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	015a      	lsls	r2, r3, #5
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4413      	add	r3, r2
 8006cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	0151      	lsls	r1, r2, #5
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	440a      	add	r2, r1
 8006cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cc6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ce6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3301      	adds	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cf4:	d81d      	bhi.n	8006d32 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d0c:	d0ec      	beq.n	8006ce8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d0e:	e080      	b.n	8006e12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	015a      	lsls	r2, r3, #5
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	0151      	lsls	r1, r2, #5
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	440a      	add	r2, r1
 8006d26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d30:	e06f      	b.n	8006e12 <USB_HC_Halt+0x1f0>
          break;
 8006d32:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d34:	e06d      	b.n	8006e12 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	0151      	lsls	r1, r2, #5
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	440a      	add	r2, r1
 8006d4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d54:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d143      	bne.n	8006dee <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d84:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dc4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dd2:	d81d      	bhi.n	8006e10 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dea:	d0ec      	beq.n	8006dc6 <USB_HC_Halt+0x1a4>
 8006dec:	e011      	b.n	8006e12 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e0c:	6013      	str	r3, [r2, #0]
 8006e0e:	e000      	b.n	8006e12 <USB_HC_Halt+0x1f0>
          break;
 8006e10:	bf00      	nop
    }
  }

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b087      	sub	sp, #28
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006e34:	2301      	movs	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	04da      	lsls	r2, r3, #19
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <USB_DoPing+0x74>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	0151      	lsls	r1, r2, #5
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	440a      	add	r2, r1
 8006e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e50:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e68:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e70:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	1ff80000 	.word	0x1ff80000

08006e98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff f99f 	bl	80061ec <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006eae:	2110      	movs	r1, #16
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff f9d7 	bl	8006264 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7ff f9fa 	bl	80062b0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	e01f      	b.n	8006f02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ed8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ee8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3301      	adds	r3, #1
 8006f00:	613b      	str	r3, [r7, #16]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b0f      	cmp	r3, #15
 8006f06:	d9dc      	bls.n	8006ec2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]
 8006f0c:	e034      	b.n	8006f78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f42:	461a      	mov	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f54:	d80c      	bhi.n	8006f70 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f6c:	d0ec      	beq.n	8006f48 <USB_StopHost+0xb0>
 8006f6e:	e000      	b.n	8006f72 <USB_StopHost+0xda>
        break;
 8006f70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3301      	adds	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b0f      	cmp	r3, #15
 8006f7c:	d9c7      	bls.n	8006f0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7ff f918 	bl	80061ca <USB_EnableGlobalInt>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006fa4:	b590      	push	{r4, r7, lr}
 8006fa6:	b089      	sub	sp, #36	; 0x24
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006fac:	2301      	movs	r3, #1
 8006fae:	2202      	movs	r2, #2
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fc68 	bl	8007888 <USBH_FindInterface>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2bff      	cmp	r3, #255	; 0xff
 8006fc0:	d002      	beq.n	8006fc8 <USBH_CDC_InterfaceInit+0x24>
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d901      	bls.n	8006fcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e13d      	b.n	8007248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fc3d 	bl	8007850 <USBH_SelectInterface>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d001      	beq.n	8006fe4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e131      	b.n	8007248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006fea:	2050      	movs	r0, #80	; 0x50
 8006fec:	f002 fa04 	bl	80093f8 <malloc>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ffa:	69db      	ldr	r3, [r3, #28]
 8006ffc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007004:	2302      	movs	r3, #2
 8007006:	e11f      	b.n	8007248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007008:	2250      	movs	r2, #80	; 0x50
 800700a:	2100      	movs	r1, #0
 800700c:	68b8      	ldr	r0, [r7, #8]
 800700e:	f002 fa03 	bl	8009418 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	211a      	movs	r1, #26
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	4413      	add	r3, r2
 800701e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	b25b      	sxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	da15      	bge.n	8007056 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	211a      	movs	r1, #26
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	4413      	add	r3, r2
 8007036:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	211a      	movs	r1, #26
 8007046:	fb01 f303 	mul.w	r3, r1, r3
 800704a:	4413      	add	r3, r2
 800704c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007050:	881a      	ldrh	r2, [r3, #0]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fe36 	bl	8008cce <USBH_AllocPipe>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	7819      	ldrb	r1, [r3, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	7858      	ldrb	r0, [r3, #1]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	8952      	ldrh	r2, [r2, #10]
 8007082:	9202      	str	r2, [sp, #8]
 8007084:	2203      	movs	r2, #3
 8007086:	9201      	str	r2, [sp, #4]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4623      	mov	r3, r4
 800708c:	4602      	mov	r2, r0
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f001 fdee 	bl	8008c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2200      	movs	r2, #0
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f002 f8fb 	bl	8009298 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80070a2:	2300      	movs	r3, #0
 80070a4:	2200      	movs	r2, #0
 80070a6:	210a      	movs	r1, #10
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fbed 	bl	8007888 <USBH_FindInterface>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2bff      	cmp	r3, #255	; 0xff
 80070b6:	d002      	beq.n	80070be <USBH_CDC_InterfaceInit+0x11a>
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d901      	bls.n	80070c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80070be:	2302      	movs	r3, #2
 80070c0:	e0c2      	b.n	8007248 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	211a      	movs	r1, #26
 80070c8:	fb01 f303 	mul.w	r3, r1, r3
 80070cc:	4413      	add	r3, r2
 80070ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	da16      	bge.n	8007108 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	211a      	movs	r1, #26
 80070e0:	fb01 f303 	mul.w	r3, r1, r3
 80070e4:	4413      	add	r3, r2
 80070e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070ea:	781a      	ldrb	r2, [r3, #0]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	211a      	movs	r1, #26
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007100:	881a      	ldrh	r2, [r3, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	835a      	strh	r2, [r3, #26]
 8007106:	e015      	b.n	8007134 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	211a      	movs	r1, #26
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	4413      	add	r3, r2
 8007114:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	211a      	movs	r1, #26
 8007124:	fb01 f303 	mul.w	r3, r1, r3
 8007128:	4413      	add	r3, r2
 800712a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800712e:	881a      	ldrh	r2, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	211a      	movs	r1, #26
 800713a:	fb01 f303 	mul.w	r3, r1, r3
 800713e:	4413      	add	r3, r2
 8007140:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	da16      	bge.n	800717a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	211a      	movs	r1, #26
 8007152:	fb01 f303 	mul.w	r3, r1, r3
 8007156:	4413      	add	r3, r2
 8007158:	f203 3356 	addw	r3, r3, #854	; 0x356
 800715c:	781a      	ldrb	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	211a      	movs	r1, #26
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	4413      	add	r3, r2
 800716e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007172:	881a      	ldrh	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	835a      	strh	r2, [r3, #26]
 8007178:	e015      	b.n	80071a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	211a      	movs	r1, #26
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	4413      	add	r3, r2
 8007186:	f203 3356 	addw	r3, r3, #854	; 0x356
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	211a      	movs	r1, #26
 8007196:	fb01 f303 	mul.w	r3, r1, r3
 800719a:	4413      	add	r3, r2
 800719c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	7b9b      	ldrb	r3, [r3, #14]
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fd8e 	bl	8008cce <USBH_AllocPipe>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	7bdb      	ldrb	r3, [r3, #15]
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 fd84 	bl	8008cce <USBH_AllocPipe>
 80071c6:	4603      	mov	r3, r0
 80071c8:	461a      	mov	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	7b59      	ldrb	r1, [r3, #13]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	7b98      	ldrb	r0, [r3, #14]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	8b12      	ldrh	r2, [r2, #24]
 80071e6:	9202      	str	r2, [sp, #8]
 80071e8:	2202      	movs	r2, #2
 80071ea:	9201      	str	r2, [sp, #4]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4623      	mov	r3, r4
 80071f0:	4602      	mov	r2, r0
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fd3c 	bl	8008c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	7b19      	ldrb	r1, [r3, #12]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	7bd8      	ldrb	r0, [r3, #15]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	8b52      	ldrh	r2, [r2, #26]
 8007210:	9202      	str	r2, [sp, #8]
 8007212:	2202      	movs	r2, #2
 8007214:	9201      	str	r2, [sp, #4]
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4623      	mov	r3, r4
 800721a:	4602      	mov	r2, r0
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fd27 	bl	8008c70 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	7b5b      	ldrb	r3, [r3, #13]
 800722e:	2200      	movs	r2, #0
 8007230:	4619      	mov	r1, r3
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 f830 	bl	8009298 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	7b1b      	ldrb	r3, [r3, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 f829 	bl	8009298 <USBH_LL_SetToggle>

  return USBH_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	bd90      	pop	{r4, r7, pc}

08007250 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fd1c 	bl	8008cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 fd47 	bl	8008d10 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	7b1b      	ldrb	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00e      	beq.n	80072ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	7b1b      	ldrb	r3, [r3, #12]
 8007294:	4619      	mov	r1, r3
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fd09 	bl	8008cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	7b1b      	ldrb	r3, [r3, #12]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 fd34 	bl	8008d10 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	7b5b      	ldrb	r3, [r3, #13]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d00e      	beq.n	80072d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	7b5b      	ldrb	r3, [r3, #13]
 80072ba:	4619      	mov	r1, r3
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fcf6 	bl	8008cae <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	7b5b      	ldrb	r3, [r3, #13]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 fd21 	bl	8008d10 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 f88d 	bl	8009408 <free>
    phost->pActiveClass->pData = 0U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f4:	2200      	movs	r2, #0
 80072f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3340      	adds	r3, #64	; 0x40
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f8b1 	bl	8007482 <GetLineCoding>
 8007320:	4603      	mov	r3, r0
 8007322:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d105      	bne.n	8007336 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007330:	2102      	movs	r1, #2
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007336:	7afb      	ldrb	r3, [r7, #11]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007348:	2301      	movs	r3, #1
 800734a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007360:	2b04      	cmp	r3, #4
 8007362:	d877      	bhi.n	8007454 <USBH_CDC_Process+0x114>
 8007364:	a201      	add	r2, pc, #4	; (adr r2, 800736c <USBH_CDC_Process+0x2c>)
 8007366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736a:	bf00      	nop
 800736c:	08007381 	.word	0x08007381
 8007370:	08007387 	.word	0x08007387
 8007374:	080073b7 	.word	0x080073b7
 8007378:	0800742b 	.word	0x0800742b
 800737c:	08007439 	.word	0x08007439
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	73fb      	strb	r3, [r7, #15]
      break;
 8007384:	e06d      	b.n	8007462 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f897 	bl	80074c0 <SetLineCoding>
 8007392:	4603      	mov	r3, r0
 8007394:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d104      	bne.n	80073a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073a4:	e058      	b.n	8007458 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d055      	beq.n	8007458 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2204      	movs	r2, #4
 80073b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073b4:	e050      	b.n	8007458 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	3340      	adds	r3, #64	; 0x40
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f860 	bl	8007482 <GetLineCoding>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d126      	bne.n	800741a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073de:	791b      	ldrb	r3, [r3, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d13b      	bne.n	800745c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d133      	bne.n	800745c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007400:	429a      	cmp	r2, r3
 8007402:	d12b      	bne.n	800745c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800740e:	429a      	cmp	r2, r3
 8007410:	d124      	bne.n	800745c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f95a 	bl	80076cc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007418:	e020      	b.n	800745c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d01d      	beq.n	800745c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2204      	movs	r2, #4
 8007424:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007428:	e018      	b.n	800745c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f000 f867 	bl	80074fe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8dc 	bl	80075ee <CDC_ProcessReception>
      break;
 8007436:	e014      	b.n	8007462 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007438:	2100      	movs	r1, #0
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 ffe5 	bl	800840a <USBH_ClrFeature>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d10a      	bne.n	8007460 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007452:	e005      	b.n	8007460 <USBH_CDC_Process+0x120>

    default:
      break;
 8007454:	bf00      	nop
 8007456:	e004      	b.n	8007462 <USBH_CDC_Process+0x122>
      break;
 8007458:	bf00      	nop
 800745a:	e002      	b.n	8007462 <USBH_CDC_Process+0x122>
      break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <USBH_CDC_Process+0x122>
      break;
 8007460:	bf00      	nop

  }

  return status;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	22a1      	movs	r2, #161	; 0xa1
 8007490:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2221      	movs	r2, #33	; 0x21
 8007496:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2207      	movs	r2, #7
 80074a8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2207      	movs	r2, #7
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f98a 	bl	80087ca <USBH_CtlReq>
 80074b6:	4603      	mov	r3, r0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2221      	movs	r2, #33	; 0x21
 80074ce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2207      	movs	r2, #7
 80074e6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2207      	movs	r2, #7
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 f96b 	bl	80087ca <USBH_CtlReq>
 80074f4:	4603      	mov	r3, r0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b086      	sub	sp, #24
 8007502:	af02      	add	r7, sp, #8
 8007504:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007510:	2300      	movs	r3, #0
 8007512:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800751a:	2b01      	cmp	r3, #1
 800751c:	d002      	beq.n	8007524 <CDC_ProcessTransmission+0x26>
 800751e:	2b02      	cmp	r3, #2
 8007520:	d025      	beq.n	800756e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007522:	e060      	b.n	80075e6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	8b12      	ldrh	r2, [r2, #24]
 800752c:	4293      	cmp	r3, r2
 800752e:	d90c      	bls.n	800754a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	69d9      	ldr	r1, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8b1a      	ldrh	r2, [r3, #24]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7b58      	ldrb	r0, [r3, #13]
 800753c:	2301      	movs	r3, #1
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f001 fb51 	bl	8008bea <USBH_BulkSendData>
 8007548:	e00c      	b.n	8007564 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	7b58      	ldrb	r0, [r3, #13]
 8007558:	2301      	movs	r3, #1
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4603      	mov	r3, r0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 fb43 	bl	8008bea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800756c:	e03b      	b.n	80075e6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	7b5b      	ldrb	r3, [r3, #13]
 8007572:	4619      	mov	r1, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fe65 	bl	8009244 <USBH_LL_GetURBState>
 800757a:	4603      	mov	r3, r0
 800757c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d128      	bne.n	80075d6 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	8b12      	ldrh	r2, [r2, #24]
 800758c:	4293      	cmp	r3, r2
 800758e:	d90e      	bls.n	80075ae <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	8b12      	ldrh	r2, [r2, #24]
 8007598:	1a9a      	subs	r2, r3, r2
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	8b12      	ldrh	r2, [r2, #24]
 80075a6:	441a      	add	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	61da      	str	r2, [r3, #28]
 80075ac:	e002      	b.n	80075b4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d004      	beq.n	80075c6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075c4:	e00e      	b.n	80075e4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f868 	bl	80076a4 <USBH_CDC_TransmitCallback>
      break;
 80075d4:	e006      	b.n	80075e4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d103      	bne.n	80075e4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80075e4:	bf00      	nop
  }
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007600:	2300      	movs	r3, #0
 8007602:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800760a:	2b03      	cmp	r3, #3
 800760c:	d002      	beq.n	8007614 <CDC_ProcessReception+0x26>
 800760e:	2b04      	cmp	r3, #4
 8007610:	d00e      	beq.n	8007630 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007612:	e043      	b.n	800769c <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	6a19      	ldr	r1, [r3, #32]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	8b5a      	ldrh	r2, [r3, #26]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	7b1b      	ldrb	r3, [r3, #12]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fb07 	bl	8008c34 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2204      	movs	r2, #4
 800762a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800762e:	e035      	b.n	800769c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	7b1b      	ldrb	r3, [r3, #12]
 8007634:	4619      	mov	r1, r3
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe04 	bl	8009244 <USBH_LL_GetURBState>
 800763c:	4603      	mov	r3, r0
 800763e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007640:	7cfb      	ldrb	r3, [r7, #19]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d129      	bne.n	800769a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	7b1b      	ldrb	r3, [r3, #12]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f001 fd67 	bl	8009120 <USBH_LL_GetLastXferSize>
 8007652:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	429a      	cmp	r2, r3
 800765c:	d016      	beq.n	800768c <CDC_ProcessReception+0x9e>
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	8b5b      	ldrh	r3, [r3, #26]
 8007662:	461a      	mov	r2, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4293      	cmp	r3, r2
 8007668:	d910      	bls.n	800768c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	1ad2      	subs	r2, r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	6a1a      	ldr	r2, [r3, #32]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	441a      	add	r2, r3
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2203      	movs	r2, #3
 8007686:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800768a:	e006      	b.n	800769a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f80f 	bl	80076b8 <USBH_CDC_ReceiveCallback>
      break;
 800769a:	bf00      	nop
  }
}
 800769c:	bf00      	nop
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80076f4:	2302      	movs	r3, #2
 80076f6:	e029      	b.n	800774c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	79fa      	ldrb	r2, [r7, #7]
 80076fc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f81f 	bl	8007754 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f001 fc39 	bl	8008fbc <USBH_LL_Init>

  return USBH_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e009      	b.n	800777a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	33e0      	adds	r3, #224	; 0xe0
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	3301      	adds	r3, #1
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b0e      	cmp	r3, #14
 800777e:	d9f2      	bls.n	8007766 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e009      	b.n	800779a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4413      	add	r3, r2
 800778c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007790:	2200      	movs	r2, #0
 8007792:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3301      	adds	r3, #1
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a0:	d3f1      	bcc.n	8007786 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d016      	beq.n	800783e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10e      	bne.n	8007838 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007820:	1c59      	adds	r1, r3, #1
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	33de      	adds	r3, #222	; 0xde
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	e004      	b.n	8007842 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007838:	2302      	movs	r3, #2
 800783a:	73fb      	strb	r3, [r7, #15]
 800783c:	e001      	b.n	8007842 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800783e:	2302      	movs	r3, #2
 8007840:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007842:	7bfb      	ldrb	r3, [r7, #15]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	429a      	cmp	r2, r3
 800786a:	d204      	bcs.n	8007876 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007874:	e001      	b.n	800787a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007876:	2302      	movs	r3, #2
 8007878:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	4603      	mov	r3, r0
 8007898:	70fb      	strb	r3, [r7, #3]
 800789a:	460b      	mov	r3, r1
 800789c:	70bb      	strb	r3, [r7, #2]
 800789e:	4613      	mov	r3, r2
 80078a0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80078b2:	e025      	b.n	8007900 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	221a      	movs	r2, #26
 80078b8:	fb02 f303 	mul.w	r3, r2, r3
 80078bc:	3308      	adds	r3, #8
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	3302      	adds	r3, #2
 80078c4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	795b      	ldrb	r3, [r3, #5]
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d002      	beq.n	80078d6 <USBH_FindInterface+0x4e>
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	2bff      	cmp	r3, #255	; 0xff
 80078d4:	d111      	bne.n	80078fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80078da:	78ba      	ldrb	r2, [r7, #2]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d002      	beq.n	80078e6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078e0:	78bb      	ldrb	r3, [r7, #2]
 80078e2:	2bff      	cmp	r3, #255	; 0xff
 80078e4:	d109      	bne.n	80078fa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80078ea:	787a      	ldrb	r2, [r7, #1]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d002      	beq.n	80078f6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80078f0:	787b      	ldrb	r3, [r7, #1]
 80078f2:	2bff      	cmp	r3, #255	; 0xff
 80078f4:	d101      	bne.n	80078fa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	e006      	b.n	8007908 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
 80078fc:	3301      	adds	r3, #1
 80078fe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d9d6      	bls.n	80078b4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007906:	23ff      	movs	r3, #255	; 0xff
}
 8007908:	4618      	mov	r0, r3
 800790a:	371c      	adds	r7, #28
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fb89 	bl	8009034 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007922:	2101      	movs	r1, #1
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fca0 	bl	800926a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af04      	add	r7, sp, #16
 800793a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007940:	2300      	movs	r3, #0
 8007942:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d102      	bne.n	8007956 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2203      	movs	r2, #3
 8007954:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b0b      	cmp	r3, #11
 800795e:	f200 81b3 	bhi.w	8007cc8 <USBH_Process+0x394>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <USBH_Process+0x34>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	08007999 	.word	0x08007999
 800796c:	080079cb 	.word	0x080079cb
 8007970:	08007a33 	.word	0x08007a33
 8007974:	08007c63 	.word	0x08007c63
 8007978:	08007cc9 	.word	0x08007cc9
 800797c:	08007ad7 	.word	0x08007ad7
 8007980:	08007c09 	.word	0x08007c09
 8007984:	08007b0d 	.word	0x08007b0d
 8007988:	08007b2d 	.word	0x08007b2d
 800798c:	08007b4d 	.word	0x08007b4d
 8007990:	08007b7b 	.word	0x08007b7b
 8007994:	08007c4b 	.word	0x08007c4b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8193 	beq.w	8007ccc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80079ac:	20c8      	movs	r0, #200	; 0xc8
 80079ae:	f001 fca6 	bl	80092fe <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fb99 	bl	80090ea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80079c8:	e180      	b.n	8007ccc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079e2:	e182      	b.n	8007cea <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079ee:	d914      	bls.n	8007a1a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d903      	bls.n	8007a12 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	220d      	movs	r2, #13
 8007a0e:	701a      	strb	r2, [r3, #0]
      break;
 8007a10:	e16b      	b.n	8007cea <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	e167      	b.n	8007cea <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007a20:	f103 020a 	add.w	r2, r3, #10
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007a2a:	200a      	movs	r0, #10
 8007a2c:	f001 fc67 	bl	80092fe <USBH_Delay>
      break;
 8007a30:	e15b      	b.n	8007cea <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d005      	beq.n	8007a48 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a42:	2104      	movs	r1, #4
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007a48:	2064      	movs	r0, #100	; 0x64
 8007a4a:	f001 fc58 	bl	80092fe <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 fb26 	bl	80090a0 <USBH_LL_GetSpeed>
 8007a54:	4603      	mov	r3, r0
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2205      	movs	r2, #5
 8007a62:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007a64:	2100      	movs	r1, #0
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 f931 	bl	8008cce <USBH_AllocPipe>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007a74:	2180      	movs	r1, #128	; 0x80
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f929 	bl	8008cce <USBH_AllocPipe>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461a      	mov	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7919      	ldrb	r1, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	9202      	str	r2, [sp, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	9201      	str	r2, [sp, #4]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f001 f8e2 	bl	8008c70 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	7959      	ldrb	r1, [r3, #5]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ac0:	b292      	uxth	r2, r2
 8007ac2:	9202      	str	r2, [sp, #8]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	9201      	str	r2, [sp, #4]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4603      	mov	r3, r0
 8007acc:	2200      	movs	r2, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f001 f8ce 	bl	8008c70 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ad4:	e109      	b.n	8007cea <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f90c 	bl	8007cf4 <USBH_HandleEnum>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 80f3 	bne.w	8007cd0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d103      	bne.n	8007b04 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2208      	movs	r2, #8
 8007b00:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007b02:	e0e5      	b.n	8007cd0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2207      	movs	r2, #7
 8007b08:	701a      	strb	r2, [r3, #0]
      break;
 8007b0a:	e0e1      	b.n	8007cd0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f000 80de 	beq.w	8007cd4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b1e:	2101      	movs	r1, #1
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2208      	movs	r2, #8
 8007b28:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b2a:	e0d3      	b.n	8007cd4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fc20 	bl	800837c <USBH_SetCfg>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 80ca 	bne.w	8007cd8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2209      	movs	r2, #9
 8007b48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b4a:	e0c5      	b.n	8007cd8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00b      	beq.n	8007b72 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fc30 	bl	80083c2 <USBH_SetFeature>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 80b9 	bne.w	8007cdc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b70:	e0b4      	b.n	8007cdc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	220a      	movs	r2, #10
 8007b76:	701a      	strb	r2, [r3, #0]
      break;
 8007b78:	e0b0      	b.n	8007cdc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 80ad 	beq.w	8007ce0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b8e:	2300      	movs	r3, #0
 8007b90:	73fb      	strb	r3, [r7, #15]
 8007b92:	e016      	b.n	8007bc2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b94:	7bfa      	ldrb	r2, [r7, #15]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32de      	adds	r2, #222	; 0xde
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	791a      	ldrb	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d108      	bne.n	8007bbc <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007baa:	7bfa      	ldrb	r2, [r7, #15]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	32de      	adds	r2, #222	; 0xde
 8007bb0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007bba:	e005      	b.n	8007bc8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	73fb      	strb	r3, [r7, #15]
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0e5      	beq.n	8007b94 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	4798      	blx	r3
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d109      	bne.n	8007bf8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2206      	movs	r2, #6
 8007be8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007bf0:	2103      	movs	r1, #3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bf6:	e073      	b.n	8007ce0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	220d      	movs	r2, #13
 8007bfc:	701a      	strb	r2, [r3, #0]
      break;
 8007bfe:	e06f      	b.n	8007ce0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	220d      	movs	r2, #13
 8007c04:	701a      	strb	r2, [r3, #0]
      break;
 8007c06:	e06b      	b.n	8007ce0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d017      	beq.n	8007c42 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d103      	bne.n	8007c32 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	220b      	movs	r2, #11
 8007c2e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c30:	e058      	b.n	8007ce4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d154      	bne.n	8007ce4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	220d      	movs	r2, #13
 8007c3e:	701a      	strb	r2, [r3, #0]
      break;
 8007c40:	e050      	b.n	8007ce4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	220d      	movs	r2, #13
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e04c      	b.n	8007ce4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d049      	beq.n	8007ce8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
      }
      break;
 8007c60:	e042      	b.n	8007ce8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7ff fd72 	bl	8007754 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d009      	beq.n	8007c8e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c9e:	2105      	movs	r1, #5
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d107      	bne.n	8007cc0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fe2b 	bl	8007914 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007cbe:	e014      	b.n	8007cea <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f9b7 	bl	8009034 <USBH_LL_Start>
      break;
 8007cc6:	e010      	b.n	8007cea <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007cc8:	bf00      	nop
 8007cca:	e00e      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007ccc:	bf00      	nop
 8007cce:	e00c      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007cd0:	bf00      	nop
 8007cd2:	e00a      	b.n	8007cea <USBH_Process+0x3b6>
    break;
 8007cd4:	bf00      	nop
 8007cd6:	e008      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007cd8:	bf00      	nop
 8007cda:	e006      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e004      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e002      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e000      	b.n	8007cea <USBH_Process+0x3b6>
      break;
 8007ce8:	bf00      	nop
  }
  return USBH_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af04      	add	r7, sp, #16
 8007cfa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	785b      	ldrb	r3, [r3, #1]
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	f200 81c1 	bhi.w	8008090 <USBH_HandleEnum+0x39c>
 8007d0e:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <USBH_HandleEnum+0x20>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d35 	.word	0x08007d35
 8007d18:	08007df3 	.word	0x08007df3
 8007d1c:	08007e5d 	.word	0x08007e5d
 8007d20:	08007eeb 	.word	0x08007eeb
 8007d24:	08007f55 	.word	0x08007f55
 8007d28:	08007fc5 	.word	0x08007fc5
 8007d2c:	0800800b 	.word	0x0800800b
 8007d30:	08008051 	.word	0x08008051
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007d34:	2108      	movs	r1, #8
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa50 	bl	80081dc <USBH_Get_DevDesc>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d130      	bne.n	8007da8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7919      	ldrb	r1, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007d6a:	b292      	uxth	r2, r2
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	9201      	str	r2, [sp, #4]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	4603      	mov	r3, r0
 8007d76:	2280      	movs	r2, #128	; 0x80
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 ff79 	bl	8008c70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7959      	ldrb	r1, [r3, #5]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d92:	b292      	uxth	r2, r2
 8007d94:	9202      	str	r2, [sp, #8]
 8007d96:	2200      	movs	r2, #0
 8007d98:	9201      	str	r2, [sp, #4]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2200      	movs	r2, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 ff65 	bl	8008c70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007da6:	e175      	b.n	8008094 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	f040 8172 	bne.w	8008094 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007db6:	3301      	adds	r3, #1
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	d903      	bls.n	8007dd2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	220d      	movs	r2, #13
 8007dce:	701a      	strb	r2, [r3, #0]
      break;
 8007dd0:	e160      	b.n	8008094 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	795b      	ldrb	r3, [r3, #5]
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 ff99 	bl	8008d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	791b      	ldrb	r3, [r3, #4]
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 ff93 	bl	8008d10 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
      break;
 8007df0:	e150      	b.n	8008094 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007df2:	2112      	movs	r1, #18
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9f1 	bl	80081dc <USBH_Get_DevDesc>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e0a:	e145      	b.n	8008098 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	f040 8142 	bne.w	8008098 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d903      	bls.n	8007e36 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220d      	movs	r2, #13
 8007e32:	701a      	strb	r2, [r3, #0]
      break;
 8007e34:	e130      	b.n	8008098 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	795b      	ldrb	r3, [r3, #5]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 ff67 	bl	8008d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 ff61 	bl	8008d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	701a      	strb	r2, [r3, #0]
      break;
 8007e5a:	e11d      	b.n	8008098 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa68 	bl	8008334 <USBH_SetAddress>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e68:	7bbb      	ldrb	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d132      	bne.n	8007ed4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007e6e:	2002      	movs	r0, #2
 8007e70:	f001 fa45 	bl	80092fe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2203      	movs	r2, #3
 8007e80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7919      	ldrb	r1, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e96:	b292      	uxth	r2, r2
 8007e98:	9202      	str	r2, [sp, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	9201      	str	r2, [sp, #4]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2280      	movs	r2, #128	; 0x80
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fee3 	bl	8008c70 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7959      	ldrb	r1, [r3, #5]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ebe:	b292      	uxth	r2, r2
 8007ec0:	9202      	str	r2, [sp, #8]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	9201      	str	r2, [sp, #4]
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2200      	movs	r2, #0
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fecf 	bl	8008c70 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ed2:	e0e3      	b.n	800809c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	f040 80e0 	bne.w	800809c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220d      	movs	r2, #13
 8007ee0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	705a      	strb	r2, [r3, #1]
      break;
 8007ee8:	e0d8      	b.n	800809c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007eea:	2109      	movs	r1, #9
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f99d 	bl	800822c <USBH_Get_CfgDesc>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d103      	bne.n	8007f04 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2204      	movs	r2, #4
 8007f00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f02:	e0cd      	b.n	80080a0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	f040 80ca 	bne.w	80080a0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f12:	3301      	adds	r3, #1
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d903      	bls.n	8007f2e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220d      	movs	r2, #13
 8007f2a:	701a      	strb	r2, [r3, #0]
      break;
 8007f2c:	e0b8      	b.n	80080a0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	795b      	ldrb	r3, [r3, #5]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 feeb 	bl	8008d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fee5 	bl	8008d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	701a      	strb	r2, [r3, #0]
      break;
 8007f52:	e0a5      	b.n	80080a0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f965 	bl	800822c <USBH_Get_CfgDesc>
 8007f62:	4603      	mov	r3, r0
 8007f64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2205      	movs	r2, #5
 8007f70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007f72:	e097      	b.n	80080a4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	f040 8094 	bne.w	80080a4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f82:	3301      	adds	r3, #1
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d903      	bls.n	8007f9e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	220d      	movs	r2, #13
 8007f9a:	701a      	strb	r2, [r3, #0]
      break;
 8007f9c:	e082      	b.n	80080a4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	795b      	ldrb	r3, [r3, #5]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 feb3 	bl	8008d10 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	791b      	ldrb	r3, [r3, #4]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fead 	bl	8008d10 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	701a      	strb	r2, [r3, #0]
      break;
 8007fc2:	e06f      	b.n	80080a4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d019      	beq.n	8008002 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007fda:	23ff      	movs	r3, #255	; 0xff
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f949 	bl	8008274 <USBH_Get_StringDesc>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2206      	movs	r2, #6
 8007ff0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007ff2:	e059      	b.n	80080a8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d156      	bne.n	80080a8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	705a      	strb	r2, [r3, #1]
      break;
 8008000:	e052      	b.n	80080a8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2206      	movs	r2, #6
 8008006:	705a      	strb	r2, [r3, #1]
      break;
 8008008:	e04e      	b.n	80080a8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008010:	2b00      	cmp	r3, #0
 8008012:	d019      	beq.n	8008048 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008020:	23ff      	movs	r3, #255	; 0xff
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f926 	bl	8008274 <USBH_Get_StringDesc>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2207      	movs	r2, #7
 8008036:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008038:	e038      	b.n	80080ac <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b03      	cmp	r3, #3
 800803e:	d135      	bne.n	80080ac <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2207      	movs	r2, #7
 8008044:	705a      	strb	r2, [r3, #1]
      break;
 8008046:	e031      	b.n	80080ac <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2207      	movs	r2, #7
 800804c:	705a      	strb	r2, [r3, #1]
      break;
 800804e:	e02d      	b.n	80080ac <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008056:	2b00      	cmp	r3, #0
 8008058:	d017      	beq.n	800808a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008066:	23ff      	movs	r3, #255	; 0xff
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f903 	bl	8008274 <USBH_Get_StringDesc>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800807c:	e018      	b.n	80080b0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d115      	bne.n	80080b0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
      break;
 8008088:	e012      	b.n	80080b0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
      break;
 800808e:	e00f      	b.n	80080b0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008090:	bf00      	nop
 8008092:	e00e      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 8008094:	bf00      	nop
 8008096:	e00c      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 8008098:	bf00      	nop
 800809a:	e00a      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 800809c:	bf00      	nop
 800809e:	e008      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 80080a0:	bf00      	nop
 80080a2:	e006      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 80080a4:	bf00      	nop
 80080a6:	e004      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 80080a8:	bf00      	nop
 80080aa:	e002      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 80080ac:	bf00      	nop
 80080ae:	e000      	b.n	80080b2 <USBH_HandleEnum+0x3be>
      break;
 80080b0:	bf00      	nop
  }
  return Status;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b082      	sub	sp, #8
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f804 	bl	80080fe <USBH_HandleSof>
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2b0b      	cmp	r3, #11
 800810e:	d10a      	bne.n	8008126 <USBH_HandleSof+0x28>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008116:	2b00      	cmp	r3, #0
 8008118:	d005      	beq.n	8008126 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
  }
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800813e:	bf00      	nop
}
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800815a:	bf00      	nop
}
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008166:	b480      	push	{r7}
 8008168:	b083      	sub	sp, #12
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 ff58 	bl	800906a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	791b      	ldrb	r3, [r3, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fda5 	bl	8008d10 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	795b      	ldrb	r3, [r3, #5]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fd9f 	bl	8008d10 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4613      	mov	r3, r2
 80081f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081fa:	2100      	movs	r1, #0
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f864 	bl	80082ca <USBH_GetDescriptor>
 8008202:	4603      	mov	r3, r0
 8008204:	73fb      	strb	r3, [r7, #15]
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10a      	bne.n	8008222 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008218:	78fa      	ldrb	r2, [r7, #3]
 800821a:	b292      	uxth	r2, r2
 800821c:	4619      	mov	r1, r3
 800821e:	f000 f918 	bl	8008452 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	460b      	mov	r3, r1
 8008236:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	331c      	adds	r3, #28
 800823c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800823e:	887b      	ldrh	r3, [r7, #2]
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f83d 	bl	80082ca <USBH_GetDescriptor>
 8008250:	4603      	mov	r3, r0
 8008252:	72fb      	strb	r3, [r7, #11]
 8008254:	7afb      	ldrb	r3, [r7, #11]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d107      	bne.n	800826a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008260:	887a      	ldrh	r2, [r7, #2]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 f964 	bl	8008532 <USBH_ParseCfgDesc>
  }

  return status;
 800826a:	7afb      	ldrb	r3, [r7, #11]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af02      	add	r7, sp, #8
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	607a      	str	r2, [r7, #4]
 800827e:	461a      	mov	r2, r3
 8008280:	460b      	mov	r3, r1
 8008282:	72fb      	strb	r3, [r7, #11]
 8008284:	4613      	mov	r3, r2
 8008286:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008288:	7afb      	ldrb	r3, [r7, #11]
 800828a:	b29b      	uxth	r3, r3
 800828c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008290:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008298:	893b      	ldrh	r3, [r7, #8]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	460b      	mov	r3, r1
 800829e:	2100      	movs	r1, #0
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f812 	bl	80082ca <USBH_GetDescriptor>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75fb      	strb	r3, [r7, #23]
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d107      	bne.n	80082c0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80082b6:	893a      	ldrh	r2, [r7, #8]
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fa37 	bl	800872e <USBH_ParseStringDesc>
  }

  return status;
 80082c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	72fb      	strb	r3, [r7, #11]
 80082d8:	4613      	mov	r3, r2
 80082da:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	789b      	ldrb	r3, [r3, #2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d11c      	bne.n	800831e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80082e4:	7afb      	ldrb	r3, [r7, #11]
 80082e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2206      	movs	r2, #6
 80082f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	893a      	ldrh	r2, [r7, #8]
 80082fa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80082fc:	893b      	ldrh	r3, [r7, #8]
 80082fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008306:	d104      	bne.n	8008312 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f240 4209 	movw	r2, #1033	; 0x409
 800830e:	829a      	strh	r2, [r3, #20]
 8008310:	e002      	b.n	8008318 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8b3a      	ldrh	r2, [r7, #24]
 800831c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800831e:	8b3b      	ldrh	r3, [r7, #24]
 8008320:	461a      	mov	r2, r3
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 fa50 	bl	80087ca <USBH_CtlReq>
 800832a:	4603      	mov	r3, r0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	789b      	ldrb	r3, [r3, #2]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d10f      	bne.n	8008368 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	b29a      	uxth	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008368:	2200      	movs	r2, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fa2c 	bl	80087ca <USBH_CtlReq>
 8008372:	4603      	mov	r3, r0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	460b      	mov	r3, r1
 8008386:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	789b      	ldrb	r3, [r3, #2]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d10e      	bne.n	80083ae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2209      	movs	r2, #9
 800839a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	887a      	ldrh	r2, [r7, #2]
 80083a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa09 	bl	80087ca <USBH_CtlReq>
 80083b8:	4603      	mov	r3, r0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	460b      	mov	r3, r1
 80083cc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	789b      	ldrb	r3, [r3, #2]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d10f      	bne.n	80083f6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2203      	movs	r2, #3
 80083e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9e5 	bl	80087ca <USBH_CtlReq>
 8008400:	4603      	mov	r3, r0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
 8008412:	460b      	mov	r3, r1
 8008414:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	789b      	ldrb	r3, [r3, #2]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10f      	bne.n	800843e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2202      	movs	r2, #2
 8008422:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	b29a      	uxth	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800843e:	2200      	movs	r2, #0
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9c1 	bl	80087ca <USBH_CtlReq>
 8008448:	4603      	mov	r3, r0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	4613      	mov	r3, r2
 800845e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	785a      	ldrb	r2, [r3, #1]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3302      	adds	r3, #2
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b29a      	uxth	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	3303      	adds	r3, #3
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	b29b      	uxth	r3, r3
 8008480:	021b      	lsls	r3, r3, #8
 8008482:	b29b      	uxth	r3, r3
 8008484:	4313      	orrs	r3, r2
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	791a      	ldrb	r2, [r3, #4]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	795a      	ldrb	r2, [r3, #5]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	799a      	ldrb	r2, [r3, #6]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	79da      	ldrb	r2, [r3, #7]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d939      	bls.n	8008526 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	3308      	adds	r3, #8
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	3309      	adds	r3, #9
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	330a      	adds	r3, #10
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	330b      	adds	r3, #11
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	021b      	lsls	r3, r3, #8
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	330c      	adds	r3, #12
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	330d      	adds	r3, #13
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	021b      	lsls	r3, r3, #8
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	b29a      	uxth	r2, r3
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	7b9a      	ldrb	r2, [r3, #14]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	7bda      	ldrb	r2, [r3, #15]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	7c1a      	ldrb	r2, [r3, #16]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	7c5a      	ldrb	r2, [r3, #17]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	745a      	strb	r2, [r3, #17]
  }
}
 8008526:	bf00      	nop
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b08a      	sub	sp, #40	; 0x28
 8008536:	af00      	add	r7, sp, #0
 8008538:	60f8      	str	r0, [r7, #12]
 800853a:	60b9      	str	r1, [r7, #8]
 800853c:	4613      	mov	r3, r2
 800853e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	785a      	ldrb	r2, [r3, #1]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3302      	adds	r3, #2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b29a      	uxth	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	3303      	adds	r3, #3
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	b29b      	uxth	r3, r3
 8008578:	4313      	orrs	r3, r2
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	791a      	ldrb	r2, [r3, #4]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	795a      	ldrb	r2, [r3, #5]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	799a      	ldrb	r2, [r3, #6]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	79da      	ldrb	r2, [r3, #7]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	7a1a      	ldrb	r2, [r3, #8]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80085a8:	88fb      	ldrh	r3, [r7, #6]
 80085aa:	2b09      	cmp	r3, #9
 80085ac:	d95f      	bls.n	800866e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80085ae:	2309      	movs	r3, #9
 80085b0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085b6:	e051      	b.n	800865c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085b8:	f107 0316 	add.w	r3, r7, #22
 80085bc:	4619      	mov	r1, r3
 80085be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085c0:	f000 f8e8 	bl	8008794 <USBH_GetNextDesc>
 80085c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	785b      	ldrb	r3, [r3, #1]
 80085ca:	2b04      	cmp	r3, #4
 80085cc:	d146      	bne.n	800865c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80085ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085d2:	221a      	movs	r2, #26
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	3308      	adds	r3, #8
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4413      	add	r3, r2
 80085de:	3302      	adds	r3, #2
 80085e0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80085e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085e4:	69f8      	ldr	r0, [r7, #28]
 80085e6:	f000 f846 	bl	8008676 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085f4:	e022      	b.n	800863c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80085f6:	f107 0316 	add.w	r3, r7, #22
 80085fa:	4619      	mov	r1, r3
 80085fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085fe:	f000 f8c9 	bl	8008794 <USBH_GetNextDesc>
 8008602:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	785b      	ldrb	r3, [r3, #1]
 8008608:	2b05      	cmp	r3, #5
 800860a:	d117      	bne.n	800863c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800860c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008610:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008614:	3201      	adds	r2, #1
 8008616:	00d2      	lsls	r2, r2, #3
 8008618:	211a      	movs	r1, #26
 800861a:	fb01 f303 	mul.w	r3, r1, r3
 800861e:	4413      	add	r3, r2
 8008620:	3308      	adds	r3, #8
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	3304      	adds	r3, #4
 8008628:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800862a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800862c:	69b8      	ldr	r0, [r7, #24]
 800862e:	f000 f851 	bl	80086d4 <USBH_ParseEPDesc>
            ep_ix++;
 8008632:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008636:	3301      	adds	r3, #1
 8008638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	791b      	ldrb	r3, [r3, #4]
 8008640:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008644:	429a      	cmp	r2, r3
 8008646:	d204      	bcs.n	8008652 <USBH_ParseCfgDesc+0x120>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	885a      	ldrh	r2, [r3, #2]
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	429a      	cmp	r2, r3
 8008650:	d8d1      	bhi.n	80085f6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008656:	3301      	adds	r3, #1
 8008658:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800865c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008660:	2b01      	cmp	r3, #1
 8008662:	d804      	bhi.n	800866e <USBH_ParseCfgDesc+0x13c>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	885a      	ldrh	r2, [r3, #2]
 8008668:	8afb      	ldrh	r3, [r7, #22]
 800866a:	429a      	cmp	r2, r3
 800866c:	d8a4      	bhi.n	80085b8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800866e:	bf00      	nop
 8008670:	3728      	adds	r7, #40	; 0x28
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	785a      	ldrb	r2, [r3, #1]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	789a      	ldrb	r2, [r3, #2]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	78da      	ldrb	r2, [r3, #3]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	791a      	ldrb	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	795a      	ldrb	r2, [r3, #5]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	799a      	ldrb	r2, [r3, #6]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	79da      	ldrb	r2, [r3, #7]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	7a1a      	ldrb	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	721a      	strb	r2, [r3, #8]
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781a      	ldrb	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	785a      	ldrb	r2, [r3, #1]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	789a      	ldrb	r2, [r3, #2]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	78da      	ldrb	r2, [r3, #3]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	3304      	adds	r3, #4
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b29a      	uxth	r2, r3
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3305      	adds	r3, #5
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b29b      	uxth	r3, r3
 800870e:	021b      	lsls	r3, r3, #8
 8008710:	b29b      	uxth	r3, r3
 8008712:	4313      	orrs	r3, r2
 8008714:	b29a      	uxth	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	799a      	ldrb	r2, [r3, #6]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	719a      	strb	r2, [r3, #6]
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	4613      	mov	r3, r2
 800873a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3301      	adds	r3, #1
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d120      	bne.n	8008788 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	1e9a      	subs	r2, r3, #2
 800874c:	88fb      	ldrh	r3, [r7, #6]
 800874e:	4293      	cmp	r3, r2
 8008750:	bf28      	it	cs
 8008752:	4613      	movcs	r3, r2
 8008754:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3302      	adds	r3, #2
 800875a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800875c:	2300      	movs	r3, #0
 800875e:	82fb      	strh	r3, [r7, #22]
 8008760:	e00b      	b.n	800877a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008762:	8afb      	ldrh	r3, [r7, #22]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	781a      	ldrb	r2, [r3, #0]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	3301      	adds	r3, #1
 8008772:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008774:	8afb      	ldrh	r3, [r7, #22]
 8008776:	3302      	adds	r3, #2
 8008778:	82fb      	strh	r3, [r7, #22]
 800877a:	8afa      	ldrh	r2, [r7, #22]
 800877c:	8abb      	ldrh	r3, [r7, #20]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3ef      	bcc.n	8008762 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
  }
}
 8008788:	bf00      	nop
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	881a      	ldrh	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	4413      	add	r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087bc:	68fb      	ldr	r3, [r7, #12]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b086      	sub	sp, #24
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	60f8      	str	r0, [r7, #12]
 80087d2:	60b9      	str	r1, [r7, #8]
 80087d4:	4613      	mov	r3, r2
 80087d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087d8:	2301      	movs	r3, #1
 80087da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	789b      	ldrb	r3, [r3, #2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d002      	beq.n	80087ea <USBH_CtlReq+0x20>
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d00f      	beq.n	8008808 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80087e8:	e027      	b.n	800883a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	88fa      	ldrh	r2, [r7, #6]
 80087f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2202      	movs	r2, #2
 8008800:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008802:	2301      	movs	r3, #1
 8008804:	75fb      	strb	r3, [r7, #23]
      break;
 8008806:	e018      	b.n	800883a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f000 f81b 	bl	8008844 <USBH_HandleControl>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <USBH_CtlReq+0x54>
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	2b03      	cmp	r3, #3
 800881c:	d106      	bne.n	800882c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	761a      	strb	r2, [r3, #24]
      break;
 800882a:	e005      	b.n	8008838 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800882c:	7dfb      	ldrb	r3, [r7, #23]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d102      	bne.n	8008838 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	709a      	strb	r2, [r3, #2]
      break;
 8008838:	bf00      	nop
  }
  return status;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af02      	add	r7, sp, #8
 800884a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008850:	2300      	movs	r3, #0
 8008852:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	7e1b      	ldrb	r3, [r3, #24]
 8008858:	3b01      	subs	r3, #1
 800885a:	2b0a      	cmp	r3, #10
 800885c:	f200 8158 	bhi.w	8008b10 <USBH_HandleControl+0x2cc>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBH_HandleControl+0x24>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	08008895 	.word	0x08008895
 800886c:	080088af 	.word	0x080088af
 8008870:	08008919 	.word	0x08008919
 8008874:	0800893f 	.word	0x0800893f
 8008878:	08008977 	.word	0x08008977
 800887c:	080089a3 	.word	0x080089a3
 8008880:	080089f5 	.word	0x080089f5
 8008884:	08008a17 	.word	0x08008a17
 8008888:	08008a53 	.word	0x08008a53
 800888c:	08008a7b 	.word	0x08008a7b
 8008890:	08008ab9 	.word	0x08008ab9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f103 0110 	add.w	r1, r3, #16
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	795b      	ldrb	r3, [r3, #5]
 800889e:	461a      	mov	r2, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f945 	bl	8008b30 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	761a      	strb	r2, [r3, #24]
      break;
 80088ac:	e13b      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	795b      	ldrb	r3, [r3, #5]
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fcc5 	bl	8009244 <USBH_LL_GetURBState>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088be:	7bbb      	ldrb	r3, [r7, #14]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d11e      	bne.n	8008902 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7c1b      	ldrb	r3, [r3, #16]
 80088c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	8adb      	ldrh	r3, [r3, #22]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088d6:	7b7b      	ldrb	r3, [r7, #13]
 80088d8:	2b80      	cmp	r3, #128	; 0x80
 80088da:	d103      	bne.n	80088e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2203      	movs	r2, #3
 80088e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088e2:	e117      	b.n	8008b14 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2205      	movs	r2, #5
 80088e8:	761a      	strb	r2, [r3, #24]
      break;
 80088ea:	e113      	b.n	8008b14 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80088ec:	7b7b      	ldrb	r3, [r7, #13]
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d103      	bne.n	80088fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2209      	movs	r2, #9
 80088f6:	761a      	strb	r2, [r3, #24]
      break;
 80088f8:	e10c      	b.n	8008b14 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2207      	movs	r2, #7
 80088fe:	761a      	strb	r2, [r3, #24]
      break;
 8008900:	e108      	b.n	8008b14 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b04      	cmp	r3, #4
 8008906:	d003      	beq.n	8008910 <USBH_HandleControl+0xcc>
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b02      	cmp	r3, #2
 800890c:	f040 8102 	bne.w	8008b14 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	220b      	movs	r2, #11
 8008914:	761a      	strb	r2, [r3, #24]
      break;
 8008916:	e0fd      	b.n	8008b14 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800891e:	b29a      	uxth	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6899      	ldr	r1, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	899a      	ldrh	r2, [r3, #12]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	791b      	ldrb	r3, [r3, #4]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f93c 	bl	8008bae <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2204      	movs	r2, #4
 800893a:	761a      	strb	r2, [r3, #24]
      break;
 800893c:	e0f3      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	791b      	ldrb	r3, [r3, #4]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fc7d 	bl	8009244 <USBH_LL_GetURBState>
 800894a:	4603      	mov	r3, r0
 800894c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800894e:	7bbb      	ldrb	r3, [r7, #14]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d102      	bne.n	800895a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2209      	movs	r2, #9
 8008958:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b05      	cmp	r3, #5
 800895e:	d102      	bne.n	8008966 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008960:	2303      	movs	r3, #3
 8008962:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008964:	e0d8      	b.n	8008b18 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008966:	7bbb      	ldrb	r3, [r7, #14]
 8008968:	2b04      	cmp	r3, #4
 800896a:	f040 80d5 	bne.w	8008b18 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	220b      	movs	r2, #11
 8008972:	761a      	strb	r2, [r3, #24]
      break;
 8008974:	e0d0      	b.n	8008b18 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6899      	ldr	r1, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	899a      	ldrh	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7958      	ldrb	r0, [r3, #5]
 8008982:	2301      	movs	r3, #1
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	4603      	mov	r3, r0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8eb 	bl	8008b64 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008994:	b29a      	uxth	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2206      	movs	r2, #6
 800899e:	761a      	strb	r2, [r3, #24]
      break;
 80089a0:	e0c1      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	795b      	ldrb	r3, [r3, #5]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fc4b 	bl	8009244 <USBH_LL_GetURBState>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089b2:	7bbb      	ldrb	r3, [r7, #14]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d103      	bne.n	80089c0 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2207      	movs	r2, #7
 80089bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089be:	e0ad      	b.n	8008b1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
 80089c2:	2b05      	cmp	r3, #5
 80089c4:	d105      	bne.n	80089d2 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	220c      	movs	r2, #12
 80089ca:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089cc:	2303      	movs	r3, #3
 80089ce:	73fb      	strb	r3, [r7, #15]
      break;
 80089d0:	e0a4      	b.n	8008b1c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d103      	bne.n	80089e0 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2205      	movs	r2, #5
 80089dc:	761a      	strb	r2, [r3, #24]
      break;
 80089de:	e09d      	b.n	8008b1c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	f040 809a 	bne.w	8008b1c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220b      	movs	r2, #11
 80089ec:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80089ee:	2302      	movs	r3, #2
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e093      	b.n	8008b1c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	791b      	ldrb	r3, [r3, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	2100      	movs	r1, #0
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f8d6 	bl	8008bae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2208      	movs	r2, #8
 8008a12:	761a      	strb	r2, [r3, #24]

      break;
 8008a14:	e087      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fc11 	bl	8009244 <USBH_LL_GetURBState>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d105      	bne.n	8008a38 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	220d      	movs	r2, #13
 8008a30:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a36:	e073      	b.n	8008b20 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d103      	bne.n	8008a46 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	220b      	movs	r2, #11
 8008a42:	761a      	strb	r2, [r3, #24]
      break;
 8008a44:	e06c      	b.n	8008b20 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	2b05      	cmp	r3, #5
 8008a4a:	d169      	bne.n	8008b20 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a50:	e066      	b.n	8008b20 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	795a      	ldrb	r2, [r3, #5]
 8008a56:	2301      	movs	r3, #1
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f87f 	bl	8008b64 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220a      	movs	r2, #10
 8008a76:	761a      	strb	r2, [r3, #24]
      break;
 8008a78:	e055      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	795b      	ldrb	r3, [r3, #5]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fbdf 	bl	8009244 <USBH_LL_GetURBState>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d105      	bne.n	8008a9c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	220d      	movs	r2, #13
 8008a98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a9a:	e043      	b.n	8008b24 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d103      	bne.n	8008aaa <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2209      	movs	r2, #9
 8008aa6:	761a      	strb	r2, [r3, #24]
      break;
 8008aa8:	e03c      	b.n	8008b24 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b04      	cmp	r3, #4
 8008aae:	d139      	bne.n	8008b24 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	220b      	movs	r2, #11
 8008ab4:	761a      	strb	r2, [r3, #24]
      break;
 8008ab6:	e035      	b.n	8008b24 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	7e5b      	ldrb	r3, [r3, #25]
 8008abc:	3301      	adds	r3, #1
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	765a      	strb	r2, [r3, #25]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7e5b      	ldrb	r3, [r3, #25]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d806      	bhi.n	8008ada <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ad8:	e025      	b.n	8008b26 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ae0:	2106      	movs	r1, #6
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	795b      	ldrb	r3, [r3, #5]
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f90c 	bl	8008d10 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	791b      	ldrb	r3, [r3, #4]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 f906 	bl	8008d10 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0e:	e00a      	b.n	8008b26 <USBH_HandleControl+0x2e2>

    default:
      break;
 8008b10:	bf00      	nop
 8008b12:	e008      	b.n	8008b26 <USBH_HandleControl+0x2e2>
      break;
 8008b14:	bf00      	nop
 8008b16:	e006      	b.n	8008b26 <USBH_HandleControl+0x2e2>
      break;
 8008b18:	bf00      	nop
 8008b1a:	e004      	b.n	8008b26 <USBH_HandleControl+0x2e2>
      break;
 8008b1c:	bf00      	nop
 8008b1e:	e002      	b.n	8008b26 <USBH_HandleControl+0x2e2>
      break;
 8008b20:	bf00      	nop
 8008b22:	e000      	b.n	8008b26 <USBH_HandleControl+0x2e2>
      break;
 8008b24:	bf00      	nop
  }

  return status;
 8008b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b3e:	79f9      	ldrb	r1, [r7, #7]
 8008b40:	2300      	movs	r3, #0
 8008b42:	9303      	str	r3, [sp, #12]
 8008b44:	2308      	movs	r3, #8
 8008b46:	9302      	str	r3, [sp, #8]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	9301      	str	r3, [sp, #4]
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	2300      	movs	r3, #0
 8008b52:	2200      	movs	r2, #0
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fb44 	bl	80091e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	460b      	mov	r3, r1
 8008b74:	80fb      	strh	r3, [r7, #6]
 8008b76:	4613      	mov	r3, r2
 8008b78:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b88:	7979      	ldrb	r1, [r7, #5]
 8008b8a:	7e3b      	ldrb	r3, [r7, #24]
 8008b8c:	9303      	str	r3, [sp, #12]
 8008b8e:	88fb      	ldrh	r3, [r7, #6]
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	9301      	str	r3, [sp, #4]
 8008b96:	2301      	movs	r3, #1
 8008b98:	9300      	str	r3, [sp, #0]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f000 fb1f 	bl	80091e2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b088      	sub	sp, #32
 8008bb2:	af04      	add	r7, sp, #16
 8008bb4:	60f8      	str	r0, [r7, #12]
 8008bb6:	60b9      	str	r1, [r7, #8]
 8008bb8:	4611      	mov	r1, r2
 8008bba:	461a      	mov	r2, r3
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	80fb      	strh	r3, [r7, #6]
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bc4:	7979      	ldrb	r1, [r7, #5]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	9303      	str	r3, [sp, #12]
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	9302      	str	r3, [sp, #8]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2201      	movs	r2, #1
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fb01 	bl	80091e2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008be0:	2300      	movs	r3, #0

}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b088      	sub	sp, #32
 8008bee:	af04      	add	r7, sp, #16
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	80fb      	strh	r3, [r7, #6]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c0e:	7979      	ldrb	r1, [r7, #5]
 8008c10:	7e3b      	ldrb	r3, [r7, #24]
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	88fb      	ldrh	r3, [r7, #6]
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2302      	movs	r3, #2
 8008c22:	2200      	movs	r2, #0
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f000 fadc 	bl	80091e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af04      	add	r7, sp, #16
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	460b      	mov	r3, r1
 8008c44:	80fb      	strh	r3, [r7, #6]
 8008c46:	4613      	mov	r3, r2
 8008c48:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008c4a:	7979      	ldrb	r1, [r7, #5]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	9303      	str	r3, [sp, #12]
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	2301      	movs	r3, #1
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	2201      	movs	r2, #1
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 fabe 	bl	80091e2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af04      	add	r7, sp, #16
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	4608      	mov	r0, r1
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	4603      	mov	r3, r0
 8008c80:	70fb      	strb	r3, [r7, #3]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70bb      	strb	r3, [r7, #2]
 8008c86:	4613      	mov	r3, r2
 8008c88:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c8a:	7878      	ldrb	r0, [r7, #1]
 8008c8c:	78ba      	ldrb	r2, [r7, #2]
 8008c8e:	78f9      	ldrb	r1, [r7, #3]
 8008c90:	8b3b      	ldrh	r3, [r7, #24]
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	7d3b      	ldrb	r3, [r7, #20]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	7c3b      	ldrb	r3, [r7, #16]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa51 	bl	8009146 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008cba:	78fb      	ldrb	r3, [r7, #3]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa70 	bl	80091a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f836 	bl	8008d4c <USBH_GetFreePipe>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ce4:	89fb      	ldrh	r3, [r7, #14]
 8008ce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d00a      	beq.n	8008d04 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	89fb      	ldrh	r3, [r7, #14]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	33e0      	adds	r3, #224	; 0xe0
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	b2db      	uxtb	r3, r3
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	2b0a      	cmp	r3, #10
 8008d20:	d80d      	bhi.n	8008d3e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d22:	78fb      	ldrb	r3, [r7, #3]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	33e0      	adds	r3, #224	; 0xe0
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	78fb      	ldrb	r3, [r7, #3]
 8008d30:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	33e0      	adds	r3, #224	; 0xe0
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	440b      	add	r3, r1
 8008d3c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr

08008d4c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
 8008d5c:	e00f      	b.n	8008d7e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	33e0      	adds	r3, #224	; 0xe0
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d102      	bne.n	8008d78 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	e007      	b.n	8008d88 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	73fb      	strb	r3, [r7, #15]
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b0a      	cmp	r3, #10
 8008d82:	d9ec      	bls.n	8008d5e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	490e      	ldr	r1, [pc, #56]	; (8008dd4 <MX_USB_HOST_Init+0x40>)
 8008d9c:	480e      	ldr	r0, [pc, #56]	; (8008dd8 <MX_USB_HOST_Init+0x44>)
 8008d9e:	f7fe fc9f 	bl	80076e0 <USBH_Init>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008da8:	f7f7 fe2c 	bl	8000a04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008dac:	490b      	ldr	r1, [pc, #44]	; (8008ddc <MX_USB_HOST_Init+0x48>)
 8008dae:	480a      	ldr	r0, [pc, #40]	; (8008dd8 <MX_USB_HOST_Init+0x44>)
 8008db0:	f7fe fd24 	bl	80077fc <USBH_RegisterClass>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008dba:	f7f7 fe23 	bl	8000a04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008dbe:	4806      	ldr	r0, [pc, #24]	; (8008dd8 <MX_USB_HOST_Init+0x44>)
 8008dc0:	f7fe fda8 	bl	8007914 <USBH_Start>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008dca:	f7f7 fe1b 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008dce:	bf00      	nop
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	08008df5 	.word	0x08008df5
 8008dd8:	200001bc 	.word	0x200001bc
 8008ddc:	2000000c 	.word	0x2000000c

08008de0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008de4:	4802      	ldr	r0, [pc, #8]	; (8008df0 <MX_USB_HOST_Process+0x10>)
 8008de6:	f7fe fda5 	bl	8007934 <USBH_Process>
}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200001bc 	.word	0x200001bc

08008df4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	3b01      	subs	r3, #1
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d819      	bhi.n	8008e3c <USBH_UserProcess+0x48>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <USBH_UserProcess+0x1c>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	08008e2d 	.word	0x08008e2d
 8008e18:	08008e3d 	.word	0x08008e3d
 8008e1c:	08008e35 	.word	0x08008e35
 8008e20:	08008e25 	.word	0x08008e25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <USBH_UserProcess+0x58>)
 8008e26:	2203      	movs	r2, #3
 8008e28:	701a      	strb	r2, [r3, #0]
  break;
 8008e2a:	e008      	b.n	8008e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <USBH_UserProcess+0x58>)
 8008e2e:	2202      	movs	r2, #2
 8008e30:	701a      	strb	r2, [r3, #0]
  break;
 8008e32:	e004      	b.n	8008e3e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <USBH_UserProcess+0x58>)
 8008e36:	2201      	movs	r2, #1
 8008e38:	701a      	strb	r2, [r3, #0]
  break;
 8008e3a:	e000      	b.n	8008e3e <USBH_UserProcess+0x4a>

  default:
  break;
 8008e3c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	200000b4 	.word	0x200000b4

08008e50 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b08a      	sub	sp, #40	; 0x28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e58:	f107 0314 	add.w	r3, r7, #20
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	605a      	str	r2, [r3, #4]
 8008e62:	609a      	str	r2, [r3, #8]
 8008e64:	60da      	str	r2, [r3, #12]
 8008e66:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e70:	d147      	bne.n	8008f02 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e72:	2300      	movs	r3, #0
 8008e74:	613b      	str	r3, [r7, #16]
 8008e76:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	4a24      	ldr	r2, [pc, #144]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008e7c:	f043 0301 	orr.w	r3, r3, #1
 8008e80:	6313      	str	r3, [r2, #48]	; 0x30
 8008e82:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	481b      	ldr	r0, [pc, #108]	; (8008f10 <HAL_HCD_MspInit+0xc0>)
 8008ea4:	f7f8 f976 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008ea8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eae:	2302      	movs	r3, #2
 8008eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008eba:	230a      	movs	r3, #10
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ebe:	f107 0314 	add.w	r3, r7, #20
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	4812      	ldr	r0, [pc, #72]	; (8008f10 <HAL_HCD_MspInit+0xc0>)
 8008ec6:	f7f8 f965 	bl	8001194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008eca:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	4a0f      	ldr	r2, [pc, #60]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed4:	6353      	str	r3, [r2, #52]	; 0x34
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	4b0c      	ldr	r3, [pc, #48]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ede:	4a0b      	ldr	r2, [pc, #44]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee6:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <HAL_HCD_MspInit+0xbc>)
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	2043      	movs	r0, #67	; 0x43
 8008ef8:	f7f8 f8e5 	bl	80010c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008efc:	2043      	movs	r0, #67	; 0x43
 8008efe:	f7f8 f8fe 	bl	80010fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f02:	bf00      	nop
 8008f04:	3728      	adds	r7, #40	; 0x28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	40020000 	.word	0x40020000

08008f14 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff f8d9 	bl	80080da <USBH_LL_IncTimer>
}
 8008f28:	bf00      	nop
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff f911 	bl	8008166 <USBH_LL_Connect>
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff f91a 	bl	8008194 <USBH_LL_Disconnect>
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
 8008f74:	4613      	mov	r3, r2
 8008f76:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff f8cb 	bl	800812e <USBH_LL_PortEnabled>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7ff f8cb 	bl	800814a <USBH_LL_PortDisabled>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d12a      	bne.n	8009024 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008fce:	4a18      	ldr	r2, [pc, #96]	; (8009030 <USBH_LL_Init+0x74>)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a15      	ldr	r2, [pc, #84]	; (8009030 <USBH_LL_Init+0x74>)
 8008fda:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fde:	4b14      	ldr	r3, [pc, #80]	; (8009030 <USBH_LL_Init+0x74>)
 8008fe0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008fe4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008fe6:	4b12      	ldr	r3, [pc, #72]	; (8009030 <USBH_LL_Init+0x74>)
 8008fe8:	2208      	movs	r2, #8
 8008fea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008fec:	4b10      	ldr	r3, [pc, #64]	; (8009030 <USBH_LL_Init+0x74>)
 8008fee:	2201      	movs	r2, #1
 8008ff0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <USBH_LL_Init+0x74>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008ff8:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <USBH_LL_Init+0x74>)
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ffe:	4b0c      	ldr	r3, [pc, #48]	; (8009030 <USBH_LL_Init+0x74>)
 8009000:	2200      	movs	r2, #0
 8009002:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009004:	480a      	ldr	r0, [pc, #40]	; (8009030 <USBH_LL_Init+0x74>)
 8009006:	f7f8 fa93 	bl	8001530 <HAL_HCD_Init>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009010:	f7f7 fcf8 	bl	8000a04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009014:	4806      	ldr	r0, [pc, #24]	; (8009030 <USBH_LL_Init+0x74>)
 8009016:	f7f8 fe97 	bl	8001d48 <HAL_HCD_GetCurrentFrame>
 800901a:	4603      	mov	r3, r0
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff f84c 	bl	80080bc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000594 	.word	0x20000594

08009034 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800904a:	4618      	mov	r0, r3
 800904c:	f7f8 fe04 	bl	8001c58 <HAL_HCD_Start>
 8009050:	4603      	mov	r3, r0
 8009052:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f95c 	bl	8009314 <USBH_Get_USB_Status>
 800905c:	4603      	mov	r3, r0
 800905e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009060:	7bbb      	ldrb	r3, [r7, #14]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009080:	4618      	mov	r0, r3
 8009082:	f7f8 fe0c 	bl	8001c9e <HAL_HCD_Stop>
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800908a:	7bfb      	ldrb	r3, [r7, #15]
 800908c:	4618      	mov	r0, r3
 800908e:	f000 f941 	bl	8009314 <USBH_Get_USB_Status>
 8009092:	4603      	mov	r3, r0
 8009094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009096:	7bbb      	ldrb	r3, [r7, #14]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f8 fe56 	bl	8001d64 <HAL_HCD_GetCurrentSpeed>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d007      	beq.n	80090ce <USBH_LL_GetSpeed+0x2e>
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d302      	bcc.n	80090c8 <USBH_LL_GetSpeed+0x28>
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d006      	beq.n	80090d4 <USBH_LL_GetSpeed+0x34>
 80090c6:	e008      	b.n	80090da <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
    break;
 80090cc:	e008      	b.n	80090e0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80090ce:	2301      	movs	r3, #1
 80090d0:	73fb      	strb	r3, [r7, #15]
    break;
 80090d2:	e005      	b.n	80090e0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80090d4:	2302      	movs	r3, #2
 80090d6:	73fb      	strb	r3, [r7, #15]
    break;
 80090d8:	e002      	b.n	80090e0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80090da:	2301      	movs	r3, #1
 80090dc:	73fb      	strb	r3, [r7, #15]
    break;
 80090de:	bf00      	nop
  }
  return  speed;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009100:	4618      	mov	r0, r3
 8009102:	f7f8 fde9 	bl	8001cd8 <HAL_HCD_ResetPort>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	4618      	mov	r0, r3
 800910e:	f000 f901 	bl	8009314 <USBH_Get_USB_Status>
 8009112:	4603      	mov	r3, r0
 8009114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009116:	7bbb      	ldrb	r3, [r7, #14]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7f8 fdf1 	bl	8001d1e <HAL_HCD_HC_GetXferCount>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}

08009146 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009146:	b590      	push	{r4, r7, lr}
 8009148:	b089      	sub	sp, #36	; 0x24
 800914a:	af04      	add	r7, sp, #16
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	4608      	mov	r0, r1
 8009150:	4611      	mov	r1, r2
 8009152:	461a      	mov	r2, r3
 8009154:	4603      	mov	r3, r0
 8009156:	70fb      	strb	r3, [r7, #3]
 8009158:	460b      	mov	r3, r1
 800915a:	70bb      	strb	r3, [r7, #2]
 800915c:	4613      	mov	r3, r2
 800915e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800916e:	787c      	ldrb	r4, [r7, #1]
 8009170:	78ba      	ldrb	r2, [r7, #2]
 8009172:	78f9      	ldrb	r1, [r7, #3]
 8009174:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	4623      	mov	r3, r4
 8009186:	f7f8 fa35 	bl	80015f4 <HAL_HCD_HC_Init>
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 f8bf 	bl	8009314 <USBH_Get_USB_Status>
 8009196:	4603      	mov	r3, r0
 8009198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800919a:	7bbb      	ldrb	r3, [r7, #14]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd90      	pop	{r4, r7, pc}

080091a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	460b      	mov	r3, r1
 80091ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091be:	78fa      	ldrb	r2, [r7, #3]
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7f8 faae 	bl	8001724 <HAL_HCD_HC_Halt>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f8a0 	bl	8009314 <USBH_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80091e2:	b590      	push	{r4, r7, lr}
 80091e4:	b089      	sub	sp, #36	; 0x24
 80091e6:	af04      	add	r7, sp, #16
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	4608      	mov	r0, r1
 80091ec:	4611      	mov	r1, r2
 80091ee:	461a      	mov	r2, r3
 80091f0:	4603      	mov	r3, r0
 80091f2:	70fb      	strb	r3, [r7, #3]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70bb      	strb	r3, [r7, #2]
 80091f8:	4613      	mov	r3, r2
 80091fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800920a:	787c      	ldrb	r4, [r7, #1]
 800920c:	78ba      	ldrb	r2, [r7, #2]
 800920e:	78f9      	ldrb	r1, [r7, #3]
 8009210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009214:	9303      	str	r3, [sp, #12]
 8009216:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009218:	9302      	str	r3, [sp, #8]
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009222:	9300      	str	r3, [sp, #0]
 8009224:	4623      	mov	r3, r4
 8009226:	f7f8 faa1 	bl	800176c <HAL_HCD_HC_SubmitRequest>
 800922a:	4603      	mov	r3, r0
 800922c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	4618      	mov	r0, r3
 8009232:	f000 f86f 	bl	8009314 <USBH_Get_USB_Status>
 8009236:	4603      	mov	r3, r0
 8009238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800923a:	7bbb      	ldrb	r3, [r7, #14]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	bd90      	pop	{r4, r7, pc}

08009244 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009256:	78fa      	ldrb	r2, [r7, #3]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7f8 fd4a 	bl	8001cf4 <HAL_HCD_HC_GetURBState>
 8009260:	4603      	mov	r3, r0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800927c:	2b01      	cmp	r3, #1
 800927e:	d103      	bne.n	8009288 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009280:	78fb      	ldrb	r3, [r7, #3]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 f872 	bl	800936c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009288:	20c8      	movs	r0, #200	; 0xc8
 800928a:	f7f7 fe1f 	bl	8000ecc <HAL_Delay>
  return USBH_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	460b      	mov	r3, r1
 80092a2:	70fb      	strb	r3, [r7, #3]
 80092a4:	4613      	mov	r3, r2
 80092a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80092ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80092b0:	78fa      	ldrb	r2, [r7, #3]
 80092b2:	68f9      	ldr	r1, [r7, #12]
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	440b      	add	r3, r1
 80092be:	333b      	adds	r3, #59	; 0x3b
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	68f9      	ldr	r1, [r7, #12]
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	00db      	lsls	r3, r3, #3
 80092d2:	440b      	add	r3, r1
 80092d4:	3350      	adds	r3, #80	; 0x50
 80092d6:	78ba      	ldrb	r2, [r7, #2]
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	e009      	b.n	80092f0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	68f9      	ldr	r1, [r7, #12]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	00db      	lsls	r3, r3, #3
 80092e8:	440b      	add	r3, r1
 80092ea:	3351      	adds	r3, #81	; 0x51
 80092ec:	78ba      	ldrb	r2, [r7, #2]
 80092ee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7f7 fde0 	bl	8000ecc <HAL_Delay>
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	4603      	mov	r3, r0
 800931c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d817      	bhi.n	8009358 <USBH_Get_USB_Status+0x44>
 8009328:	a201      	add	r2, pc, #4	; (adr r2, 8009330 <USBH_Get_USB_Status+0x1c>)
 800932a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800932e:	bf00      	nop
 8009330:	08009341 	.word	0x08009341
 8009334:	08009347 	.word	0x08009347
 8009338:	0800934d 	.word	0x0800934d
 800933c:	08009353 	.word	0x08009353
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
    break;
 8009344:	e00b      	b.n	800935e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009346:	2302      	movs	r3, #2
 8009348:	73fb      	strb	r3, [r7, #15]
    break;
 800934a:	e008      	b.n	800935e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800934c:	2301      	movs	r3, #1
 800934e:	73fb      	strb	r3, [r7, #15]
    break;
 8009350:	e005      	b.n	800935e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009352:	2302      	movs	r3, #2
 8009354:	73fb      	strb	r3, [r7, #15]
    break;
 8009356:	e002      	b.n	800935e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009358:	2302      	movs	r3, #2
 800935a:	73fb      	strb	r3, [r7, #15]
    break;
 800935c:	bf00      	nop
  }
  return usb_status;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800937a:	79fb      	ldrb	r3, [r7, #7]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009380:	2301      	movs	r3, #1
 8009382:	73fb      	strb	r3, [r7, #15]
 8009384:	e001      	b.n	800938a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	461a      	mov	r2, r3
 800938e:	2101      	movs	r1, #1
 8009390:	4803      	ldr	r0, [pc, #12]	; (80093a0 <MX_DriverVbusFS+0x34>)
 8009392:	f7f8 f899 	bl	80014c8 <HAL_GPIO_WritePin>
}
 8009396:	bf00      	nop
 8009398:	3710      	adds	r7, #16
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	40020800 	.word	0x40020800

080093a4 <__errno>:
 80093a4:	4b01      	ldr	r3, [pc, #4]	; (80093ac <__errno+0x8>)
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	2000002c 	.word	0x2000002c

080093b0 <__libc_init_array>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4e0d      	ldr	r6, [pc, #52]	; (80093e8 <__libc_init_array+0x38>)
 80093b4:	4c0d      	ldr	r4, [pc, #52]	; (80093ec <__libc_init_array+0x3c>)
 80093b6:	1ba4      	subs	r4, r4, r6
 80093b8:	10a4      	asrs	r4, r4, #2
 80093ba:	2500      	movs	r5, #0
 80093bc:	42a5      	cmp	r5, r4
 80093be:	d109      	bne.n	80093d4 <__libc_init_array+0x24>
 80093c0:	4e0b      	ldr	r6, [pc, #44]	; (80093f0 <__libc_init_array+0x40>)
 80093c2:	4c0c      	ldr	r4, [pc, #48]	; (80093f4 <__libc_init_array+0x44>)
 80093c4:	f000 f8ea 	bl	800959c <_init>
 80093c8:	1ba4      	subs	r4, r4, r6
 80093ca:	10a4      	asrs	r4, r4, #2
 80093cc:	2500      	movs	r5, #0
 80093ce:	42a5      	cmp	r5, r4
 80093d0:	d105      	bne.n	80093de <__libc_init_array+0x2e>
 80093d2:	bd70      	pop	{r4, r5, r6, pc}
 80093d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093d8:	4798      	blx	r3
 80093da:	3501      	adds	r5, #1
 80093dc:	e7ee      	b.n	80093bc <__libc_init_array+0xc>
 80093de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80093e2:	4798      	blx	r3
 80093e4:	3501      	adds	r5, #1
 80093e6:	e7f2      	b.n	80093ce <__libc_init_array+0x1e>
 80093e8:	080095d8 	.word	0x080095d8
 80093ec:	080095d8 	.word	0x080095d8
 80093f0:	080095d8 	.word	0x080095d8
 80093f4:	080095dc 	.word	0x080095dc

080093f8 <malloc>:
 80093f8:	4b02      	ldr	r3, [pc, #8]	; (8009404 <malloc+0xc>)
 80093fa:	4601      	mov	r1, r0
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f000 b861 	b.w	80094c4 <_malloc_r>
 8009402:	bf00      	nop
 8009404:	2000002c 	.word	0x2000002c

08009408 <free>:
 8009408:	4b02      	ldr	r3, [pc, #8]	; (8009414 <free+0xc>)
 800940a:	4601      	mov	r1, r0
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	f000 b80b 	b.w	8009428 <_free_r>
 8009412:	bf00      	nop
 8009414:	2000002c 	.word	0x2000002c

08009418 <memset>:
 8009418:	4402      	add	r2, r0
 800941a:	4603      	mov	r3, r0
 800941c:	4293      	cmp	r3, r2
 800941e:	d100      	bne.n	8009422 <memset+0xa>
 8009420:	4770      	bx	lr
 8009422:	f803 1b01 	strb.w	r1, [r3], #1
 8009426:	e7f9      	b.n	800941c <memset+0x4>

08009428 <_free_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4605      	mov	r5, r0
 800942c:	2900      	cmp	r1, #0
 800942e:	d045      	beq.n	80094bc <_free_r+0x94>
 8009430:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009434:	1f0c      	subs	r4, r1, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	bfb8      	it	lt
 800943a:	18e4      	addlt	r4, r4, r3
 800943c:	f000 f8ac 	bl	8009598 <__malloc_lock>
 8009440:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <_free_r+0x98>)
 8009442:	6813      	ldr	r3, [r2, #0]
 8009444:	4610      	mov	r0, r2
 8009446:	b933      	cbnz	r3, 8009456 <_free_r+0x2e>
 8009448:	6063      	str	r3, [r4, #4]
 800944a:	6014      	str	r4, [r2, #0]
 800944c:	4628      	mov	r0, r5
 800944e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009452:	f000 b8a2 	b.w	800959a <__malloc_unlock>
 8009456:	42a3      	cmp	r3, r4
 8009458:	d90c      	bls.n	8009474 <_free_r+0x4c>
 800945a:	6821      	ldr	r1, [r4, #0]
 800945c:	1862      	adds	r2, r4, r1
 800945e:	4293      	cmp	r3, r2
 8009460:	bf04      	itt	eq
 8009462:	681a      	ldreq	r2, [r3, #0]
 8009464:	685b      	ldreq	r3, [r3, #4]
 8009466:	6063      	str	r3, [r4, #4]
 8009468:	bf04      	itt	eq
 800946a:	1852      	addeq	r2, r2, r1
 800946c:	6022      	streq	r2, [r4, #0]
 800946e:	6004      	str	r4, [r0, #0]
 8009470:	e7ec      	b.n	800944c <_free_r+0x24>
 8009472:	4613      	mov	r3, r2
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	b10a      	cbz	r2, 800947c <_free_r+0x54>
 8009478:	42a2      	cmp	r2, r4
 800947a:	d9fa      	bls.n	8009472 <_free_r+0x4a>
 800947c:	6819      	ldr	r1, [r3, #0]
 800947e:	1858      	adds	r0, r3, r1
 8009480:	42a0      	cmp	r0, r4
 8009482:	d10b      	bne.n	800949c <_free_r+0x74>
 8009484:	6820      	ldr	r0, [r4, #0]
 8009486:	4401      	add	r1, r0
 8009488:	1858      	adds	r0, r3, r1
 800948a:	4282      	cmp	r2, r0
 800948c:	6019      	str	r1, [r3, #0]
 800948e:	d1dd      	bne.n	800944c <_free_r+0x24>
 8009490:	6810      	ldr	r0, [r2, #0]
 8009492:	6852      	ldr	r2, [r2, #4]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	4401      	add	r1, r0
 8009498:	6019      	str	r1, [r3, #0]
 800949a:	e7d7      	b.n	800944c <_free_r+0x24>
 800949c:	d902      	bls.n	80094a4 <_free_r+0x7c>
 800949e:	230c      	movs	r3, #12
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	e7d3      	b.n	800944c <_free_r+0x24>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	1821      	adds	r1, r4, r0
 80094a8:	428a      	cmp	r2, r1
 80094aa:	bf04      	itt	eq
 80094ac:	6811      	ldreq	r1, [r2, #0]
 80094ae:	6852      	ldreq	r2, [r2, #4]
 80094b0:	6062      	str	r2, [r4, #4]
 80094b2:	bf04      	itt	eq
 80094b4:	1809      	addeq	r1, r1, r0
 80094b6:	6021      	streq	r1, [r4, #0]
 80094b8:	605c      	str	r4, [r3, #4]
 80094ba:	e7c7      	b.n	800944c <_free_r+0x24>
 80094bc:	bd38      	pop	{r3, r4, r5, pc}
 80094be:	bf00      	nop
 80094c0:	200000b8 	.word	0x200000b8

080094c4 <_malloc_r>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	1ccd      	adds	r5, r1, #3
 80094c8:	f025 0503 	bic.w	r5, r5, #3
 80094cc:	3508      	adds	r5, #8
 80094ce:	2d0c      	cmp	r5, #12
 80094d0:	bf38      	it	cc
 80094d2:	250c      	movcc	r5, #12
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	4606      	mov	r6, r0
 80094d8:	db01      	blt.n	80094de <_malloc_r+0x1a>
 80094da:	42a9      	cmp	r1, r5
 80094dc:	d903      	bls.n	80094e6 <_malloc_r+0x22>
 80094de:	230c      	movs	r3, #12
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	2000      	movs	r0, #0
 80094e4:	bd70      	pop	{r4, r5, r6, pc}
 80094e6:	f000 f857 	bl	8009598 <__malloc_lock>
 80094ea:	4a21      	ldr	r2, [pc, #132]	; (8009570 <_malloc_r+0xac>)
 80094ec:	6814      	ldr	r4, [r2, #0]
 80094ee:	4621      	mov	r1, r4
 80094f0:	b991      	cbnz	r1, 8009518 <_malloc_r+0x54>
 80094f2:	4c20      	ldr	r4, [pc, #128]	; (8009574 <_malloc_r+0xb0>)
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	b91b      	cbnz	r3, 8009500 <_malloc_r+0x3c>
 80094f8:	4630      	mov	r0, r6
 80094fa:	f000 f83d 	bl	8009578 <_sbrk_r>
 80094fe:	6020      	str	r0, [r4, #0]
 8009500:	4629      	mov	r1, r5
 8009502:	4630      	mov	r0, r6
 8009504:	f000 f838 	bl	8009578 <_sbrk_r>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d124      	bne.n	8009556 <_malloc_r+0x92>
 800950c:	230c      	movs	r3, #12
 800950e:	6033      	str	r3, [r6, #0]
 8009510:	4630      	mov	r0, r6
 8009512:	f000 f842 	bl	800959a <__malloc_unlock>
 8009516:	e7e4      	b.n	80094e2 <_malloc_r+0x1e>
 8009518:	680b      	ldr	r3, [r1, #0]
 800951a:	1b5b      	subs	r3, r3, r5
 800951c:	d418      	bmi.n	8009550 <_malloc_r+0x8c>
 800951e:	2b0b      	cmp	r3, #11
 8009520:	d90f      	bls.n	8009542 <_malloc_r+0x7e>
 8009522:	600b      	str	r3, [r1, #0]
 8009524:	50cd      	str	r5, [r1, r3]
 8009526:	18cc      	adds	r4, r1, r3
 8009528:	4630      	mov	r0, r6
 800952a:	f000 f836 	bl	800959a <__malloc_unlock>
 800952e:	f104 000b 	add.w	r0, r4, #11
 8009532:	1d23      	adds	r3, r4, #4
 8009534:	f020 0007 	bic.w	r0, r0, #7
 8009538:	1ac3      	subs	r3, r0, r3
 800953a:	d0d3      	beq.n	80094e4 <_malloc_r+0x20>
 800953c:	425a      	negs	r2, r3
 800953e:	50e2      	str	r2, [r4, r3]
 8009540:	e7d0      	b.n	80094e4 <_malloc_r+0x20>
 8009542:	428c      	cmp	r4, r1
 8009544:	684b      	ldr	r3, [r1, #4]
 8009546:	bf16      	itet	ne
 8009548:	6063      	strne	r3, [r4, #4]
 800954a:	6013      	streq	r3, [r2, #0]
 800954c:	460c      	movne	r4, r1
 800954e:	e7eb      	b.n	8009528 <_malloc_r+0x64>
 8009550:	460c      	mov	r4, r1
 8009552:	6849      	ldr	r1, [r1, #4]
 8009554:	e7cc      	b.n	80094f0 <_malloc_r+0x2c>
 8009556:	1cc4      	adds	r4, r0, #3
 8009558:	f024 0403 	bic.w	r4, r4, #3
 800955c:	42a0      	cmp	r0, r4
 800955e:	d005      	beq.n	800956c <_malloc_r+0xa8>
 8009560:	1a21      	subs	r1, r4, r0
 8009562:	4630      	mov	r0, r6
 8009564:	f000 f808 	bl	8009578 <_sbrk_r>
 8009568:	3001      	adds	r0, #1
 800956a:	d0cf      	beq.n	800950c <_malloc_r+0x48>
 800956c:	6025      	str	r5, [r4, #0]
 800956e:	e7db      	b.n	8009528 <_malloc_r+0x64>
 8009570:	200000b8 	.word	0x200000b8
 8009574:	200000bc 	.word	0x200000bc

08009578 <_sbrk_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4c06      	ldr	r4, [pc, #24]	; (8009594 <_sbrk_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4605      	mov	r5, r0
 8009580:	4608      	mov	r0, r1
 8009582:	6023      	str	r3, [r4, #0]
 8009584:	f7f7 fbba 	bl	8000cfc <_sbrk>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_sbrk_r+0x1a>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	b103      	cbz	r3, 8009592 <_sbrk_r+0x1a>
 8009590:	602b      	str	r3, [r5, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000858 	.word	0x20000858

08009598 <__malloc_lock>:
 8009598:	4770      	bx	lr

0800959a <__malloc_unlock>:
 800959a:	4770      	bx	lr

0800959c <_init>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr

080095a8 <_fini>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	bf00      	nop
 80095ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ae:	bc08      	pop	{r3}
 80095b0:	469e      	mov	lr, r3
 80095b2:	4770      	bx	lr
